
Project07_08_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f6c  0800dd18  0800dd18  0001dd18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c84  08010c84  000309f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010c84  08010c84  00020c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c8c  08010c8c  000309f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c8c  08010c8c  00020c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c90  08010c90  00020c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009f0  20000000  08010c94  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010830  200009f0  08011684  000309f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011220  08011684  00031220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030a20  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cfcf  00000000  00000000  00030a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000403c  00000000  00000000  0004da32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  00051a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001607  00000000  00000000  000536d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab7c  00000000  00000000  00054cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002000b  00000000  00000000  0007f853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010365b  00000000  00000000  0009f85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089ec  00000000  00000000  001a2ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001ab8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009f0 	.word	0x200009f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dd00 	.word	0x0800dd00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009f4 	.word	0x200009f4
 800020c:	0800dd00 	.word	0x0800dd00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f88:	f3bf 8f4f 	dsb	sy
}
 8000f8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8e:	f3bf 8f6f 	isb	sy
}
 8000f92:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <SCB_EnableICache+0x48>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9c:	f3bf 8f4f 	dsb	sy
}
 8000fa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa2:	f3bf 8f6f 	isb	sy
}
 8000fa6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <SCB_EnableICache+0x48>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <SCB_EnableICache+0x48>)
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb4:	f3bf 8f4f 	dsb	sy
}
 8000fb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fba:	f3bf 8f6f 	isb	sy
}
 8000fbe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <SCB_EnableDCache+0x84>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fde:	f3bf 8f4f 	dsb	sy
}
 8000fe2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <SCB_EnableDCache+0x84>)
 8000fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fea:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	0b5b      	lsrs	r3, r3, #13
 8000ff0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ff4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ffe:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	015a      	lsls	r2, r3, #5
 8001004:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001008:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800100e:	4911      	ldr	r1, [pc, #68]	; (8001054 <SCB_EnableDCache+0x84>)
 8001010:	4313      	orrs	r3, r2
 8001012:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	60ba      	str	r2, [r7, #8]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1ef      	bne.n	8001000 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	60fa      	str	r2, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1e5      	bne.n	8000ff6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800102a:	f3bf 8f4f 	dsb	sy
}
 800102e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <SCB_EnableDCache+0x84>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <SCB_EnableDCache+0x84>)
 8001036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800103c:	f3bf 8f4f 	dsb	sy
}
 8001040:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001042:	f3bf 8f6f 	isb	sy
}
 8001046:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Communication_Mode>:
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
void Communication_Mode(bool rx, bool tx){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
	if(rx) HAL_UART_Receive_IT(&huart6, &UART_MB_rcvd, 1);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <Communication_Mode+0x20>
 800106e:	2201      	movs	r2, #1
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <Communication_Mode+0x54>)
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <Communication_Mode+0x58>)
 8001074:	f008 fa62 	bl	800953c <HAL_UART_Receive_IT>

	if(tx && UART_MB_sending == 0) {
 8001078:	79bb      	ldrb	r3, [r7, #6]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d009      	beq.n	8001092 <Communication_Mode+0x3a>
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <Communication_Mode+0x5c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d104      	bne.n	8001092 <Communication_Mode+0x3a>
		UART_MB_sending = 1;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <Communication_Mode+0x5c>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
		SetCharacterReadyToTransmit();
 800108e:	f009 fcd7 	bl	800aa40 <SetCharacterReadyToTransmit>
	}
	if(!tx) UART_MB_sending = 0;
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	f083 0301 	eor.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <Communication_Mode+0x4c>
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <Communication_Mode+0x5c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20010ae0 	.word	0x20010ae0
 80010b0:	20000df8 	.word	0x20000df8
 80010b4:	20010ae1 	.word	0x20010ae1

080010b8 <Communication_Put>:
void Communication_Put(uint8_t ch){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit_IT(&huart6, &ch, 1);
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	2201      	movs	r2, #1
 80010c6:	4619      	mov	r1, r3
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <Communication_Put+0x20>)
 80010ca:	f008 f9db 	bl	8009484 <HAL_UART_Transmit_IT>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000df8 	.word	0x20000df8

080010dc <Communication_Get>:

uint8_t Communication_Get(void){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	uint8_t tmp = UART_MB_rcvd;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <Communication_Get+0x24>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
	UART_MB_rcvd = 0;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <Communication_Get+0x24>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
	SetCharacterReceived(false);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f009 fc96 	bl	800aa20 <SetCharacterReceived>
	return tmp;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20010ae0 	.word	0x20010ae0

08001104 <Enable50usTimer>:

void Enable50usTimer(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001108:	201e      	movs	r0, #30
 800110a:	f004 fa10 	bl	800552e <HAL_NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <Disable50usTimer>:

void Disable50usTimer(void){
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8001116:	201e      	movs	r0, #30
 8001118:	f004 fa17 	bl	800554a <HAL_NVIC_DisableIRQ>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TS_INT_PIN){ // TOUCH SCREEN touched -- this is the place where you have to check where the touch screen is pressed
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001130:	d102      	bne.n	8001138 <HAL_GPIO_EXTI_Callback+0x18>
	  BSP_TS_GetState(&TS_State); /*!*/
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <HAL_GPIO_EXTI_Callback+0x20>)
 8001134:	f003 fa0a 	bl	800454c <BSP_TS_GetState>
	}
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20010a74 	.word	0x20010a74

08001144 <DrawPointOfTouch>:

void DrawPointOfTouch(TS_StateTypeDef *TSS){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  static uint16_t lastx = 0;
  static uint16_t lasty = 0;
  BSP_LCD_SelectLayer(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f002 fcbf 	bl	8003ad0 <BSP_LCD_SelectLayer>
  BSP_LCD_SetTextColor(LCD_COLOR_TRANSPARENT);
 8001152:	2000      	movs	r0, #0
 8001154:	f002 fccc 	bl	8003af0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(lastx,lasty, 3);
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <DrawPointOfTouch+0x8c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <DrawPointOfTouch+0x90>)
 800115e:	8811      	ldrh	r1, [r2, #0]
 8001160:	2203      	movs	r2, #3
 8001162:	4618      	mov	r0, r3
 8001164:	f002 ff16 	bl	8003f94 <BSP_LCD_DrawCircle>
  BSP_LCD_DrawCircle(lastx,lasty, 2);
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <DrawPointOfTouch+0x8c>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <DrawPointOfTouch+0x90>)
 800116e:	8811      	ldrh	r1, [r2, #0]
 8001170:	2202      	movs	r2, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f002 ff0e 	bl	8003f94 <BSP_LCD_DrawCircle>
  if(TSS->touchDetected > 0){
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d01f      	beq.n	80011c0 <DrawPointOfTouch+0x7c>
	  lastx = TSS->touchX[0];
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	885a      	ldrh	r2, [r3, #2]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <DrawPointOfTouch+0x8c>)
 8001186:	801a      	strh	r2, [r3, #0]
	  lasty = TSS->touchY[0];
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	899a      	ldrh	r2, [r3, #12]
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <DrawPointOfTouch+0x90>)
 800118e:	801a      	strh	r2, [r3, #0]
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001190:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001194:	f002 fcac 	bl	8003af0 <BSP_LCD_SetTextColor>
	  BSP_LCD_DrawCircle(lastx,lasty, 3);
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <DrawPointOfTouch+0x8c>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <DrawPointOfTouch+0x90>)
 800119e:	8811      	ldrh	r1, [r2, #0]
 80011a0:	2203      	movs	r2, #3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fef6 	bl	8003f94 <BSP_LCD_DrawCircle>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f002 fca0 	bl	8003af0 <BSP_LCD_SetTextColor>
	  BSP_LCD_DrawCircle(lastx,lasty, 2);
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <DrawPointOfTouch+0x8c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <DrawPointOfTouch+0x90>)
 80011b6:	8811      	ldrh	r1, [r2, #0]
 80011b8:	2202      	movs	r2, #2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 feea 	bl	8003f94 <BSP_LCD_DrawCircle>
  }
  BSP_LCD_SelectLayer(0);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f002 fc85 	bl	8003ad0 <BSP_LCD_SelectLayer>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20010bac 	.word	0x20010bac
 80011d4:	20010bae 	.word	0x20010bae

080011d8 <DrawCalibrationCross>:

void DrawCalibrationCross(uint32_t x, uint32_t y){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011e2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011e6:	f002 fc83 	bl	8003af0 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(x-1, y-1, x-1, y-10); // upper left
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b298      	uxth	r0, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b299      	uxth	r1, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	3b01      	subs	r3, #1
 8001200:	b29a      	uxth	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b0a      	subs	r3, #10
 8001208:	b29b      	uxth	r3, r3
 800120a:	f002 fdf7 	bl	8003dfc <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x-1, y+1, x-1, y+10); // upper right
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	b29b      	uxth	r3, r3
 8001212:	3b01      	subs	r3, #1
 8001214:	b298      	uxth	r0, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	3301      	adds	r3, #1
 800121c:	b299      	uxth	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	b29b      	uxth	r3, r3
 8001222:	3b01      	subs	r3, #1
 8001224:	b29a      	uxth	r2, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	330a      	adds	r3, #10
 800122c:	b29b      	uxth	r3, r3
 800122e:	f002 fde5 	bl	8003dfc <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x+1, y-1, x+1, y-10); // lower left
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	b29b      	uxth	r3, r3
 8001236:	3301      	adds	r3, #1
 8001238:	b298      	uxth	r0, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3b01      	subs	r3, #1
 8001240:	b299      	uxth	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	b29b      	uxth	r3, r3
 8001246:	3301      	adds	r3, #1
 8001248:	b29a      	uxth	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	3b0a      	subs	r3, #10
 8001250:	b29b      	uxth	r3, r3
 8001252:	f002 fdd3 	bl	8003dfc <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x+1, y+1, x+1, y+10); // lower right
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	b29b      	uxth	r3, r3
 800125a:	3301      	adds	r3, #1
 800125c:	b298      	uxth	r0, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	3301      	adds	r3, #1
 8001264:	b299      	uxth	r1, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	3301      	adds	r3, #1
 800126c:	b29a      	uxth	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	330a      	adds	r3, #10
 8001274:	b29b      	uxth	r3, r3
 8001276:	f002 fdc1 	bl	8003dfc <BSP_LCD_DrawLine>

	BSP_LCD_DrawLine(x-1, y-1, x-10, y-1); // lefter up
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	b29b      	uxth	r3, r3
 800127e:	3b01      	subs	r3, #1
 8001280:	b298      	uxth	r0, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	3b01      	subs	r3, #1
 8001288:	b299      	uxth	r1, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	b29b      	uxth	r3, r3
 800128e:	3b0a      	subs	r3, #10
 8001290:	b29a      	uxth	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	b29b      	uxth	r3, r3
 800129a:	f002 fdaf 	bl	8003dfc <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x+1, y-1, x+10, y-1); // righter up
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	b298      	uxth	r0, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b299      	uxth	r1, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	330a      	adds	r3, #10
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	f002 fd9d 	bl	8003dfc <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x-1, y+1, x-10, y+1); // lefter down
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b298      	uxth	r0, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3301      	adds	r3, #1
 80012d0:	b299      	uxth	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	3b0a      	subs	r3, #10
 80012d8:	b29a      	uxth	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f002 fd8b 	bl	8003dfc <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x+1, y+1, x+10, y+1); // righter down
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3301      	adds	r3, #1
 80012ec:	b298      	uxth	r0, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	3301      	adds	r3, #1
 80012f4:	b299      	uxth	r1, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	330a      	adds	r3, #10
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	3301      	adds	r3, #1
 8001304:	b29b      	uxth	r3, r3
 8001306:	f002 fd79 	bl	8003dfc <BSP_LCD_DrawLine>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_LTDC_LineEventCallback>:

void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  DrawPointOfTouch(&TS_State);    // TODO Delete if needed
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <HAL_LTDC_LineEventCallback+0x44>)
 800131e:	f7ff ff11 	bl	8001144 <DrawPointOfTouch>
  DrawCalibrationCross(30, 30);   // TODO Delete if needed
 8001322:	211e      	movs	r1, #30
 8001324:	201e      	movs	r0, #30
 8001326:	f7ff ff57 	bl	80011d8 <DrawCalibrationCross>
  DrawCalibrationCross(450, 30);  // TODO Delete if needed
 800132a:	211e      	movs	r1, #30
 800132c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001330:	f7ff ff52 	bl	80011d8 <DrawCalibrationCross>
  DrawCalibrationCross(450, 240); // TODO Delete if needed
 8001334:	21f0      	movs	r1, #240	; 0xf0
 8001336:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800133a:	f7ff ff4d 	bl	80011d8 <DrawCalibrationCross>
  DrawCalibrationCross(30, 240);  // TODO Delete if needed
 800133e:	21f0      	movs	r1, #240	; 0xf0
 8001340:	201e      	movs	r0, #30
 8001342:	f7ff ff49 	bl	80011d8 <DrawCalibrationCross>
  HAL_LTDC_ProgramLineEvent(hltdc, 272);
 8001346:	f44f 7188 	mov.w	r1, #272	; 0x110
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f006 f87e 	bl	800744c <HAL_LTDC_ProgramLineEvent>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20010a74 	.word	0x20010a74

0800135c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	static int i=0;
	static uint32_t tmpval= 0;
	for(i=0,tmpval=0;i<ADC_BUFFER_LENGTH; ++i){
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_ADC_ConvCpltCallback+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e00e      	b.n	8001390 <HAL_ADC_ConvCpltCallback+0x34>
		tmpval += uhADCxConvertedValue[i];
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x58>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a11      	ldr	r2, [pc, #68]	; (80013bc <HAL_ADC_ConvCpltCallback+0x60>)
 8001378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_ADC_ConvCpltCallback+0x5c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4413      	add	r3, r2
 8001382:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001384:	6013      	str	r3, [r2, #0]
	for(i=0,tmpval=0;i<ADC_BUFFER_LENGTH; ++i){
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x58>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x58>)
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x58>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b63      	cmp	r3, #99	; 0x63
 8001396:	ddec      	ble.n	8001372 <HAL_ADC_ConvCpltCallback+0x16>
	}
	adc_value = tmpval/ADC_BUFFER_LENGTH;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_ADC_ConvCpltCallback+0x5c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_ADC_ConvCpltCallback+0x64>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_ADC_ConvCpltCallback+0x68>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20010bb0 	.word	0x20010bb0
 80013b8:	20010bb4 	.word	0x20010bb4
 80013bc:	20000eb8 	.word	0x20000eb8
 80013c0:	51eb851f 	.word	0x51eb851f
 80013c4:	20001048 	.word	0x20001048

080013c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_UART_RxCpltCallback+0x2c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d107      	bne.n	80013ea <HAL_UART_RxCpltCallback+0x22>
		SetCharacterReceived(true);
 80013da:	2001      	movs	r0, #1
 80013dc:	f009 fb20 	bl	800aa20 <SetCharacterReceived>
		HAL_UART_Receive_IT(&huart6, &UART_MB_rcvd, 1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	4905      	ldr	r1, [pc, #20]	; (80013f8 <HAL_UART_RxCpltCallback+0x30>)
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <HAL_UART_RxCpltCallback+0x34>)
 80013e6:	f008 f8a9 	bl	800953c <HAL_UART_Receive_IT>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40011400 	.word	0x40011400
 80013f8:	20010ae0 	.word	0x20010ae0
 80013fc:	20000df8 	.word	0x20000df8

08001400 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_UART_TxCpltCallback+0x24>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d102      	bne.n	8001418 <HAL_UART_TxCpltCallback+0x18>
		UART_MB_sending = 0;
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_UART_TxCpltCallback+0x28>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40011400 	.word	0x40011400
 8001428:	20010ae1 	.word	0x20010ae1

0800142c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800142c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001430:	b08c      	sub	sp, #48	; 0x30
 8001432:	af04      	add	r7, sp, #16
 8001434:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800143e:	f040 818c 	bne.w	800175a <HAL_TIM_PeriodElapsedCallback+0x32e>
		static uint16_t raw_y = 2345;
		static uint16_t raw_u = 0;
		static float y = 0.0f;
		static float u = 0.0f;
		MB_SendRequest(SLAVE_ID, FUN_READ_INPUT_REGISTER, get_temp, 4);
 8001442:	2304      	movs	r3, #4
 8001444:	4a94      	ldr	r2, [pc, #592]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001446:	2104      	movs	r1, #4
 8001448:	200c      	movs	r0, #12
 800144a:	f009 fb0f 	bl	800aa6c <MB_SendRequest>
		respstate = MB_GetResponse(SLAVE_ID, FUN_READ_INPUT_REGISTER, &resp, &resplen, 300);
 800144e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4b91      	ldr	r3, [pc, #580]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001456:	4a92      	ldr	r2, [pc, #584]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001458:	2104      	movs	r1, #4
 800145a:	200c      	movs	r0, #12
 800145c:	f009 fb8c 	bl	800ab78 <MB_GetResponse>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b8f      	ldr	r3, [pc, #572]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001466:	701a      	strb	r2, [r3, #0]
		if(respstate != RESPONSE_OK) while(1);
 8001468:	4b8e      	ldr	r3, [pc, #568]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d000      	beq.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x46>
 8001470:	e7fe      	b.n	8001470 <HAL_TIM_PeriodElapsedCallback+0x44>
		else {
			raw_y = resp[1]*0x100+resp[2];
 8001472:	4b8b      	ldr	r3, [pc, #556]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b87      	ldr	r3, [pc, #540]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3302      	adds	r3, #2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	b29a      	uxth	r2, r3
 800148e:	4b86      	ldr	r3, [pc, #536]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001490:	801a      	strh	r2, [r3, #0]
			y = raw_y/100.0f;
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149e:	eddf 6a83 	vldr	s13, [pc, #524]	; 80016ac <HAL_TIM_PeriodElapsedCallback+0x280>
 80014a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]
		}

		float e = yzad - y;
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80014ae:	ed93 7a00 	vldr	s14, [r3]
 80014b2:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014bc:	edc7 7a05 	vstr	s15, [r7, #20]
		cur_y = y;
 80014c0:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a7c      	ldr	r2, [pc, #496]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80014c6:	6013      	str	r3, [r2, #0]
		/* przyklady tego, jak nalezy interpretowac poszczegolne wartosci sterowania */
//		u = -10.0; // grzanie z moca (-10+50)% =  40%
//		u =  50.0; // grzanie z moca ( 50+50)% = 100%
//		u =   0.0; // grzanie z moca (  0+50)% =  50%
		if(iter < 20){
 80014c8:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b13      	cmp	r3, #19
 80014ce:	dc03      	bgt.n	80014d8 <HAL_TIM_PeriodElapsedCallback+0xac>
			u = 0.0;
 80014d0:	4b7b      	ldr	r3, [pc, #492]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
		}

		int D = sizeD;
 80014d8:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	613b      	str	r3, [r7, #16]
		static float Ke = 0.8060f;

		float elem = 0.0f;
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
		float du_kmj;
		for(int j = 0; j <= D-2; j++){
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	e046      	b.n	8001578 <HAL_TIM_PeriodElapsedCallback+0x14c>
			du_kmj = sterowanie[max(0, iter-j)] - sterowanie[max(0, iter-j-1)];
 80014ea:	4b74      	ldr	r3, [pc, #464]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80014f6:	4a74      	ldr	r2, [pc, #464]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001500:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b01      	cmp	r3, #1
 800150a:	bfb8      	it	lt
 800150c:	2301      	movlt	r3, #1
 800150e:	3b01      	subs	r3, #1
 8001510:	4a6d      	ldr	r2, [pc, #436]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7fe fed5 	bl	80002c8 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb5f 	bl	8000be8 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	60bb      	str	r3, [r7, #8]
			elem = elem + Kuj[j]*du_kmj;
 800152e:	69f8      	ldr	r0, [r7, #28]
 8001530:	f7ff f82a 	bl	8000588 <__aeabi_f2d>
 8001534:	4680      	mov	r8, r0
 8001536:	4689      	mov	r9, r1
 8001538:	4a64      	ldr	r2, [pc, #400]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001544:	68b8      	ldr	r0, [r7, #8]
 8001546:	f7ff f81f 	bl	8000588 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4620      	mov	r0, r4
 8001550:	4629      	mov	r1, r5
 8001552:	f7ff f871 	bl	8000638 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4640      	mov	r0, r8
 800155c:	4649      	mov	r1, r9
 800155e:	f7fe feb5 	bl	80002cc <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fb3d 	bl	8000be8 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	61fb      	str	r3, [r7, #28]
		for(int j = 0; j <= D-2; j++){
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	3301      	adds	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	3b01      	subs	r3, #1
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	429a      	cmp	r2, r3
 8001580:	dbb3      	blt.n	80014ea <HAL_TIM_PeriodElapsedCallback+0xbe>
		}

		float du = Ke * e - elem;
 8001582:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	edd7 7a05 	vldr	s15, [r7, #20]
 800158c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001590:	edd7 7a07 	vldr	s15, [r7, #28]
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	edc7 7a03 	vstr	s15, [r7, #12]

		u = sterowanie[iter] + du;
 800159c:	4b47      	ldr	r3, [pc, #284]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x290>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7fe ffec 	bl	8000588 <__aeabi_f2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7fe fe88 	bl	80002cc <__adddf3>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fb10 	bl	8000be8 <__aeabi_d2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a3d      	ldr	r2, [pc, #244]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015cc:	6013      	str	r3, [r2, #0]




		/* aplikacja ograniczen na sygnal sterujacy */
		if(u >   50.0f) u =  50.0f;
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80016d4 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 80015d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	dd02      	ble.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015e4:	4a3c      	ldr	r2, [pc, #240]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80015e6:	601a      	str	r2, [r3, #0]
		if(u <  -50.0f) u = -50.0f;
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80016dc <HAL_TIM_PeriodElapsedCallback+0x2b0>
 80015f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	d502      	bpl.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x1d6>
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015fe:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001600:	601a      	str	r2, [r3, #0]
		cur_u = u;
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a37      	ldr	r2, [pc, #220]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001608:	6013      	str	r3, [r2, #0]
		sterowanie[iter+1] = u;
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1c5c      	adds	r4, r3, #1
 8001614:	4610      	mov	r0, r2
 8001616:	f7fe ffb7 	bl	8000588 <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	482a      	ldr	r0, [pc, #168]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001620:	00e1      	lsls	r1, r4, #3
 8001622:	4401      	add	r1, r0
 8001624:	e9c1 2300 	strd	r2, r3, [r1]

		/* skalowanie z -50..50 do 0..1000 */
		raw_u = (uint16_t)(u+50.0f)*10; // przejscie z -2048 - 2047 do 0 - 4095
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80016d4 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8001632:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800163a:	ee17 3a90 	vmov	r3, s15
 800163e:	b29b      	uxth	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4413      	add	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800164c:	801a      	strh	r2, [r3, #0]

		/* przygotowanie wiadomosci MODBUS */
		heater_var[2] = (raw_u&0xFF00)>>8; // pierwszy bajt
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b29b      	uxth	r3, r3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800165a:	709a      	strb	r2, [r3, #2]
		heater_var[3] = (raw_u&0x00FF)>>0; // drugi bajt
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001664:	70da      	strb	r2, [r3, #3]

		/* wyslanie wiadomosci */
		MB_SendRequest(SLAVE_ID, FUN_WRITE_SINGLE_REGISTER, heater_var, 4);
 8001666:	2304      	movs	r3, #4
 8001668:	4a20      	ldr	r2, [pc, #128]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800166a:	2106      	movs	r1, #6
 800166c:	200c      	movs	r0, #12
 800166e:	f009 f9fd 	bl	800aa6c <MB_SendRequest>

		/* odczyt odpowiedzi i sprawdzenie jej poprawnosci */
		respstate = MB_GetResponse(SLAVE_ID, FUN_WRITE_SINGLE_REGISTER, &resp, &resplen, 300);
 8001672:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800167c:	2106      	movs	r1, #6
 800167e:	200c      	movs	r0, #12
 8001680:	f009 fa7a 	bl	800ab78 <MB_GetResponse>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800168a:	701a      	strb	r2, [r3, #0]
		if(respstate != RESPONSE_OK) while(1);
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d02d      	beq.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8001694:	e7fe      	b.n	8001694 <HAL_TIM_PeriodElapsedCallback+0x268>
 8001696:	bf00      	nop
 8001698:	200007d8 	.word	0x200007d8
 800169c:	20010aa4 	.word	0x20010aa4
 80016a0:	20010aa0 	.word	0x20010aa0
 80016a4:	20010aa6 	.word	0x20010aa6
 80016a8:	200007dc 	.word	0x200007dc
 80016ac:	42c80000 	.word	0x42c80000
 80016b0:	20010bb8 	.word	0x20010bb8
 80016b4:	20001060 	.word	0x20001060
 80016b8:	20001068 	.word	0x20001068
 80016bc:	20010a70 	.word	0x20010a70
 80016c0:	20010bbc 	.word	0x20010bbc
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20001070 	.word	0x20001070
 80016cc:	20000008 	.word	0x20000008
 80016d0:	200007e0 	.word	0x200007e0
 80016d4:	42480000 	.word	0x42480000
 80016d8:	42480000 	.word	0x42480000
 80016dc:	c2480000 	.word	0xc2480000
 80016e0:	c2480000 	.word	0xc2480000
 80016e4:	20001064 	.word	0x20001064
 80016e8:	20010bc0 	.word	0x20010bc0
 80016ec:	200007d4 	.word	0x200007d4

		/* komunikacja z komputerem */
		while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 80016f0:	bf00      	nop
 80016f2:	4824      	ldr	r0, [pc, #144]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80016f4:	f008 f964 	bl	80099c0 <HAL_UART_GetState>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b21      	cmp	r3, #33	; 0x21
 80016fc:	d0f9      	beq.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x2c6>
		sprintf(txt,"U=%.2f;Y=%.2f;YZAD=%.2f;\n",u,y,yzad); // 22 znaki ITER=%.2d;,iter
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff40 	bl	8000588 <__aeabi_f2d>
 8001708:	4680      	mov	r8, r0
 800170a:	4689      	mov	r9, r1
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x360>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff39 	bl	8000588 <__aeabi_f2d>
 8001716:	4604      	mov	r4, r0
 8001718:	460d      	mov	r5, r1
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff32 	bl	8000588 <__aeabi_f2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800172c:	e9cd 4500 	strd	r4, r5, [sp]
 8001730:	4642      	mov	r2, r8
 8001732:	464b      	mov	r3, r9
 8001734:	4917      	ldr	r1, [pc, #92]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001736:	4818      	ldr	r0, [pc, #96]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001738:	f00a f984 	bl	800ba44 <siprintf>
		if(HAL_UART_Transmit_IT(&huart1, (uint8_t*)txt, strlen(txt))!= HAL_OK) Error_Handler();
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800173e:	f7fe fdb7 	bl	80002b0 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29b      	uxth	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	4913      	ldr	r1, [pc, #76]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800174a:	480e      	ldr	r0, [pc, #56]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800174c:	f007 fe9a 	bl	8009484 <HAL_UART_Transmit_IT>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_TIM_PeriodElapsedCallback+0x32e>
 8001756:	f000 fec9 	bl	80024ec <Error_Handler>
	}
	if (htim->Instance == TIM3){ // timer odpowiedzialny za aktualizacje MB i odliczanie timeout'u
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d103      	bne.n	800176c <HAL_TIM_PeriodElapsedCallback+0x340>
		MB();
 8001764:	f009 fa8c 	bl	800ac80 <MB>
		TimeoutTick();
 8001768:	f009 f8b4 	bl	800a8d4 <TimeoutTick>
	}
	if (htim->Instance == TIM4){ // timer odpowiedzialny za odliczanie kwantow 50us
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_TIM_PeriodElapsedCallback+0x34e>
		Timer50usTick();
 8001776:	f009 f869 	bl	800a84c <Timer50usTick>
	}
	if (htim->Instance == TIM5){ // ...
	}
}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001784:	20000d74 	.word	0x20000d74
 8001788:	20010bbc 	.word	0x20010bbc
 800178c:	20010bb8 	.word	0x20010bb8
 8001790:	20001060 	.word	0x20001060
 8001794:	0800dd18 	.word	0x0800dd18
 8001798:	20010ae4 	.word	0x20010ae4
 800179c:	40000400 	.word	0x40000400
 80017a0:	40000800 	.word	0x40000800

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80017aa:	f7ff fbeb 	bl	8000f84 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80017ae:	f7ff fc0f 	bl	8000fd0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b2:	f003 f907 	bl	80049c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(100); /*! Delay so that LCD will not restart during initialisation !*/
 80017b6:	2064      	movs	r0, #100	; 0x64
 80017b8:	f003 f962 	bl	8004a80 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017bc:	f000 f914 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c0:	f000 fd98 	bl	80022f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c4:	f000 fcd6 	bl	8002174 <MX_DMA_Init>
  MX_LTDC_Init();
 80017c8:	f000 fa62 	bl	8001c90 <MX_LTDC_Init>
  MX_FMC_Init();
 80017cc:	f000 fcf0 	bl	80021b0 <MX_FMC_Init>
  MX_DMA2D_Init();
 80017d0:	f000 fa2c 	bl	8001c2c <MX_DMA2D_Init>
  MX_ADC1_Init();
 80017d4:	f000 f978 	bl	8001ac8 <MX_ADC1_Init>
  MX_ADC3_Init();
 80017d8:	f000 f9c8 	bl	8001b6c <MX_ADC3_Init>
  MX_TIM2_Init();
 80017dc:	f000 fb2e 	bl	8001e3c <MX_TIM2_Init>
  MX_TIM3_Init();
 80017e0:	f000 fb7a 	bl	8001ed8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017e4:	f000 fbc6 	bl	8001f74 <MX_TIM4_Init>
  MX_TIM5_Init();
 80017e8:	f000 fc12 	bl	8002010 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80017ec:	f000 fc60 	bl	80020b0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80017f0:	f000 fc8e 	bl	8002110 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_SetFont(&Font20); // choose size of the font: Font8, Font12, Font16, Font20, Font24
 80017f4:	485e      	ldr	r0, [pc, #376]	; (8001970 <main+0x1cc>)
 80017f6:	f002 f9ad 	bl	8003b54 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE); // each character has background!!!
 80017fa:	f04f 30ff 	mov.w	r0, #4294967295
 80017fe:	f002 f98f 	bl	8003b20 <BSP_LCD_SetBackColor>
  BSP_TS_Init(0,0); // initialisation of TouchScreen -- arguments are irrelevant
 8001802:	2100      	movs	r1, #0
 8001804:	2000      	movs	r0, #0
 8001806:	f002 fe33 	bl	8004470 <BSP_TS_Init>
  BSP_TS_ITConfig(); // to cancel exti interrupts from the touch screen comment this line
 800180a:	f002 fe71 	bl	80044f0 <BSP_TS_ITConfig>

  HAL_ADC_Start_DMA(&hadc3, ADC3_buffer, 2);
 800180e:	2202      	movs	r2, #2
 8001810:	4958      	ldr	r1, [pc, #352]	; (8001974 <main+0x1d0>)
 8001812:	4859      	ldr	r0, [pc, #356]	; (8001978 <main+0x1d4>)
 8001814:	f003 f99c 	bl	8004b50 <HAL_ADC_Start_DMA>
  BSP_LCD_SelectLayer(0);
 8001818:	2000      	movs	r0, #0
 800181a:	f002 f959 	bl	8003ad0 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800181e:	f04f 30ff 	mov.w	r0, #4294967295
 8001822:	f002 f9b1 	bl	8003b88 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f002 f952 	bl	8003ad0 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 800182c:	2000      	movs	r0, #0
 800182e:	f002 f9ab 	bl	8003b88 <BSP_LCD_Clear>
  HAL_LTDC_ProgramLineEvent(&hltdc, 272);
 8001832:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001836:	4851      	ldr	r0, [pc, #324]	; (800197c <main+0x1d8>)
 8001838:	f005 fe08 	bl	800744c <HAL_LTDC_ProgramLineEvent>

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)uhADCxConvertedValue, ADC_BUFFER_LENGTH) != HAL_OK)
 800183c:	2264      	movs	r2, #100	; 0x64
 800183e:	4950      	ldr	r1, [pc, #320]	; (8001980 <main+0x1dc>)
 8001840:	4850      	ldr	r0, [pc, #320]	; (8001984 <main+0x1e0>)
 8001842:	f003 f985 	bl	8004b50 <HAL_ADC_Start_DMA>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <main+0xac>
	  Error_Handler();
 800184c:	f000 fe4e 	bl	80024ec <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MB_Config(115200);
 8001850:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001854:	f009 f9ee 	bl	800ac34 <MB_Config>

	while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 8001858:	bf00      	nop
 800185a:	484b      	ldr	r0, [pc, #300]	; (8001988 <main+0x1e4>)
 800185c:	f008 f8b0 	bl	80099c0 <HAL_UART_GetState>
 8001860:	4603      	mov	r3, r0
 8001862:	2b21      	cmp	r3, #33	; 0x21
 8001864:	d0f9      	beq.n	800185a <main+0xb6>
	while(HAL_UART_GetState(&huart6) == HAL_UART_STATE_BUSY_TX);
 8001866:	bf00      	nop
 8001868:	4848      	ldr	r0, [pc, #288]	; (800198c <main+0x1e8>)
 800186a:	f008 f8a9 	bl	80099c0 <HAL_UART_GetState>
 800186e:	4603      	mov	r3, r0
 8001870:	2b21      	cmp	r3, #33	; 0x21
 8001872:	d0f9      	beq.n	8001868 <main+0xc4>

	HAL_TIM_Base_Start_IT(&htim3);
 8001874:	4846      	ldr	r0, [pc, #280]	; (8001990 <main+0x1ec>)
 8001876:	f007 f94b 	bl	8008b10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 800187a:	4846      	ldr	r0, [pc, #280]	; (8001994 <main+0x1f0>)
 800187c:	f007 f948 	bl	8008b10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001880:	4845      	ldr	r0, [pc, #276]	; (8001998 <main+0x1f4>)
 8001882:	f007 f945 	bl	8008b10 <HAL_TIM_Base_Start_IT>

  HAL_Delay(100); // wait for everything to set up before the controller loop starts
 8001886:	2064      	movs	r0, #100	; 0x64
 8001888:	f003 f8fa 	bl	8004a80 <HAL_Delay>


  MB_SendRequest(SLAVE_ID, FUN_WRITE_SINGLE_REGISTER, fan_half, 4);
 800188c:	2304      	movs	r3, #4
 800188e:	4a43      	ldr	r2, [pc, #268]	; (800199c <main+0x1f8>)
 8001890:	2106      	movs	r1, #6
 8001892:	200c      	movs	r0, #12
 8001894:	f009 f8ea 	bl	800aa6c <MB_SendRequest>
	respstate = MB_GetResponse(SLAVE_ID, FUN_WRITE_SINGLE_REGISTER, &resp, &resplen, 300);
 8001898:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <main+0x1fc>)
 80018a0:	4a40      	ldr	r2, [pc, #256]	; (80019a4 <main+0x200>)
 80018a2:	2106      	movs	r1, #6
 80018a4:	200c      	movs	r0, #12
 80018a6:	f009 f967 	bl	800ab78 <MB_GetResponse>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <main+0x204>)
 80018b0:	701a      	strb	r2, [r3, #0]
	if(respstate != RESPONSE_OK) while(1);
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <main+0x204>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d000      	beq.n	80018bc <main+0x118>
 80018ba:	e7fe      	b.n	80018ba <main+0x116>
	HAL_Delay(900);
 80018bc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80018c0:	f003 f8de 	bl	8004a80 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim2);
 80018c4:	4839      	ldr	r0, [pc, #228]	; (80019ac <main+0x208>)
 80018c6:	f007 f923 	bl	8008b10 <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
	  if (iter < 200) yzad = 41;
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <main+0x20c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2bc7      	cmp	r3, #199	; 0xc7
 80018d0:	dc03      	bgt.n	80018da <main+0x136>
 80018d2:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <main+0x210>)
 80018d4:	4a38      	ldr	r2, [pc, #224]	; (80019b8 <main+0x214>)
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e002      	b.n	80018e0 <main+0x13c>
	  else yzad = 60;
 80018da:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <main+0x210>)
 80018dc:	4a37      	ldr	r2, [pc, #220]	; (80019bc <main+0x218>)
 80018de:	601a      	str	r2, [r3, #0]
	  iter++;
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <main+0x20c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a32      	ldr	r2, [pc, #200]	; (80019b0 <main+0x20c>)
 80018e8:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN 3 */
		sprintf(txt1,"Test input = %ld",input);
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <main+0x21c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4934      	ldr	r1, [pc, #208]	; (80019c4 <main+0x220>)
 80018f2:	4835      	ldr	r0, [pc, #212]	; (80019c8 <main+0x224>)
 80018f4:	f00a f8a6 	bl	800ba44 <siprintf>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80018f8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018fc:	f002 f8f8 	bl	8003af0 <BSP_LCD_SetTextColor>

//		BSP_TS_GetState(&TS_State);
		++c;
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <main+0x228>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4a31      	ldr	r2, [pc, #196]	; (80019cc <main+0x228>)
 8001908:	6013      	str	r3, [r2, #0]
		sprintf((char*)bufor, "Test %d", c);
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <main+0x228>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	492f      	ldr	r1, [pc, #188]	; (80019d0 <main+0x22c>)
 8001912:	4830      	ldr	r0, [pc, #192]	; (80019d4 <main+0x230>)
 8001914:	f00a f896 	bl	800ba44 <siprintf>
		HAL_Delay(100);
 8001918:	2064      	movs	r0, #100	; 0x64
 800191a:	f003 f8b1 	bl	8004a80 <HAL_Delay>

		BSP_LCD_DisplayStringAt( 10, 10, (uint8_t*)bufor, LEFT_MODE);
 800191e:	2303      	movs	r3, #3
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <main+0x230>)
 8001922:	210a      	movs	r1, #10
 8001924:	200a      	movs	r0, #10
 8001926:	f002 f9a1 	bl	8003c6c <BSP_LCD_DisplayStringAt>
		sprintf((char*)bufor, "U: %.2f", cur_u);
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <main+0x234>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe2a 	bl	8000588 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4928      	ldr	r1, [pc, #160]	; (80019dc <main+0x238>)
 800193a:	4826      	ldr	r0, [pc, #152]	; (80019d4 <main+0x230>)
 800193c:	f00a f882 	bl	800ba44 <siprintf>
//		HAL_Delay(100);
		BSP_LCD_DisplayStringAt( 10, 50, (uint8_t*)bufor, LEFT_MODE);
 8001940:	2303      	movs	r3, #3
 8001942:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <main+0x230>)
 8001944:	2132      	movs	r1, #50	; 0x32
 8001946:	200a      	movs	r0, #10
 8001948:	f002 f990 	bl	8003c6c <BSP_LCD_DisplayStringAt>
		sprintf((char*)bufor, "Y: %.2f", cur_y);
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <main+0x23c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe19 	bl	8000588 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4922      	ldr	r1, [pc, #136]	; (80019e4 <main+0x240>)
 800195c:	481d      	ldr	r0, [pc, #116]	; (80019d4 <main+0x230>)
 800195e:	f00a f871 	bl	800ba44 <siprintf>
//		HAL_Delay(100);
		BSP_LCD_DisplayStringAt( 10, 100, (uint8_t*)bufor, LEFT_MODE);
 8001962:	2303      	movs	r3, #3
 8001964:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <main+0x230>)
 8001966:	2164      	movs	r1, #100	; 0x64
 8001968:	200a      	movs	r0, #10
 800196a:	f002 f97f 	bl	8003c6c <BSP_LCD_DisplayStringAt>
	  if (iter < 200) yzad = 41;
 800196e:	e7ac      	b.n	80018ca <main+0x126>
 8001970:	20000818 	.word	0x20000818
 8001974:	20000eb0 	.word	0x20000eb0
 8001978:	20000a54 	.word	0x20000a54
 800197c:	20000b9c 	.word	0x20000b9c
 8001980:	20000eb8 	.word	0x20000eb8
 8001984:	20000a0c 	.word	0x20000a0c
 8001988:	20000d74 	.word	0x20000d74
 800198c:	20000df8 	.word	0x20000df8
 8001990:	20000c90 	.word	0x20000c90
 8001994:	20000cdc 	.word	0x20000cdc
 8001998:	20000d28 	.word	0x20000d28
 800199c:	200007d0 	.word	0x200007d0
 80019a0:	20010aa4 	.word	0x20010aa4
 80019a4:	20010aa0 	.word	0x20010aa0
 80019a8:	20010aa6 	.word	0x20010aa6
 80019ac:	20000c44 	.word	0x20000c44
 80019b0:	20010a70 	.word	0x20010a70
 80019b4:	20001060 	.word	0x20001060
 80019b8:	42240000 	.word	0x42240000
 80019bc:	42700000 	.word	0x42700000
 80019c0:	20010adc 	.word	0x20010adc
 80019c4:	0800dd34 	.word	0x0800dd34
 80019c8:	20010aa8 	.word	0x20010aa8
 80019cc:	2000104c 	.word	0x2000104c
 80019d0:	0800dd48 	.word	0x0800dd48
 80019d4:	20001050 	.word	0x20001050
 80019d8:	20001064 	.word	0x20001064
 80019dc:	0800dd50 	.word	0x0800dd50
 80019e0:	20001068 	.word	0x20001068
 80019e4:	0800dd58 	.word	0x0800dd58

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b094      	sub	sp, #80	; 0x50
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	2230      	movs	r2, #48	; 0x30
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00a f887 	bl	800bb0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a0c:	f005 fef0 	bl	80077f0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <SystemClock_Config+0xd8>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <SystemClock_Config+0xd8>)
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <SystemClock_Config+0xd8>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <SystemClock_Config+0xdc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a25      	ldr	r2, [pc, #148]	; (8001ac4 <SystemClock_Config+0xdc>)
 8001a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <SystemClock_Config+0xdc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a54:	2319      	movs	r3, #25
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001a58:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001a5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a62:	2302      	movs	r3, #2
 8001a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f005 ff20 	bl	80078b0 <HAL_RCC_OscConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a76:	f000 fd39 	bl	80024ec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a7a:	f005 fec9 	bl	8007810 <HAL_PWREx_EnableOverDrive>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001a84:	f000 fd32 	bl	80024ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a88:	230f      	movs	r3, #15
 8001a8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2107      	movs	r1, #7
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f006 f9a6 	bl	8007df8 <HAL_RCC_ClockConfig>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001ab2:	f000 fd1b 	bl	80024ec <Error_Handler>
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	3750      	adds	r7, #80	; 0x50
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <MX_ADC1_Init+0x9c>)
 8001ade:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001ae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ae6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <MX_ADC1_Init+0xa0>)
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b2a:	f002 ffcd 	bl	8004ac8 <HAL_ADC_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b34:	f000 fcda 	bl	80024ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b40:	2307      	movs	r3, #7
 8001b42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b4a:	f003 f90f 	bl	8004d6c <HAL_ADC_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b54:	f000 fcca 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000a0c 	.word	0x20000a0c
 8001b64:	40012000 	.word	0x40012000
 8001b68:	0f000001 	.word	0x0f000001

08001b6c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b72:	463b      	mov	r3, r7
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001b80:	4a28      	ldr	r2, [pc, #160]	; (8001c24 <MX_ADC3_Init+0xb8>)
 8001b82:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b8a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b92:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bac:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <MX_ADC3_Init+0xbc>)
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001bba:	2202      	movs	r2, #2
 8001bbc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001bcc:	4814      	ldr	r0, [pc, #80]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001bce:	f002 ff7b 	bl	8004ac8 <HAL_ADC_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001bd8:	f000 fc88 	bl	80024ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001bdc:	2306      	movs	r3, #6
 8001bde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001be0:	2301      	movs	r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001be4:	2303      	movs	r3, #3
 8001be6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001bee:	f003 f8bd 	bl	8004d6c <HAL_ADC_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001bf8:	f000 fc78 	bl	80024ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c00:	2302      	movs	r3, #2
 8001c02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_ADC3_Init+0xb4>)
 8001c0a:	f003 f8af 	bl	8004d6c <HAL_ADC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8001c14:	f000 fc6a 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000a54 	.word	0x20000a54
 8001c24:	40012200 	.word	0x40012200
 8001c28:	0f000001 	.word	0x0f000001

08001c2c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c32:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <MX_DMA2D_Init+0x60>)
 8001c34:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c60:	4809      	ldr	r0, [pc, #36]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c62:	f004 f897 	bl	8005d94 <HAL_DMA2D_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001c6c:	f000 fc3e 	bl	80024ec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c70:	2101      	movs	r1, #1
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_DMA2D_Init+0x5c>)
 8001c74:	f004 f9ec 	bl	8006050 <HAL_DMA2D_ConfigLayer>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001c7e:	f000 fc35 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000b5c 	.word	0x20000b5c
 8001c8c:	4002b000 	.word	0x4002b000

08001c90 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b09a      	sub	sp, #104	; 0x68
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001c96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c9a:	2234      	movs	r2, #52	; 0x34
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f009 ff33 	bl	800bb0a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2234      	movs	r2, #52	; 0x34
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f009 ff2d 	bl	800bb0a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001cb0:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cb2:	4a5e      	ldr	r2, [pc, #376]	; (8001e2c <MX_LTDC_Init+0x19c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001cb6:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001cc2:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001cc8:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001cce:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cd0:	2228      	movs	r2, #40	; 0x28
 8001cd2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001cd4:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cd6:	2209      	movs	r2, #9
 8001cd8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cdc:	2235      	movs	r2, #53	; 0x35
 8001cde:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001ce0:	4b51      	ldr	r3, [pc, #324]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001ce2:	220b      	movs	r2, #11
 8001ce4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001ce6:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001ce8:	f240 2215 	movw	r2, #533	; 0x215
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001cee:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cf0:	f240 121b 	movw	r2, #283	; 0x11b
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001cf8:	f240 2235 	movw	r2, #565	; 0x235
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001d00:	f240 121d 	movw	r2, #285	; 0x11d
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001d0e:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001d16:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001d1e:	4842      	ldr	r0, [pc, #264]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001d20:	f005 f9ce 	bl	80070c0 <HAL_LTDC_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001d2a:	f000 fbdf 	bl	80024ec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8001d32:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8001d3c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001d40:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d42:	2300      	movs	r3, #0
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001d46:	23ff      	movs	r3, #255	; 0xff
 8001d48:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d52:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001d54:	2305      	movs	r3, #5
 8001d56:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001d58:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001d5c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8001d5e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001d62:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001d64:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001d68:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001d7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d80:	2200      	movs	r2, #0
 8001d82:	4619      	mov	r1, r3
 8001d84:	4828      	ldr	r0, [pc, #160]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001d86:	f005 fb23 	bl	80073d0 <HAL_LTDC_ConfigLayer>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001d90:	f000 fbac 	bl	80024ec <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 480;
 8001d98:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001d9c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 272;
 8001da2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001da6:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8001dac:	23ff      	movs	r3, #255	; 0xff
 8001dae:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001db4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001db8:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001dba:	2307      	movs	r3, #7
 8001dbc:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0xC0000000+480*272*4;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <MX_LTDC_Init+0x1a0>)
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 8001dc2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 8001dc8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	2201      	movs	r2, #1
 8001de4:	4619      	mov	r1, r3
 8001de6:	4810      	ldr	r0, [pc, #64]	; (8001e28 <MX_LTDC_Init+0x198>)
 8001de8:	f005 faf2 	bl	80073d0 <HAL_LTDC_ConfigLayer>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_LTDC_Init+0x166>
  {
    Error_Handler();
 8001df2:	f000 fb7b 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  BSP_LCD_LayerDefaultInit(0, pLayerCfg.FBStartAdress);
 8001df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f001 fe38 	bl	8003a70 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, pLayerCfg1.FBStartAdress);
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	4619      	mov	r1, r3
 8001e04:	2001      	movs	r0, #1
 8001e06:	f001 fe33 	bl	8003a70 <BSP_LCD_LayerDefaultInit>
  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e10:	4808      	ldr	r0, [pc, #32]	; (8001e34 <MX_LTDC_Init+0x1a4>)
 8001e12:	f004 fbf7 	bl	8006604 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001e16:	2201      	movs	r2, #1
 8001e18:	2108      	movs	r1, #8
 8001e1a:	4807      	ldr	r0, [pc, #28]	; (8001e38 <MX_LTDC_Init+0x1a8>)
 8001e1c:	f004 fbf2 	bl	8006604 <HAL_GPIO_WritePin>
  /* USER CODE END LTDC_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	3768      	adds	r7, #104	; 0x68
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000b9c 	.word	0x20000b9c
 8001e2c:	40016800 	.word	0x40016800
 8001e30:	c007f800 	.word	0xc007f800
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40022800 	.word	0x40022800

08001e3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e64:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001e68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e72:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e84:	4813      	ldr	r0, [pc, #76]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e86:	f006 fdec 	bl	8008a62 <HAL_TIM_Base_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001e90:	f000 fb2c 	bl	80024ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e9a:	f107 0310 	add.w	r3, r7, #16
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001ea2:	f006 ffcd 	bl	8008e40 <HAL_TIM_ConfigClockSource>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001eac:	f000 fb1e 	bl	80024ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001ebe:	f007 f9e7 	bl	8009290 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ec8:	f000 fb10 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000c44 	.word	0x20000c44

08001ed8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <MX_TIM3_Init+0x98>)
 8001efa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001efe:	226b      	movs	r2, #107	; 0x6b
 8001f00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f0a:	220a      	movs	r2, #10
 8001f0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f1a:	4814      	ldr	r0, [pc, #80]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f1c:	f006 fda1 	bl	8008a62 <HAL_TIM_Base_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001f26:	f000 fae1 	bl	80024ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	4619      	mov	r1, r3
 8001f36:	480d      	ldr	r0, [pc, #52]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f38:	f006 ff82 	bl	8008e40 <HAL_TIM_ConfigClockSource>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001f42:	f000 fad3 	bl	80024ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f54:	f007 f99c 	bl	8009290 <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001f5e:	f000 fac5 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000c90 	.word	0x20000c90
 8001f70:	40000400 	.word	0x40000400

08001f74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <MX_TIM4_Init+0x94>)
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <MX_TIM4_Init+0x98>)
 8001f96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <MX_TIM4_Init+0x94>)
 8001f9a:	226b      	movs	r2, #107	; 0x6b
 8001f9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fa6:	2232      	movs	r2, #50	; 0x32
 8001fa8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fb6:	4814      	ldr	r0, [pc, #80]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fb8:	f006 fd53 	bl	8008a62 <HAL_TIM_Base_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001fc2:	f000 fa93 	bl	80024ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fd4:	f006 ff34 	bl	8008e40 <HAL_TIM_ConfigClockSource>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001fde:	f000 fa85 	bl	80024ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <MX_TIM4_Init+0x94>)
 8001ff0:	f007 f94e 	bl	8009290 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001ffa:	f000 fa77 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000cdc 	.word	0x20000cdc
 800200c:	40000800 	.word	0x40000800

08002010 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <MX_TIM5_Init+0x98>)
 8002030:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <MX_TIM5_Init+0x9c>)
 8002032:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10800-1;
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <MX_TIM5_Init+0x98>)
 8002036:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800203a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <MX_TIM5_Init+0x98>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <MX_TIM5_Init+0x98>)
 8002044:	f242 7210 	movw	r2, #10000	; 0x2710
 8002048:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <MX_TIM5_Init+0x98>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <MX_TIM5_Init+0x98>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002056:	4814      	ldr	r0, [pc, #80]	; (80020a8 <MX_TIM5_Init+0x98>)
 8002058:	f006 fd03 	bl	8008a62 <HAL_TIM_Base_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002062:	f000 fa43 	bl	80024ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4619      	mov	r1, r3
 8002072:	480d      	ldr	r0, [pc, #52]	; (80020a8 <MX_TIM5_Init+0x98>)
 8002074:	f006 fee4 	bl	8008e40 <HAL_TIM_ConfigClockSource>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800207e:	f000 fa35 	bl	80024ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4806      	ldr	r0, [pc, #24]	; (80020a8 <MX_TIM5_Init+0x98>)
 8002090:	f007 f8fe 	bl	8009290 <HAL_TIMEx_MasterConfigSynchronization>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800209a:	f000 fa27 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000d28 	.word	0x20000d28
 80020ac:	40000c00 	.word	0x40000c00

080020b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020b6:	4a15      	ldr	r2, [pc, #84]	; (800210c <MX_USART1_UART_Init+0x5c>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_USART1_UART_Init+0x58>)
 80020f4:	f007 f978 	bl	80093e8 <HAL_UART_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80020fe:	f000 f9f5 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000d74 	.word	0x20000d74
 800210c:	40011000 	.word	0x40011000

08002110 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <MX_USART6_UART_Init+0x5c>)
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <MX_USART6_UART_Init+0x60>)
 8002118:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <MX_USART6_UART_Init+0x5c>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <MX_USART6_UART_Init+0x5c>)
 8002124:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002128:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <MX_USART6_UART_Init+0x5c>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <MX_USART6_UART_Init+0x5c>)
 8002132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002136:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_USART6_UART_Init+0x5c>)
 800213a:	220c      	movs	r2, #12
 800213c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <MX_USART6_UART_Init+0x5c>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_USART6_UART_Init+0x5c>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <MX_USART6_UART_Init+0x5c>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_USART6_UART_Init+0x5c>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_USART6_UART_Init+0x5c>)
 8002158:	f007 f946 	bl	80093e8 <HAL_UART_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_USART6_UART_Init+0x56>
  {
    Error_Handler();
 8002162:	f000 f9c3 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000df8 	.word	0x20000df8
 8002170:	40011400 	.word	0x40011400

08002174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_DMA_Init+0x38>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <MX_DMA_Init+0x38>)
 8002180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_DMA_Init+0x38>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2101      	movs	r1, #1
 8002196:	2038      	movs	r0, #56	; 0x38
 8002198:	f003 f9ad 	bl	80054f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800219c:	2038      	movs	r0, #56	; 0x38
 800219e:	f003 f9c6 	bl	800552e <HAL_NVIC_EnableIRQ>

}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800

080021b0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */
  FMC_SDRAM_CommandTypeDef Command;

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
 80021c4:	615a      	str	r2, [r3, #20]
 80021c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80021c8:	4b48      	ldr	r3, [pc, #288]	; (80022ec <MX_FMC_Init+0x13c>)
 80021ca:	4a49      	ldr	r2, [pc, #292]	; (80022f0 <MX_FMC_Init+0x140>)
 80021cc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <MX_FMC_Init+0x13c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80021d4:	4b45      	ldr	r3, [pc, #276]	; (80022ec <MX_FMC_Init+0x13c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80021da:	4b44      	ldr	r3, [pc, #272]	; (80022ec <MX_FMC_Init+0x13c>)
 80021dc:	2204      	movs	r2, #4
 80021de:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <MX_FMC_Init+0x13c>)
 80021e2:	2210      	movs	r2, #16
 80021e4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <MX_FMC_Init+0x13c>)
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80021ec:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <MX_FMC_Init+0x13c>)
 80021ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021f4:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <MX_FMC_Init+0x13c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <MX_FMC_Init+0x13c>)
 80021fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002200:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002202:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <MX_FMC_Init+0x13c>)
 8002204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800220a:	4b38      	ldr	r3, [pc, #224]	; (80022ec <MX_FMC_Init+0x13c>)
 800220c:	2200      	movs	r2, #0
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002210:	2302      	movs	r3, #2
 8002212:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002214:	2306      	movs	r3, #6
 8002216:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002218:	2304      	movs	r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800221c:	2306      	movs	r3, #6
 800221e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8002220:	2302      	movs	r3, #2
 8002222:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002228:	2302      	movs	r3, #2
 800222a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	4619      	mov	r1, r3
 8002230:	482e      	ldr	r0, [pc, #184]	; (80022ec <MX_FMC_Init+0x13c>)
 8002232:	f006 fbb7 	bl	80089a4 <HAL_SDRAM_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800223c:	f000 f956 	bl	80024ec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd =0;
 8002240:	2300      	movs	r3, #0
 8002242:	603b      	str	r3, [r7, #0]
  /* Step 3:  Configure a clock configuration enable command */
  Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8002244:	2301      	movs	r3, #1
 8002246:	623b      	str	r3, [r7, #32]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002248:	2310      	movs	r3, #16
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  Command.AutoRefreshNumber = 1;
 800224c:	2301      	movs	r3, #1
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  Command.ModeRegisterDefinition = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002254:	f107 0320 	add.w	r3, r7, #32
 8002258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800225c:	4619      	mov	r1, r3
 800225e:	4823      	ldr	r0, [pc, #140]	; (80022ec <MX_FMC_Init+0x13c>)
 8002260:	f006 fbd4 	bl	8008a0c <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002264:	2001      	movs	r0, #1
 8002266:	f002 fc0b 	bl	8004a80 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800226a:	2302      	movs	r3, #2
 800226c:	623b      	str	r3, [r7, #32]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800226e:	2310      	movs	r3, #16
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  Command.AutoRefreshNumber = 1;
 8002272:	2301      	movs	r3, #1
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  Command.ModeRegisterDefinition = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002282:	4619      	mov	r1, r3
 8002284:	4819      	ldr	r0, [pc, #100]	; (80022ec <MX_FMC_Init+0x13c>)
 8002286:	f006 fbc1 	bl	8008a0c <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800228a:	2303      	movs	r3, #3
 800228c:	623b      	str	r3, [r7, #32]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800228e:	2310      	movs	r3, #16
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  Command.AutoRefreshNumber = 8;
 8002292:	2308      	movs	r3, #8
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  Command.ModeRegisterDefinition = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800229a:	f107 0320 	add.w	r3, r7, #32
 800229e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a2:	4619      	mov	r1, r3
 80022a4:	4811      	ldr	r0, [pc, #68]	; (80022ec <MX_FMC_Init+0x13c>)
 80022a6:	f006 fbb1 	bl	8008a0c <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80022aa:	f44f 7308 	mov.w	r3, #544	; 0x220
 80022ae:	603b      	str	r3, [r7, #0]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80022b0:	2304      	movs	r3, #4
 80022b2:	623b      	str	r3, [r7, #32]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80022b4:	2310      	movs	r3, #16
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  Command.AutoRefreshNumber = 1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
  Command.ModeRegisterDefinition = tmpmrd;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80022c0:	f107 0320 	add.w	r3, r7, #32
 80022c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c8:	4619      	mov	r1, r3
 80022ca:	4808      	ldr	r0, [pc, #32]	; (80022ec <MX_FMC_Init+0x13c>)
 80022cc:	f006 fb9e 	bl	8008a0c <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram1.Instance->SDRTR |= ((uint32_t)((1292)<< 1));
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_FMC_Init+0x13c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6959      	ldr	r1, [r3, #20]
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <MX_FMC_Init+0x13c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f640 2318 	movw	r3, #2584	; 0xa18
 80022de:	430b      	orrs	r3, r1
 80022e0:	6153      	str	r3, [r2, #20]

  /* USER CODE END FMC_Init 2 */
}
 80022e2:	bf00      	nop
 80022e4:	3730      	adds	r7, #48	; 0x30
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000e7c 	.word	0x20000e7c
 80022f0:	a0000140 	.word	0xa0000140

080022f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b090      	sub	sp, #64	; 0x40
 80022f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800230a:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a71      	ldr	r2, [pc, #452]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002310:	f043 0310 	orr.w	r3, r3, #16
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002322:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a6b      	ldr	r2, [pc, #428]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b69      	ldr	r3, [pc, #420]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002352:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a5f      	ldr	r2, [pc, #380]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800236a:	4b5a      	ldr	r3, [pc, #360]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a59      	ldr	r2, [pc, #356]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002382:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a53      	ldr	r2, [pc, #332]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b51      	ldr	r3, [pc, #324]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800239a:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a4d      	ldr	r2, [pc, #308]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023b2:	4b48      	ldr	r3, [pc, #288]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a47      	ldr	r2, [pc, #284]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023ca:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a41      	ldr	r2, [pc, #260]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fa:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b33      	ldr	r3, [pc, #204]	; (80024d4 <MX_GPIO_Init+0x1e0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	2108      	movs	r1, #8
 8002416:	4830      	ldr	r0, [pc, #192]	; (80024d8 <MX_GPIO_Init+0x1e4>)
 8002418:	f004 f8f4 	bl	8006604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002422:	482e      	ldr	r0, [pc, #184]	; (80024dc <MX_GPIO_Init+0x1e8>)
 8002424:	f004 f8ee 	bl	8006604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002428:	2308      	movs	r3, #8
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242c:	2301      	movs	r3, #1
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243c:	4619      	mov	r1, r3
 800243e:	4826      	ldr	r0, [pc, #152]	; (80024d8 <MX_GPIO_Init+0x1e4>)
 8002440:	f003 ff34 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245a:	4619      	mov	r1, r3
 800245c:	481f      	ldr	r0, [pc, #124]	; (80024dc <MX_GPIO_Init+0x1e8>)
 800245e:	f003 ff25 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <MX_GPIO_Init+0x1ec>)
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002474:	4619      	mov	r1, r3
 8002476:	4819      	ldr	r0, [pc, #100]	; (80024dc <MX_GPIO_Init+0x1e8>)
 8002478:	f003 ff18 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800247c:	2340      	movs	r3, #64	; 0x40
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <MX_GPIO_Init+0x1ec>)
 8002482:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248c:	4619      	mov	r1, r3
 800248e:	4815      	ldr	r0, [pc, #84]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002490:	f003 ff0c 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a4:	4619      	mov	r1, r3
 80024a6:	4810      	ldr	r0, [pc, #64]	; (80024e8 <MX_GPIO_Init+0x1f4>)
 80024a8:	f003 ff00 	bl	80062ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2103      	movs	r1, #3
 80024b0:	2017      	movs	r0, #23
 80024b2:	f003 f820 	bl	80054f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024b6:	2017      	movs	r0, #23
 80024b8:	f003 f839 	bl	800552e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2100      	movs	r1, #0
 80024c0:	2028      	movs	r0, #40	; 0x28
 80024c2:	f003 f818 	bl	80054f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024c6:	2028      	movs	r0, #40	; 0x28
 80024c8:	f003 f831 	bl	800552e <HAL_NVIC_EnableIRQ>

}
 80024cc:	bf00      	nop
 80024ce:	3740      	adds	r7, #64	; 0x40
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40022800 	.word	0x40022800
 80024dc:	40022000 	.word	0x40022000
 80024e0:	10110000 	.word	0x10110000
 80024e4:	40021800 	.word	0x40021800
 80024e8:	40021400 	.word	0x40021400

080024ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_MspInit+0x44>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_MspInit+0x44>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_MspInit+0x44>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_MspInit+0x44>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_MspInit+0x44>)
 8002520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_MspInit+0x44>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a5b      	ldr	r2, [pc, #364]	; (80026d0 <HAL_ADC_MspInit+0x18c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d154      	bne.n	8002610 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002566:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	4a5a      	ldr	r2, [pc, #360]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6453      	str	r3, [r2, #68]	; 0x44
 8002572:	4b58      	ldr	r3, [pc, #352]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b55      	ldr	r3, [pc, #340]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a54      	ldr	r2, [pc, #336]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002596:	2301      	movs	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800259a:	2303      	movs	r3, #3
 800259c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	484b      	ldr	r0, [pc, #300]	; (80026d8 <HAL_ADC_MspInit+0x194>)
 80025aa:	f003 fe7f 	bl	80062ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025ae:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025b0:	4a4b      	ldr	r2, [pc, #300]	; (80026e0 <HAL_ADC_MspInit+0x19c>)
 80025b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025b4:	4b49      	ldr	r3, [pc, #292]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ba:	4b48      	ldr	r3, [pc, #288]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c0:	4b46      	ldr	r3, [pc, #280]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025c6:	4b45      	ldr	r3, [pc, #276]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025ce:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025de:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ec:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025f2:	483a      	ldr	r0, [pc, #232]	; (80026dc <HAL_ADC_MspInit+0x198>)
 80025f4:	f002 ffc4 	bl	8005580 <HAL_DMA_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80025fe:	f7ff ff75 	bl	80024ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a35      	ldr	r2, [pc, #212]	; (80026dc <HAL_ADC_MspInit+0x198>)
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
 8002608:	4a34      	ldr	r2, [pc, #208]	; (80026dc <HAL_ADC_MspInit+0x198>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800260e:	e05a      	b.n	80026c6 <HAL_ADC_MspInit+0x182>
  else if(hadc->Instance==ADC3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <HAL_ADC_MspInit+0x1a0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d155      	bne.n	80026c6 <HAL_ADC_MspInit+0x182>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800261a:	4b2e      	ldr	r3, [pc, #184]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a2d      	ldr	r2, [pc, #180]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 8002620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002632:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 8002638:	f043 0320 	orr.w	r3, r3, #32
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <HAL_ADC_MspInit+0x190>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800264a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800264e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002650:	2303      	movs	r3, #3
 8002652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	4619      	mov	r1, r3
 800265e:	4822      	ldr	r0, [pc, #136]	; (80026e8 <HAL_ADC_MspInit+0x1a4>)
 8002660:	f003 fe24 	bl	80062ac <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <HAL_ADC_MspInit+0x1ac>)
 8002668:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 800266c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002670:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 8002680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002684:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 8002688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800268c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 8002690:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002694:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 8002698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80026aa:	4810      	ldr	r0, [pc, #64]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 80026ac:	f002 ff68 	bl	8005580 <HAL_DMA_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_ADC_MspInit+0x176>
      Error_Handler();
 80026b6:	f7ff ff19 	bl	80024ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 80026be:	639a      	str	r2, [r3, #56]	; 0x38
 80026c0:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <HAL_ADC_MspInit+0x1a8>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026c6:	bf00      	nop
 80026c8:	3730      	adds	r7, #48	; 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40012000 	.word	0x40012000
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	20000a9c 	.word	0x20000a9c
 80026e0:	40026410 	.word	0x40026410
 80026e4:	40012200 	.word	0x40012200
 80026e8:	40021400 	.word	0x40021400
 80026ec:	20000afc 	.word	0x20000afc
 80026f0:	40026428 	.word	0x40026428

080026f4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <HAL_DMA2D_MspInit+0x38>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10b      	bne.n	800271e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_DMA2D_MspInit+0x3c>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a09      	ldr	r2, [pc, #36]	; (8002730 <HAL_DMA2D_MspInit+0x3c>)
 800270c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <HAL_DMA2D_MspInit+0x3c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	4002b000 	.word	0x4002b000
 8002730:	40023800 	.word	0x40023800

08002734 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0b2      	sub	sp, #200	; 0xc8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002750:	2284      	movs	r2, #132	; 0x84
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f009 f9d8 	bl	800bb0a <memset>
  if(hltdc->Instance==LTDC)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4abc      	ldr	r2, [pc, #752]	; (8002a50 <HAL_LTDC_MspInit+0x31c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	f040 8170 	bne.w	8002a46 <HAL_LTDC_MspInit+0x312>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002766:	2308      	movs	r3, #8
 8002768:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800276a:	23c0      	movs	r3, #192	; 0xc0
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800276e:	2305      	movs	r3, #5
 8002770:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002772:	2302      	movs	r3, #2
 8002774:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002776:	2300      	movs	r3, #0
 8002778:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800277e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002782:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002788:	4618      	mov	r0, r3
 800278a:	f005 fd1b 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8002794:	f7ff feaa 	bl	80024ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002798:	4bae      	ldr	r3, [pc, #696]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	4aad      	ldr	r2, [pc, #692]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 800279e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027a2:	6453      	str	r3, [r2, #68]	; 0x44
 80027a4:	4bab      	ldr	r3, [pc, #684]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027b0:	4ba8      	ldr	r3, [pc, #672]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	4aa7      	ldr	r2, [pc, #668]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027b6:	f043 0310 	orr.w	r3, r3, #16
 80027ba:	6313      	str	r3, [r2, #48]	; 0x30
 80027bc:	4ba5      	ldr	r3, [pc, #660]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027c8:	4ba2      	ldr	r3, [pc, #648]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4aa1      	ldr	r2, [pc, #644]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d2:	6313      	str	r3, [r2, #48]	; 0x30
 80027d4:	4b9f      	ldr	r3, [pc, #636]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80027e0:	4b9c      	ldr	r3, [pc, #624]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	4a9b      	ldr	r2, [pc, #620]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ea:	6313      	str	r3, [r2, #48]	; 0x30
 80027ec:	4b99      	ldr	r3, [pc, #612]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f8:	4b96      	ldr	r3, [pc, #600]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	4a95      	ldr	r2, [pc, #596]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6313      	str	r3, [r2, #48]	; 0x30
 8002804:	4b93      	ldr	r3, [pc, #588]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002810:	4b90      	ldr	r3, [pc, #576]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a8f      	ldr	r2, [pc, #572]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6313      	str	r3, [r2, #48]	; 0x30
 800281c:	4b8d      	ldr	r3, [pc, #564]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002828:	4b8a      	ldr	r3, [pc, #552]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4a89      	ldr	r2, [pc, #548]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 800282e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002832:	6313      	str	r3, [r2, #48]	; 0x30
 8002834:	4b87      	ldr	r3, [pc, #540]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002840:	4b84      	ldr	r3, [pc, #528]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	4a83      	ldr	r2, [pc, #524]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 8002846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284a:	6313      	str	r3, [r2, #48]	; 0x30
 800284c:	4b81      	ldr	r3, [pc, #516]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002858:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a7d      	ldr	r2, [pc, #500]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b7b      	ldr	r3, [pc, #492]	; (8002a54 <HAL_LTDC_MspInit+0x320>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PJ3     ------> LTDC_R4
    PA2     ------> LTDC_R1
    PJ2     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002870:	2370      	movs	r3, #112	; 0x70
 8002872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002888:	230e      	movs	r3, #14
 800288a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800288e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002892:	4619      	mov	r1, r3
 8002894:	4870      	ldr	r0, [pc, #448]	; (8002a58 <HAL_LTDC_MspInit+0x324>)
 8002896:	f003 fd09 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800289a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028b4:	230e      	movs	r3, #14
 80028b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028be:	4619      	mov	r1, r3
 80028c0:	4866      	ldr	r0, [pc, #408]	; (8002a5c <HAL_LTDC_MspInit+0x328>)
 80028c2:	f003 fcf3 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028e0:	230e      	movs	r3, #14
 80028e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80028e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028ea:	4619      	mov	r1, r3
 80028ec:	485c      	ldr	r0, [pc, #368]	; (8002a60 <HAL_LTDC_MspInit+0x32c>)
 80028ee:	f003 fcdd 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028f2:	2340      	movs	r3, #64	; 0x40
 80028f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800290a:	230e      	movs	r3, #14
 800290c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002910:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002914:	4619      	mov	r1, r3
 8002916:	4853      	ldr	r0, [pc, #332]	; (8002a64 <HAL_LTDC_MspInit+0x330>)
 8002918:	f003 fcc8 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800291c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002936:	230e      	movs	r3, #14
 8002938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002940:	4619      	mov	r1, r3
 8002942:	4849      	ldr	r0, [pc, #292]	; (8002a68 <HAL_LTDC_MspInit+0x334>)
 8002944:	f003 fcb2 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8002948:	23f7      	movs	r3, #247	; 0xf7
 800294a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800295a:	2302      	movs	r3, #2
 800295c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002960:	230e      	movs	r3, #14
 8002962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002966:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800296a:	4619      	mov	r1, r3
 800296c:	483f      	ldr	r0, [pc, #252]	; (8002a6c <HAL_LTDC_MspInit+0x338>)
 800296e:	f003 fc9d 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002976:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002986:	2302      	movs	r3, #2
 8002988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800298c:	2309      	movs	r3, #9
 800298e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002992:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002996:	4619      	mov	r1, r3
 8002998:	4830      	ldr	r0, [pc, #192]	; (8002a5c <HAL_LTDC_MspInit+0x328>)
 800299a:	f003 fc87 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_14;
 800299e:	f44f 438c 	mov.w	r3, #17920	; 0x4600
 80029a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b2:	2302      	movs	r3, #2
 80029b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029b8:	230e      	movs	r3, #14
 80029ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029c2:	4619      	mov	r1, r3
 80029c4:	482a      	ldr	r0, [pc, #168]	; (8002a70 <HAL_LTDC_MspInit+0x33c>)
 80029c6:	f003 fc71 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80029ca:	f648 637c 	movw	r3, #36476	; 0x8e7c
 80029ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029de:	2302      	movs	r3, #2
 80029e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029e4:	230e      	movs	r3, #14
 80029e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80029ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029ee:	4619      	mov	r1, r3
 80029f0:	481b      	ldr	r0, [pc, #108]	; (8002a60 <HAL_LTDC_MspInit+0x32c>)
 80029f2:	f003 fc5b 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029f6:	2304      	movs	r3, #4
 80029f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a0e:	230e      	movs	r3, #14
 8002a10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4816      	ldr	r0, [pc, #88]	; (8002a74 <HAL_LTDC_MspInit+0x340>)
 8002a1c:	f003 fc46 	bl	80062ac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2103      	movs	r1, #3
 8002a24:	2058      	movs	r0, #88	; 0x58
 8002a26:	f002 fd66 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002a2a:	2058      	movs	r0, #88	; 0x58
 8002a2c:	f002 fd7f 	bl	800552e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002a30:	2201      	movs	r2, #1
 8002a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a36:	480e      	ldr	r0, [pc, #56]	; (8002a70 <HAL_LTDC_MspInit+0x33c>)
 8002a38:	f003 fde4 	bl	8006604 <HAL_GPIO_WritePin>

    /* Assert backlight LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	2108      	movs	r1, #8
 8002a40:	480a      	ldr	r0, [pc, #40]	; (8002a6c <HAL_LTDC_MspInit+0x338>)
 8002a42:	f003 fddf 	bl	8006604 <HAL_GPIO_WritePin>

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002a46:	bf00      	nop
 8002a48:	37c8      	adds	r7, #200	; 0xc8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40016800 	.word	0x40016800
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40022400 	.word	0x40022400
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40022800 	.word	0x40022800
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40020000 	.word	0x40020000

08002a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a88:	d114      	bne.n	8002ab4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a8a:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a32      	ldr	r2, [pc, #200]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	201c      	movs	r0, #28
 8002aa8:	f002 fd25 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aac:	201c      	movs	r0, #28
 8002aae:	f002 fd3e 	bl	800552e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ab2:	e04c      	b.n	8002b4e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_TIM_Base_MspInit+0xe4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d114      	bne.n	8002ae8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002abe:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a25      	ldr	r2, [pc, #148]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	201d      	movs	r0, #29
 8002adc:	f002 fd0b 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ae0:	201d      	movs	r0, #29
 8002ae2:	f002 fd24 	bl	800552e <HAL_NVIC_EnableIRQ>
}
 8002ae6:	e032      	b.n	8002b4e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_TIM_Base_MspInit+0xe8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d114      	bne.n	8002b1c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	201e      	movs	r0, #30
 8002b10:	f002 fcf1 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b14:	201e      	movs	r0, #30
 8002b16:	f002 fd0a 	bl	800552e <HAL_NVIC_EnableIRQ>
}
 8002b1a:	e018      	b.n	8002b4e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_TIM_Base_MspInit+0xec>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d113      	bne.n	8002b4e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002b2c:	f043 0308 	orr.w	r3, r3, #8
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2103      	movs	r1, #3
 8002b42:	2032      	movs	r0, #50	; 0x32
 8002b44:	f002 fcd7 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b48:	2032      	movs	r0, #50	; 0x32
 8002b4a:	f002 fcf0 	bl	800552e <HAL_NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00

08002b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0ae      	sub	sp, #184	; 0xb8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b80:	f107 0320 	add.w	r3, r7, #32
 8002b84:	2284      	movs	r2, #132	; 0x84
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f008 ffbe 	bl	800bb0a <memset>
  if(huart->Instance==USART1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5b      	ldr	r2, [pc, #364]	; (8002d00 <HAL_UART_MspInit+0x198>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d165      	bne.n	8002c64 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b98:	2340      	movs	r3, #64	; 0x40
 8002b9a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba0:	f107 0320 	add.w	r3, r7, #32
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f005 fb0d 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bb0:	f7ff fc9c 	bl	80024ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002bba:	f043 0310 	orr.w	r3, r3, #16
 8002bbe:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002bd2:	f043 0302 	orr.w	r3, r3, #2
 8002bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be4:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	4a46      	ldr	r2, [pc, #280]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf0:	4b44      	ldr	r3, [pc, #272]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c14:	2307      	movs	r3, #7
 8002c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4839      	ldr	r0, [pc, #228]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c22:	f003 fb43 	bl	80062ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c40:	2307      	movs	r3, #7
 8002c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	482f      	ldr	r0, [pc, #188]	; (8002d0c <HAL_UART_MspInit+0x1a4>)
 8002c4e:	f003 fb2d 	bl	80062ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2103      	movs	r1, #3
 8002c56:	2025      	movs	r0, #37	; 0x25
 8002c58:	f002 fc4d 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c5c:	2025      	movs	r0, #37	; 0x25
 8002c5e:	f002 fc66 	bl	800552e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c62:	e048      	b.n	8002cf6 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART6)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a29      	ldr	r2, [pc, #164]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d143      	bne.n	8002cf6 <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c72:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002c74:	2300      	movs	r3, #0
 8002c76:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c78:	f107 0320 	add.w	r3, r7, #32
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f005 faa1 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_MspInit+0x124>
      Error_Handler();
 8002c88:	f7ff fc30 	bl	80024ec <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002c92:	f043 0320 	orr.w	r3, r3, #32
 8002c96:	6453      	str	r3, [r2, #68]	; 0x44
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002cbc:	23c0      	movs	r3, #192	; 0xc0
 8002cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cde:	4619      	mov	r1, r3
 8002ce0:	480c      	ldr	r0, [pc, #48]	; (8002d14 <HAL_UART_MspInit+0x1ac>)
 8002ce2:	f003 fae3 	bl	80062ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2047      	movs	r0, #71	; 0x47
 8002cec:	f002 fc03 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002cf0:	2047      	movs	r0, #71	; 0x47
 8002cf2:	f002 fc1c 	bl	800552e <HAL_NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	37b8      	adds	r7, #184	; 0xb8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40011400 	.word	0x40011400
 8002d14:	40020800 	.word	0x40020800

08002d18 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002d2c:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <HAL_FMC_MspInit+0x120>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d17c      	bne.n	8002e2e <HAL_FMC_MspInit+0x116>
    return;
  }
  FMC_Initialized = 1;
 8002d34:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <HAL_FMC_MspInit+0x120>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d3a:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <HAL_FMC_MspInit+0x124>)
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4a3f      	ldr	r2, [pc, #252]	; (8002e3c <HAL_FMC_MspInit+0x124>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6393      	str	r3, [r2, #56]	; 0x38
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <HAL_FMC_MspInit+0x124>)
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002d52:	2303      	movs	r3, #3
 8002d54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d62:	230c      	movs	r3, #12
 8002d64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4835      	ldr	r0, [pc, #212]	; (8002e40 <HAL_FMC_MspInit+0x128>)
 8002d6c:	f003 fa9e 	bl	80062ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8002d70:	f248 1333 	movw	r3, #33075	; 0x8133
 8002d74:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d82:	230c      	movs	r3, #12
 8002d84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	482e      	ldr	r0, [pc, #184]	; (8002e44 <HAL_FMC_MspInit+0x12c>)
 8002d8c:	f003 fa8e 	bl	80062ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8002d90:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d94:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002da2:	230c      	movs	r3, #12
 8002da4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	4619      	mov	r1, r3
 8002daa:	4827      	ldr	r0, [pc, #156]	; (8002e48 <HAL_FMC_MspInit+0x130>)
 8002dac:	f003 fa7e 	bl	80062ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002db0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002db4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4820      	ldr	r0, [pc, #128]	; (8002e4c <HAL_FMC_MspInit+0x134>)
 8002dcc:	f003 fa6e 	bl	80062ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8002dd0:	2328      	movs	r3, #40	; 0x28
 8002dd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002de0:	230c      	movs	r3, #12
 8002de2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4819      	ldr	r0, [pc, #100]	; (8002e50 <HAL_FMC_MspInit+0x138>)
 8002dea:	f003 fa5f 	bl	80062ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dee:	2308      	movs	r3, #8
 8002df0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df6:	2301      	movs	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dfe:	230c      	movs	r3, #12
 8002e00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4813      	ldr	r0, [pc, #76]	; (8002e54 <HAL_FMC_MspInit+0x13c>)
 8002e08:	f003 fa50 	bl	80062ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 8002e0c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002e10:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e16:	2301      	movs	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e1e:	230c      	movs	r3, #12
 8002e20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4806      	ldr	r0, [pc, #24]	; (8002e40 <HAL_FMC_MspInit+0x128>)
 8002e28:	f003 fa40 	bl	80062ac <HAL_GPIO_Init>
 8002e2c:	e000      	b.n	8002e30 <HAL_FMC_MspInit+0x118>
    return;
 8002e2e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20010bc4 	.word	0x20010bc4
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40021800 	.word	0x40021800
 8002e48:	40020c00 	.word	0x40020c00
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021c00 	.word	0x40021c00
 8002e54:	40020800 	.word	0x40020800

08002e58 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002e60:	f7ff ff5a 	bl	8002d18 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <HardFault_Handler+0x4>

08002e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <MemManage_Handler+0x4>

08002e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <BusFault_Handler+0x4>

08002e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <UsageFault_Handler+0x4>

08002e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec0:	f001 fdbe 	bl	8004a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002ecc:	2040      	movs	r0, #64	; 0x40
 8002ece:	f003 fbb3 	bl	8006638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <TIM2_IRQHandler+0x10>)
 8002ede:	f005 fe8f 	bl	8008c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000c44 	.word	0x20000c44

08002eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <TIM3_IRQHandler+0x10>)
 8002ef2:	f005 fe85 	bl	8008c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000c90 	.word	0x20000c90

08002f00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <TIM4_IRQHandler+0x10>)
 8002f06:	f005 fe7b 	bl	8008c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000cdc 	.word	0x20000cdc

08002f14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <USART1_IRQHandler+0x10>)
 8002f1a:	f006 fb4d 	bl	80095b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000d74 	.word	0x20000d74

08002f28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002f2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f30:	f003 fb82 	bl	8006638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <TIM5_IRQHandler+0x10>)
 8002f3e:	f005 fe5f 	bl	8008c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000d28 	.word	0x20000d28

08002f4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <DMA2_Stream0_IRQHandler+0x10>)
 8002f52:	f002 fcb5 	bl	80058c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000a9c 	.word	0x20000a9c

08002f60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <USART6_IRQHandler+0x10>)
 8002f66:	f006 fb27 	bl	80095b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000df8 	.word	0x20000df8

08002f74 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002f78:	4802      	ldr	r0, [pc, #8]	; (8002f84 <LTDC_IRQHandler+0x10>)
 8002f7a:	f004 f971 	bl	8007260 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000b9c 	.word	0x20000b9c

08002f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
	return 1;
 8002f8c:	2301      	movs	r3, #1
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <_kill>:

int _kill(int pid, int sig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fa2:	f008 fe05 	bl	800bbb0 <__errno>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2216      	movs	r2, #22
 8002faa:	601a      	str	r2, [r3, #0]
	return -1;
 8002fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_exit>:

void _exit (int status)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ffe7 	bl	8002f98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fca:	e7fe      	b.n	8002fca <_exit+0x12>

08002fcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e00a      	b.n	8002ff4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fde:	f3af 8000 	nop.w
 8002fe2:	4601      	mov	r1, r0
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	60ba      	str	r2, [r7, #8]
 8002fea:	b2ca      	uxtb	r2, r1
 8002fec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	dbf0      	blt.n	8002fde <_read+0x12>
	}

return len;
 8002ffc:	687b      	ldr	r3, [r7, #4]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	e009      	b.n	800302c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	60ba      	str	r2, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3301      	adds	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	dbf1      	blt.n	8003018 <_write+0x12>
	}
	return len;
 8003034:	687b      	ldr	r3, [r7, #4]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <_close>:

int _close(int file)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
	return -1;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003066:	605a      	str	r2, [r3, #4]
	return 0;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <_isatty>:

int _isatty(int file)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
	return 1;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
	return 0;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <_sbrk+0x5c>)
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <_sbrk+0x60>)
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030bc:	4b13      	ldr	r3, [pc, #76]	; (800310c <_sbrk+0x64>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <_sbrk+0x64>)
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <_sbrk+0x68>)
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <_sbrk+0x64>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d207      	bcs.n	80030e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030d8:	f008 fd6a 	bl	800bbb0 <__errno>
 80030dc:	4603      	mov	r3, r0
 80030de:	220c      	movs	r2, #12
 80030e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295
 80030e6:	e009      	b.n	80030fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <_sbrk+0x64>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	4a05      	ldr	r2, [pc, #20]	; (800310c <_sbrk+0x64>)
 80030f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030fa:	68fb      	ldr	r3, [r7, #12]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20050000 	.word	0x20050000
 8003108:	00000400 	.word	0x00000400
 800310c:	20010bc8 	.word	0x20010bc8
 8003110:	20011220 	.word	0x20011220

08003114 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <SystemInit+0x28>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <SystemInit+0x28>)
 8003120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <SystemInit+0x28>)
 800312a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800312e:	609a      	str	r2, [r3, #8]
#endif
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003178 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003144:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003146:	e003      	b.n	8003150 <LoopCopyDataInit>

08003148 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800314a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800314c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800314e:	3104      	adds	r1, #4

08003150 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003150:	480b      	ldr	r0, [pc, #44]	; (8003180 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003154:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003156:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003158:	d3f6      	bcc.n	8003148 <CopyDataInit>
  ldr  r2, =_sbss
 800315a:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800315c:	e002      	b.n	8003164 <LoopFillZerobss>

0800315e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800315e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003160:	f842 3b04 	str.w	r3, [r2], #4

08003164 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003166:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003168:	d3f9      	bcc.n	800315e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800316a:	f7ff ffd3 	bl	8003114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800316e:	f008 fd25 	bl	800bbbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003172:	f7fe fb17 	bl	80017a4 <main>
  bx  lr    
 8003176:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003178:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800317c:	08010c94 	.word	0x08010c94
  ldr  r0, =_sdata
 8003180:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003184:	200009f0 	.word	0x200009f0
  ldr  r2, =_sbss
 8003188:	200009f0 	.word	0x200009f0
  ldr  r3, = _ebss
 800318c:	20011220 	.word	0x20011220

08003190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003190:	e7fe      	b.n	8003190 <ADC_IRQHandler>

08003192 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800319c:	20c8      	movs	r0, #200	; 0xc8
 800319e:	f000 fc33 	bl	8003a08 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80031a2:	f000 fa7b 	bl	800369c <ft5336_I2C_InitializeIfRequired>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80031d6:	2300      	movs	r3, #0
 80031d8:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80031da:	f000 fa5f 	bl	800369c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	e010      	b.n	8003206 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	21a8      	movs	r1, #168	; 0xa8
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fbee 	bl	80039cc <TS_IO_Read>
 80031f0:	4603      	mov	r3, r0
 80031f2:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80031f4:	7b7b      	ldrb	r3, [r7, #13]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b51      	cmp	r3, #81	; 0x51
 80031fa:	d101      	bne.n	8003200 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	3301      	adds	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d802      	bhi.n	8003212 <ft5336_ReadID+0x4e>
 800320c:	7bbb      	ldrb	r3, [r7, #14]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0e8      	beq.n	80031e4 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8003212:	7b7b      	ldrb	r3, [r7, #13]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	b29b      	uxth	r3, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa45 	bl	80036bc <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f933 	bl	80034a0 <ft5336_TS_DisableIT>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2102      	movs	r1, #2
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fbb7 	bl	80039cc <TS_IO_Read>
 800325e:	4603      	mov	r3, r0
 8003260:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	b2db      	uxtb	r3, r3
 800326c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b05      	cmp	r3, #5
 8003274:	d901      	bls.n	800327a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <ft5336_TS_DetectTouch+0x50>)
 8003280:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <ft5336_TS_DetectTouch+0x50>)
 8003284:	2200      	movs	r2, #0
 8003286:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	b2db      	uxtb	r3, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20010bcc 	.word	0x20010bcc

08003298 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80032ba:	4b6d      	ldr	r3, [pc, #436]	; (8003470 <ft5336_TS_GetXY+0x1d8>)
 80032bc:	789a      	ldrb	r2, [r3, #2]
 80032be:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <ft5336_TS_GetXY+0x1d8>)
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	f080 80cf 	bcs.w	8003466 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80032c8:	4b69      	ldr	r3, [pc, #420]	; (8003470 <ft5336_TS_GetXY+0x1d8>)
 80032ca:	789b      	ldrb	r3, [r3, #2]
 80032cc:	2b09      	cmp	r3, #9
 80032ce:	d871      	bhi.n	80033b4 <ft5336_TS_GetXY+0x11c>
 80032d0:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <ft5336_TS_GetXY+0x40>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	08003301 	.word	0x08003301
 80032dc:	08003313 	.word	0x08003313
 80032e0:	08003325 	.word	0x08003325
 80032e4:	08003337 	.word	0x08003337
 80032e8:	08003349 	.word	0x08003349
 80032ec:	0800335b 	.word	0x0800335b
 80032f0:	0800336d 	.word	0x0800336d
 80032f4:	0800337f 	.word	0x0800337f
 80032f8:	08003391 	.word	0x08003391
 80032fc:	080033a3 	.word	0x080033a3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8003300:	2304      	movs	r3, #4
 8003302:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8003304:	2303      	movs	r3, #3
 8003306:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8003308:	2306      	movs	r3, #6
 800330a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800330c:	2305      	movs	r3, #5
 800330e:	753b      	strb	r3, [r7, #20]
      break;
 8003310:	e051      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8003312:	230a      	movs	r3, #10
 8003314:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8003316:	2309      	movs	r3, #9
 8003318:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800331a:	230c      	movs	r3, #12
 800331c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800331e:	230b      	movs	r3, #11
 8003320:	753b      	strb	r3, [r7, #20]
      break;
 8003322:	e048      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8003324:	2310      	movs	r3, #16
 8003326:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8003328:	230f      	movs	r3, #15
 800332a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800332c:	2312      	movs	r3, #18
 800332e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8003330:	2311      	movs	r3, #17
 8003332:	753b      	strb	r3, [r7, #20]
      break;
 8003334:	e03f      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8003336:	2316      	movs	r3, #22
 8003338:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800333a:	2315      	movs	r3, #21
 800333c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800333e:	2318      	movs	r3, #24
 8003340:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8003342:	2317      	movs	r3, #23
 8003344:	753b      	strb	r3, [r7, #20]
      break;
 8003346:	e036      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8003348:	231c      	movs	r3, #28
 800334a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800334c:	231b      	movs	r3, #27
 800334e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8003350:	231e      	movs	r3, #30
 8003352:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8003354:	231d      	movs	r3, #29
 8003356:	753b      	strb	r3, [r7, #20]
      break;
 8003358:	e02d      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800335a:	2322      	movs	r3, #34	; 0x22
 800335c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800335e:	2321      	movs	r3, #33	; 0x21
 8003360:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8003362:	2324      	movs	r3, #36	; 0x24
 8003364:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8003366:	2323      	movs	r3, #35	; 0x23
 8003368:	753b      	strb	r3, [r7, #20]
      break;
 800336a:	e024      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800336c:	2328      	movs	r3, #40	; 0x28
 800336e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8003370:	2327      	movs	r3, #39	; 0x27
 8003372:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8003374:	232a      	movs	r3, #42	; 0x2a
 8003376:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8003378:	2329      	movs	r3, #41	; 0x29
 800337a:	753b      	strb	r3, [r7, #20]
      break;
 800337c:	e01b      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800337e:	232e      	movs	r3, #46	; 0x2e
 8003380:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8003382:	232d      	movs	r3, #45	; 0x2d
 8003384:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8003386:	2330      	movs	r3, #48	; 0x30
 8003388:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800338a:	232f      	movs	r3, #47	; 0x2f
 800338c:	753b      	strb	r3, [r7, #20]
      break;
 800338e:	e012      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8003390:	2334      	movs	r3, #52	; 0x34
 8003392:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8003394:	2333      	movs	r3, #51	; 0x33
 8003396:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8003398:	2336      	movs	r3, #54	; 0x36
 800339a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800339c:	2335      	movs	r3, #53	; 0x35
 800339e:	753b      	strb	r3, [r7, #20]
      break;
 80033a0:	e009      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80033a2:	233a      	movs	r3, #58	; 0x3a
 80033a4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80033a6:	2339      	movs	r3, #57	; 0x39
 80033a8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80033aa:	233c      	movs	r3, #60	; 0x3c
 80033ac:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80033ae:	233b      	movs	r3, #59	; 0x3b
 80033b0:	753b      	strb	r3, [r7, #20]
      break;
 80033b2:	e000      	b.n	80033b6 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80033b4:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80033b6:	89fb      	ldrh	r3, [r7, #14]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	7dfa      	ldrb	r2, [r7, #23]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fb04 	bl	80039cc <TS_IO_Read>
 80033c4:	4603      	mov	r3, r0
 80033c6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	4b29      	ldr	r3, [pc, #164]	; (8003474 <ft5336_TS_GetXY+0x1dc>)
 80033d0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	7dba      	ldrb	r2, [r7, #22]
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 faf6 	bl	80039cc <TS_IO_Read>
 80033e0:	4603      	mov	r3, r0
 80033e2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033ee:	b21a      	sxth	r2, r3
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <ft5336_TS_GetXY+0x1dc>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b21b      	sxth	r3, r3
 80033f6:	4313      	orrs	r3, r2
 80033f8:	b21b      	sxth	r3, r3
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <ft5336_TS_GetXY+0x1dc>)
 80033fe:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8003400:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <ft5336_TS_GetXY+0x1dc>)
 8003402:	881a      	ldrh	r2, [r3, #0]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003408:	89fb      	ldrh	r3, [r7, #14]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	7d7a      	ldrb	r2, [r7, #21]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fadb 	bl	80039cc <TS_IO_Read>
 8003416:	4603      	mov	r3, r0
 8003418:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800341a:	7cfb      	ldrb	r3, [r7, #19]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	b29a      	uxth	r2, r3
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <ft5336_TS_GetXY+0x1dc>)
 8003422:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003424:	89fb      	ldrh	r3, [r7, #14]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	7d3a      	ldrb	r2, [r7, #20]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 facd 	bl	80039cc <TS_IO_Read>
 8003432:	4603      	mov	r3, r0
 8003434:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003440:	b21a      	sxth	r2, r3
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <ft5336_TS_GetXY+0x1dc>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b21b      	sxth	r3, r3
 8003448:	4313      	orrs	r3, r2
 800344a:	b21b      	sxth	r3, r3
 800344c:	b29a      	uxth	r2, r3
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <ft5336_TS_GetXY+0x1dc>)
 8003450:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <ft5336_TS_GetXY+0x1dc>)
 8003454:	881a      	ldrh	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <ft5336_TS_GetXY+0x1d8>)
 800345c:	789b      	ldrb	r3, [r3, #2]
 800345e:	3301      	adds	r3, #1
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4b03      	ldr	r3, [pc, #12]	; (8003470 <ft5336_TS_GetXY+0x1d8>)
 8003464:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20010bcc 	.word	0x20010bcc
 8003474:	20010bd0 	.word	0x20010bd0

08003478 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	21a4      	movs	r1, #164	; 0xa4
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fa80 	bl	8003998 <TS_IO_Write>
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	21a4      	movs	r1, #164	; 0xa4
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fa6c 	bl	8003998 <TS_IO_Write>
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	6039      	str	r1, [r7, #0]
 8003500:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fa5d 	bl	80039cc <TS_IO_Read>
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4603      	mov	r3, r0
 8003536:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8003548:	4b4d      	ldr	r3, [pc, #308]	; (8003680 <ft5336_TS_GetTouchInfo+0x158>)
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	461a      	mov	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4293      	cmp	r3, r2
 8003552:	f080 8090 	bcs.w	8003676 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b09      	cmp	r3, #9
 800355a:	d85d      	bhi.n	8003618 <ft5336_TS_GetTouchInfo+0xf0>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <ft5336_TS_GetTouchInfo+0x3c>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	0800358d 	.word	0x0800358d
 8003568:	0800359b 	.word	0x0800359b
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035b7 	.word	0x080035b7
 8003574:	080035c5 	.word	0x080035c5
 8003578:	080035d3 	.word	0x080035d3
 800357c:	080035e1 	.word	0x080035e1
 8003580:	080035ef 	.word	0x080035ef
 8003584:	080035fd 	.word	0x080035fd
 8003588:	0800360b 	.word	0x0800360b
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 800358c:	2303      	movs	r3, #3
 800358e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8003590:	2307      	movs	r3, #7
 8003592:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8003594:	2308      	movs	r3, #8
 8003596:	757b      	strb	r3, [r7, #21]
      break;
 8003598:	e03f      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800359a:	2309      	movs	r3, #9
 800359c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800359e:	230d      	movs	r3, #13
 80035a0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80035a2:	230e      	movs	r3, #14
 80035a4:	757b      	strb	r3, [r7, #21]
      break;
 80035a6:	e038      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80035a8:	230f      	movs	r3, #15
 80035aa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80035ac:	2313      	movs	r3, #19
 80035ae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80035b0:	2314      	movs	r3, #20
 80035b2:	757b      	strb	r3, [r7, #21]
      break;
 80035b4:	e031      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80035b6:	2315      	movs	r3, #21
 80035b8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80035ba:	2319      	movs	r3, #25
 80035bc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80035be:	231a      	movs	r3, #26
 80035c0:	757b      	strb	r3, [r7, #21]
      break;
 80035c2:	e02a      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80035c4:	231b      	movs	r3, #27
 80035c6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80035c8:	231f      	movs	r3, #31
 80035ca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80035cc:	2320      	movs	r3, #32
 80035ce:	757b      	strb	r3, [r7, #21]
      break;
 80035d0:	e023      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80035d2:	2321      	movs	r3, #33	; 0x21
 80035d4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80035d6:	2325      	movs	r3, #37	; 0x25
 80035d8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80035da:	2326      	movs	r3, #38	; 0x26
 80035dc:	757b      	strb	r3, [r7, #21]
      break;
 80035de:	e01c      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80035e0:	2327      	movs	r3, #39	; 0x27
 80035e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80035e4:	232b      	movs	r3, #43	; 0x2b
 80035e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80035e8:	232c      	movs	r3, #44	; 0x2c
 80035ea:	757b      	strb	r3, [r7, #21]
      break;
 80035ec:	e015      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80035ee:	232d      	movs	r3, #45	; 0x2d
 80035f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80035f2:	2331      	movs	r3, #49	; 0x31
 80035f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80035f6:	2332      	movs	r3, #50	; 0x32
 80035f8:	757b      	strb	r3, [r7, #21]
      break;
 80035fa:	e00e      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80035fc:	2333      	movs	r3, #51	; 0x33
 80035fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8003600:	2337      	movs	r3, #55	; 0x37
 8003602:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8003604:	2338      	movs	r3, #56	; 0x38
 8003606:	757b      	strb	r3, [r7, #21]
      break;
 8003608:	e007      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800360a:	2339      	movs	r3, #57	; 0x39
 800360c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800360e:	233d      	movs	r3, #61	; 0x3d
 8003610:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8003612:	233e      	movs	r3, #62	; 0x3e
 8003614:	757b      	strb	r3, [r7, #21]
      break;
 8003616:	e000      	b.n	800361a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8003618:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800361a:	89fb      	ldrh	r3, [r7, #14]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	7dfa      	ldrb	r2, [r7, #23]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f9d2 	bl	80039cc <TS_IO_Read>
 8003628:	4603      	mov	r3, r0
 800362a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800362c:	7d3b      	ldrb	r3, [r7, #20]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	119b      	asrs	r3, r3, #6
 8003632:	f003 0203 	and.w	r2, r3, #3
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800363a:	89fb      	ldrh	r3, [r7, #14]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	7dba      	ldrb	r2, [r7, #22]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f9c2 	bl	80039cc <TS_IO_Read>
 8003648:	4603      	mov	r3, r0
 800364a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800364c:	7d3b      	ldrb	r3, [r7, #20]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8003656:	89fb      	ldrh	r3, [r7, #14]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	7d7a      	ldrb	r2, [r7, #21]
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f9b4 	bl	80039cc <TS_IO_Read>
 8003664:	4603      	mov	r3, r0
 8003666:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8003668:	7d3b      	ldrb	r3, [r7, #20]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	111b      	asrs	r3, r3, #4
 800366e:	f003 0204 	and.w	r2, r3, #4
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20010bcc 	.word	0x20010bcc

08003684 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800368a:	781b      	ldrb	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20010bcc 	.word	0x20010bcc

0800369c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80036a0:	f7ff fff0 	bl	8003684 <ft5336_Get_I2C_InitializedStatus>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80036aa:	f000 f96b 	bl	8003984 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80036ae:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
  }
}
 80036b4:	bf00      	nop
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20010bcc 	.word	0x20010bcc

080036bc <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a51      	ldr	r2, [pc, #324]	; (8003828 <I2Cx_MspInit+0x150>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d14d      	bne.n	8003784 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80036e8:	4b50      	ldr	r3, [pc, #320]	; (800382c <I2Cx_MspInit+0x154>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	4a4f      	ldr	r2, [pc, #316]	; (800382c <I2Cx_MspInit+0x154>)
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	6313      	str	r3, [r2, #48]	; 0x30
 80036f4:	4b4d      	ldr	r3, [pc, #308]	; (800382c <I2Cx_MspInit+0x154>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003704:	2312      	movs	r3, #18
 8003706:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800370c:	2302      	movs	r3, #2
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003710:	2304      	movs	r3, #4
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	4619      	mov	r1, r3
 800371a:	4845      	ldr	r0, [pc, #276]	; (8003830 <I2Cx_MspInit+0x158>)
 800371c:	f002 fdc6 	bl	80062ac <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003726:	f107 031c 	add.w	r3, r7, #28
 800372a:	4619      	mov	r1, r3
 800372c:	4840      	ldr	r0, [pc, #256]	; (8003830 <I2Cx_MspInit+0x158>)
 800372e:	f002 fdbd 	bl	80062ac <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003732:	4b3e      	ldr	r3, [pc, #248]	; (800382c <I2Cx_MspInit+0x154>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4a3d      	ldr	r2, [pc, #244]	; (800382c <I2Cx_MspInit+0x154>)
 8003738:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800373c:	6413      	str	r3, [r2, #64]	; 0x40
 800373e:	4b3b      	ldr	r3, [pc, #236]	; (800382c <I2Cx_MspInit+0x154>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800374a:	4b38      	ldr	r3, [pc, #224]	; (800382c <I2Cx_MspInit+0x154>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4a37      	ldr	r2, [pc, #220]	; (800382c <I2Cx_MspInit+0x154>)
 8003750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003754:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003756:	4b35      	ldr	r3, [pc, #212]	; (800382c <I2Cx_MspInit+0x154>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4a34      	ldr	r2, [pc, #208]	; (800382c <I2Cx_MspInit+0x154>)
 800375c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003760:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	210f      	movs	r1, #15
 8003766:	2048      	movs	r0, #72	; 0x48
 8003768:	f001 fec5 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800376c:	2048      	movs	r0, #72	; 0x48
 800376e:	f001 fede 	bl	800552e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	210f      	movs	r1, #15
 8003776:	2049      	movs	r0, #73	; 0x49
 8003778:	f001 febd 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800377c:	2049      	movs	r0, #73	; 0x49
 800377e:	f001 fed6 	bl	800552e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003782:	e04d      	b.n	8003820 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003784:	4b29      	ldr	r3, [pc, #164]	; (800382c <I2Cx_MspInit+0x154>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4a28      	ldr	r2, [pc, #160]	; (800382c <I2Cx_MspInit+0x154>)
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	6313      	str	r3, [r2, #48]	; 0x30
 8003790:	4b26      	ldr	r3, [pc, #152]	; (800382c <I2Cx_MspInit+0x154>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800379c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80037a2:	2312      	movs	r3, #18
 80037a4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80037aa:	2302      	movs	r3, #2
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80037ae:	2304      	movs	r3, #4
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037b2:	f107 031c 	add.w	r3, r7, #28
 80037b6:	4619      	mov	r1, r3
 80037b8:	481e      	ldr	r0, [pc, #120]	; (8003834 <I2Cx_MspInit+0x15c>)
 80037ba:	f002 fd77 	bl	80062ac <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80037be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	4619      	mov	r1, r3
 80037ca:	481a      	ldr	r0, [pc, #104]	; (8003834 <I2Cx_MspInit+0x15c>)
 80037cc:	f002 fd6e 	bl	80062ac <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80037d0:	4b16      	ldr	r3, [pc, #88]	; (800382c <I2Cx_MspInit+0x154>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <I2Cx_MspInit+0x154>)
 80037d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037da:	6413      	str	r3, [r2, #64]	; 0x40
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <I2Cx_MspInit+0x154>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <I2Cx_MspInit+0x154>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a0f      	ldr	r2, [pc, #60]	; (800382c <I2Cx_MspInit+0x154>)
 80037ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037f2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <I2Cx_MspInit+0x154>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a0c      	ldr	r2, [pc, #48]	; (800382c <I2Cx_MspInit+0x154>)
 80037fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037fe:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003800:	2200      	movs	r2, #0
 8003802:	210f      	movs	r1, #15
 8003804:	201f      	movs	r0, #31
 8003806:	f001 fe76 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800380a:	201f      	movs	r0, #31
 800380c:	f001 fe8f 	bl	800552e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	210f      	movs	r1, #15
 8003814:	2020      	movs	r0, #32
 8003816:	f001 fe6e 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800381a:	2020      	movs	r0, #32
 800381c:	f001 fe87 	bl	800552e <HAL_NVIC_EnableIRQ>
}
 8003820:	bf00      	nop
 8003822:	3730      	adds	r7, #48	; 0x30
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20010bd4 	.word	0x20010bd4
 800382c:	40023800 	.word	0x40023800
 8003830:	40021c00 	.word	0x40021c00
 8003834:	40020400 	.word	0x40020400

08003838 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f003 fa13 	bl	8006c6c <HAL_I2C_GetState>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d125      	bne.n	8003898 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <I2Cx_Init+0x68>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d103      	bne.n	800385c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <I2Cx_Init+0x6c>)
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e002      	b.n	8003862 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <I2Cx_Init+0x70>)
 8003860:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a11      	ldr	r2, [pc, #68]	; (80038ac <I2Cx_Init+0x74>)
 8003866:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff23 	bl	80036d8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f002 fee8 	bl	8006668 <HAL_I2C_Init>
  }
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20010bd4 	.word	0x20010bd4
 80038a4:	40005c00 	.word	0x40005c00
 80038a8:	40005400 	.word	0x40005400
 80038ac:	40912732 	.word	0x40912732

080038b0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af04      	add	r7, sp, #16
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	72fb      	strb	r3, [r7, #11]
 80038c2:	460b      	mov	r3, r1
 80038c4:	813b      	strh	r3, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80038ce:	7afb      	ldrb	r3, [r7, #11]
 80038d0:	b299      	uxth	r1, r3
 80038d2:	88f8      	ldrh	r0, [r7, #6]
 80038d4:	893a      	ldrh	r2, [r7, #8]
 80038d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038da:	9302      	str	r3, [sp, #8]
 80038dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	4603      	mov	r3, r0
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f003 f8a6 	bl	8006a38 <HAL_I2C_Mem_Read>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80038f6:	7afb      	ldrb	r3, [r7, #11]
 80038f8:	4619      	mov	r1, r3
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f832 	bl	8003964 <I2Cx_Error>
  }
  return status;    
 8003900:	7dfb      	ldrb	r3, [r7, #23]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b08a      	sub	sp, #40	; 0x28
 800390e:	af04      	add	r7, sp, #16
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	4608      	mov	r0, r1
 8003914:	4611      	mov	r1, r2
 8003916:	461a      	mov	r2, r3
 8003918:	4603      	mov	r3, r0
 800391a:	72fb      	strb	r3, [r7, #11]
 800391c:	460b      	mov	r3, r1
 800391e:	813b      	strh	r3, [r7, #8]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	b299      	uxth	r1, r3
 800392c:	88f8      	ldrh	r0, [r7, #6]
 800392e:	893a      	ldrh	r2, [r7, #8]
 8003930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003934:	9302      	str	r3, [sp, #8]
 8003936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	4603      	mov	r3, r0
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f002 ff65 	bl	8006810 <HAL_I2C_Mem_Write>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003950:	7afb      	ldrb	r3, [r7, #11]
 8003952:	4619      	mov	r1, r3
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f805 	bl	8003964 <I2Cx_Error>
  }
  return status;
 800395a:	7dfb      	ldrb	r3, [r7, #23]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f002 ff09 	bl	8006788 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff5e 	bl	8003838 <I2Cx_Init>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <TS_IO_Init+0x10>)
 800398a:	f7ff ff55 	bl	8003838 <I2Cx_Init>
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20010bd4 	.word	0x20010bd4

08003998 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af02      	add	r7, sp, #8
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
 80039a2:	460b      	mov	r3, r1
 80039a4:	71bb      	strb	r3, [r7, #6]
 80039a6:	4613      	mov	r3, r2
 80039a8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80039aa:	79bb      	ldrb	r3, [r7, #6]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	79f9      	ldrb	r1, [r7, #7]
 80039b0:	2301      	movs	r3, #1
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	1d7b      	adds	r3, r7, #5
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2301      	movs	r3, #1
 80039ba:	4803      	ldr	r0, [pc, #12]	; (80039c8 <TS_IO_Write+0x30>)
 80039bc:	f7ff ffa5 	bl	800390a <I2Cx_WriteMultiple>
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20010bd4 	.word	0x20010bd4

080039cc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	4603      	mov	r3, r0
 80039d4:	460a      	mov	r2, r1
 80039d6:	71fb      	strb	r3, [r7, #7]
 80039d8:	4613      	mov	r3, r2
 80039da:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80039e0:	79bb      	ldrb	r3, [r7, #6]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	79f9      	ldrb	r1, [r7, #7]
 80039e6:	2301      	movs	r3, #1
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	f107 030f 	add.w	r3, r7, #15
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2301      	movs	r3, #1
 80039f2:	4804      	ldr	r0, [pc, #16]	; (8003a04 <TS_IO_Read+0x38>)
 80039f4:	f7ff ff5c 	bl	80038b0 <I2Cx_ReadMultiple>

  return read_value;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20010bd4 	.word	0x20010bd4

08003a08 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f001 f835 	bl	8004a80 <HAL_Delay>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return hltdc.LayerCfg[ActiveLayer].ImageWidth;
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <BSP_LCD_GetXSize+0x20>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a06      	ldr	r2, [pc, #24]	; (8003a44 <BSP_LCD_GetXSize+0x24>)
 8003a2a:	2134      	movs	r1, #52	; 0x34
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3360      	adds	r3, #96	; 0x60
 8003a34:	681b      	ldr	r3, [r3, #0]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	20010c60 	.word	0x20010c60
 8003a44:	20000b9c 	.word	0x20000b9c

08003a48 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return hltdc.LayerCfg[ActiveLayer].ImageHeight;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <BSP_LCD_GetYSize+0x20>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a06      	ldr	r2, [pc, #24]	; (8003a6c <BSP_LCD_GetYSize+0x24>)
 8003a52:	2134      	movs	r1, #52	; 0x34
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	4413      	add	r3, r2
 8003a5a:	3364      	adds	r3, #100	; 0x64
 8003a5c:	681b      	ldr	r3, [r3, #0]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	20010c60 	.word	0x20010c60
 8003a6c:	20000b9c 	.word	0x20000b9c

08003a70 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	80fb      	strh	r3, [r7, #6]
//  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
//  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
//
//  HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003a7c:	88fa      	ldrh	r2, [r7, #6]
 8003a7e:	4912      	ldr	r1, [pc, #72]	; (8003ac8 <BSP_LCD_LayerDefaultInit+0x58>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <BSP_LCD_LayerDefaultInit+0x58>)
 8003a96:	4613      	mov	r3, r2
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <BSP_LCD_LayerDefaultInit+0x5c>)
 8003aa4:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	4907      	ldr	r1, [pc, #28]	; (8003ac8 <BSP_LCD_LayerDefaultInit+0x58>)
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003ab8:	601a      	str	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20010c64 	.word	0x20010c64
 8003acc:	20000810 	.word	0x20000810

08003ad0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <BSP_LCD_SelectLayer+0x1c>)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6013      	str	r3, [r2, #0]
} 
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20010c60 	.word	0x20010c60

08003af0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003af8:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <BSP_LCD_SetTextColor+0x28>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4907      	ldr	r1, [pc, #28]	; (8003b1c <BSP_LCD_SetTextColor+0x2c>)
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	20010c60 	.word	0x20010c60
 8003b1c:	20010c64 	.word	0x20010c64

08003b20 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <BSP_LCD_SetBackColor+0x2c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4908      	ldr	r1, [pc, #32]	; (8003b50 <BSP_LCD_SetBackColor+0x30>)
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	3304      	adds	r3, #4
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20010c60 	.word	0x20010c60
 8003b50:	20010c64 	.word	0x20010c64

08003b54 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <BSP_LCD_SetFont+0x2c>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4908      	ldr	r1, [pc, #32]	; (8003b84 <BSP_LCD_SetFont+0x30>)
 8003b62:	4613      	mov	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20010c60 	.word	0x20010c60
 8003b84:	20010c64 	.word	0x20010c64

08003b88 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <BSP_LCD_Clear+0x48>)
 8003b92:	681c      	ldr	r4, [r3, #0]
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <BSP_LCD_Clear+0x48>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0e      	ldr	r2, [pc, #56]	; (8003bd4 <BSP_LCD_Clear+0x4c>)
 8003b9a:	2134      	movs	r1, #52	; 0x34
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	335c      	adds	r3, #92	; 0x5c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461e      	mov	r6, r3
 8003ba8:	f7ff ff3a 	bl	8003a20 <BSP_LCD_GetXSize>
 8003bac:	4605      	mov	r5, r0
 8003bae:	f7ff ff4b 	bl	8003a48 <BSP_LCD_GetYSize>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	462a      	mov	r2, r5
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f000 fc08 	bl	80043d8 <LL_FillBuffer>
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd0:	20010c60 	.word	0x20010c60
 8003bd4:	20000b9c 	.word	0x20000b9c

08003bd8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	80fb      	strh	r3, [r7, #6]
 8003be2:	460b      	mov	r3, r1
 8003be4:	80bb      	strh	r3, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	70fb      	strb	r3, [r7, #3]
	if(Ascii < ' ' )
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	2b1f      	cmp	r3, #31
 8003bee:	d801      	bhi.n	8003bf4 <BSP_LCD_DisplayChar+0x1c>
		Ascii = ' ';
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <BSP_LCD_DisplayChar+0x8c>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	491b      	ldr	r1, [pc, #108]	; (8003c68 <BSP_LCD_DisplayChar+0x90>)
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	3308      	adds	r3, #8
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6819      	ldr	r1, [r3, #0]
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003c10:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <BSP_LCD_DisplayChar+0x8c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4c14      	ldr	r4, [pc, #80]	; (8003c68 <BSP_LCD_DisplayChar+0x90>)
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4423      	add	r3, r4
 8003c20:	3308      	adds	r3, #8
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003c26:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <BSP_LCD_DisplayChar+0x8c>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4c0e      	ldr	r4, [pc, #56]	; (8003c68 <BSP_LCD_DisplayChar+0x90>)
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4423      	add	r3, r4
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	889b      	ldrh	r3, [r3, #4]
 8003c40:	3307      	adds	r3, #7
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da00      	bge.n	8003c48 <BSP_LCD_DisplayChar+0x70>
 8003c46:	3307      	adds	r3, #7
 8003c48:	10db      	asrs	r3, r3, #3
 8003c4a:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003c4e:	18ca      	adds	r2, r1, r3
 8003c50:	88b9      	ldrh	r1, [r7, #4]
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fb07 	bl	8004268 <DrawChar>
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd90      	pop	{r4, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20010c60 	.word	0x20010c60
 8003c68:	20010c64 	.word	0x20010c64

08003c6c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003c6c:	b5b0      	push	{r4, r5, r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60ba      	str	r2, [r7, #8]
 8003c74:	461a      	mov	r2, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	81fb      	strh	r3, [r7, #14]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	81bb      	strh	r3, [r7, #12]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003c82:	2301      	movs	r3, #1
 8003c84:	83fb      	strh	r3, [r7, #30]
 8003c86:	2300      	movs	r3, #0
 8003c88:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003c96:	e002      	b.n	8003c9e <BSP_LCD_DisplayStringAt+0x32>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	617a      	str	r2, [r7, #20]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f6      	bne.n	8003c98 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003caa:	f7ff feb9 	bl	8003a20 <BSP_LCD_GetXSize>
 8003cae:	4601      	mov	r1, r0
 8003cb0:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <BSP_LCD_DisplayStringAt+0x188>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4850      	ldr	r0, [pc, #320]	; (8003df8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4403      	add	r3, r0
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	889b      	ldrh	r3, [r3, #4]
 8003cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cca:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d01c      	beq.n	8003d0c <BSP_LCD_DisplayStringAt+0xa0>
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	dc33      	bgt.n	8003d3e <BSP_LCD_DisplayStringAt+0xd2>
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d002      	beq.n	8003ce0 <BSP_LCD_DisplayStringAt+0x74>
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d019      	beq.n	8003d12 <BSP_LCD_DisplayStringAt+0xa6>
 8003cde:	e02e      	b.n	8003d3e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	1ad1      	subs	r1, r2, r3
 8003ce6:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <BSP_LCD_DisplayStringAt+0x188>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4843      	ldr	r0, [pc, #268]	; (8003df8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4403      	add	r3, r0
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	889b      	ldrh	r3, [r3, #4]
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	89fb      	ldrh	r3, [r7, #14]
 8003d06:	4413      	add	r3, r2
 8003d08:	83fb      	strh	r3, [r7, #30]
      break;
 8003d0a:	e01b      	b.n	8003d44 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003d0c:	89fb      	ldrh	r3, [r7, #14]
 8003d0e:	83fb      	strh	r3, [r7, #30]
      break;
 8003d10:	e018      	b.n	8003d44 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	b299      	uxth	r1, r3
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <BSP_LCD_DisplayStringAt+0x188>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4836      	ldr	r0, [pc, #216]	; (8003df8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4403      	add	r3, r0
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	889b      	ldrh	r3, [r3, #4]
 8003d30:	fb11 f303 	smulbb	r3, r1, r3
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	89fb      	ldrh	r3, [r7, #14]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	83fb      	strh	r3, [r7, #30]
      break;
 8003d3c:	e002      	b.n	8003d44 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003d3e:	89fb      	ldrh	r3, [r7, #14]
 8003d40:	83fb      	strh	r3, [r7, #30]
      break;
 8003d42:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003d44:	8bfb      	ldrh	r3, [r7, #30]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <BSP_LCD_DisplayStringAt+0xe6>
 8003d4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da1d      	bge.n	8003d8e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003d56:	e01a      	b.n	8003d8e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781a      	ldrb	r2, [r3, #0]
 8003d5c:	89b9      	ldrh	r1, [r7, #12]
 8003d5e:	8bfb      	ldrh	r3, [r7, #30]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff39 	bl	8003bd8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003d66:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <BSP_LCD_DisplayStringAt+0x188>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4923      	ldr	r1, [pc, #140]	; (8003df8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	3308      	adds	r3, #8
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	889a      	ldrh	r2, [r3, #4]
 8003d7c:	8bfb      	ldrh	r3, [r7, #30]
 8003d7e:	4413      	add	r3, r2
 8003d80:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3301      	adds	r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]
    i++;
 8003d88:	8bbb      	ldrh	r3, [r7, #28]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2dc      	uxtb	r4, r3
 8003d9c:	f7ff fe40 	bl	8003a20 <BSP_LCD_GetXSize>
 8003da0:	8bb9      	ldrh	r1, [r7, #28]
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <BSP_LCD_DisplayStringAt+0x188>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4d14      	ldr	r5, [pc, #80]	; (8003df8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	442b      	add	r3, r5
 8003db2:	3308      	adds	r3, #8
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	889b      	ldrh	r3, [r3, #4]
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	1ac3      	subs	r3, r0, r3
 8003dbe:	b299      	uxth	r1, r3
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <BSP_LCD_DisplayStringAt+0x188>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	480c      	ldr	r0, [pc, #48]	; (8003df8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4403      	add	r3, r0
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	889b      	ldrh	r3, [r3, #4]
 8003dd6:	4299      	cmp	r1, r3
 8003dd8:	bf2c      	ite	cs
 8003dda:	2301      	movcs	r3, #1
 8003ddc:	2300      	movcc	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	4023      	ands	r3, r4
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1b7      	bne.n	8003d58 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bdb0      	pop	{r4, r5, r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20010c60 	.word	0x20010c60
 8003df8:	20010c64 	.word	0x20010c64

08003dfc <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b08b      	sub	sp, #44	; 0x2c
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4604      	mov	r4, r0
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	80fb      	strh	r3, [r7, #6]
 8003e0e:	4603      	mov	r3, r0
 8003e10:	80bb      	strh	r3, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	807b      	strh	r3, [r7, #2]
 8003e16:	4613      	mov	r3, r2
 8003e18:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	823b      	strh	r3, [r7, #16]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	81fb      	strh	r3, [r7, #14]
 8003e22:	2300      	movs	r3, #0
 8003e24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e26:	2300      	movs	r3, #0
 8003e28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e2e:	2300      	movs	r3, #0
 8003e30:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8003e32:	2300      	movs	r3, #0
 8003e34:	83fb      	strh	r3, [r7, #30]
 8003e36:	2300      	movs	r3, #0
 8003e38:	83bb      	strh	r3, [r7, #28]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	837b      	strh	r3, [r7, #26]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	833b      	strh	r3, [r7, #24]
 8003e42:	2300      	movs	r3, #0
 8003e44:	82fb      	strh	r3, [r7, #22]
 8003e46:	2300      	movs	r3, #0
 8003e48:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bfb8      	it	lt
 8003e58:	425b      	neglt	r3, r3
 8003e5a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003e5c:	883a      	ldrh	r2, [r7, #0]
 8003e5e:	88bb      	ldrh	r3, [r7, #4]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bfb8      	it	lt
 8003e66:	425b      	neglt	r3, r3
 8003e68:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003e6e:	88bb      	ldrh	r3, [r7, #4]
 8003e70:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d304      	bcc.n	8003e84 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	843b      	strh	r3, [r7, #32]
 8003e82:	e005      	b.n	8003e90 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e88:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e8e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003e90:	883a      	ldrh	r2, [r7, #0]
 8003e92:	88bb      	ldrh	r3, [r7, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d304      	bcc.n	8003ea2 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	83bb      	strh	r3, [r7, #28]
 8003ea0:	e005      	b.n	8003eae <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ea6:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eac:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003eae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003eb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	db11      	blt.n	8003ede <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003eba:	2300      	movs	r3, #0
 8003ebc:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003ec2:	8a3b      	ldrh	r3, [r7, #16]
 8003ec4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003ec6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	da00      	bge.n	8003ed0 <BSP_LCD_DrawLine+0xd4>
 8003ece:	3301      	adds	r3, #1
 8003ed0:	105b      	asrs	r3, r3, #1
 8003ed2:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003ed4:	89fb      	ldrh	r3, [r7, #14]
 8003ed6:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8003ed8:	8a3b      	ldrh	r3, [r7, #16]
 8003eda:	82bb      	strh	r3, [r7, #20]
 8003edc:	e010      	b.n	8003f00 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003ede:	2300      	movs	r3, #0
 8003ee0:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003ee6:	89fb      	ldrh	r3, [r7, #14]
 8003ee8:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003eea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da00      	bge.n	8003ef4 <BSP_LCD_DrawLine+0xf8>
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	105b      	asrs	r3, r3, #1
 8003ef6:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8003ef8:	8a3b      	ldrh	r3, [r7, #16]
 8003efa:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8003efc:	89fb      	ldrh	r3, [r7, #14]
 8003efe:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003f00:	2300      	movs	r3, #0
 8003f02:	827b      	strh	r3, [r7, #18]
 8003f04:	e037      	b.n	8003f76 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003f06:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003f08:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <BSP_LCD_DrawLine+0x190>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4c20      	ldr	r4, [pc, #128]	; (8003f90 <BSP_LCD_DrawLine+0x194>)
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4423      	add	r3, r4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f000 f923 	bl	8004168 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8003f22:	8b3a      	ldrh	r2, [r7, #24]
 8003f24:	8afb      	ldrh	r3, [r7, #22]
 8003f26:	4413      	add	r3, r2
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003f2c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003f30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	db0e      	blt.n	8003f56 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003f38:	8b3a      	ldrh	r2, [r7, #24]
 8003f3a:	8b7b      	ldrh	r3, [r7, #26]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003f42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f46:	4413      	add	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003f4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f4e:	8bfb      	ldrh	r3, [r7, #30]
 8003f50:	4413      	add	r3, r2
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003f56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f58:	8c3b      	ldrh	r3, [r7, #32]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003f60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f62:	8bbb      	ldrh	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003f6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	827b      	strh	r3, [r7, #18]
 8003f76:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	ddc1      	ble.n	8003f06 <BSP_LCD_DrawLine+0x10a>
  }
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	372c      	adds	r7, #44	; 0x2c
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd90      	pop	{r4, r7, pc}
 8003f8c:	20010c60 	.word	0x20010c60
 8003f90:	20010c64 	.word	0x20010c64

08003f94 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	80bb      	strh	r3, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003fa6:	887b      	ldrh	r3, [r7, #2]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	f1c3 0303 	rsb	r3, r3, #3
 8003fae:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003fb4:	887b      	ldrh	r3, [r7, #2]
 8003fb6:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003fb8:	e0c7      	b.n	800414a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	b298      	uxth	r0, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	88ba      	ldrh	r2, [r7, #4]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	b299      	uxth	r1, r3
 8003fce:	4b64      	ldr	r3, [pc, #400]	; (8004160 <BSP_LCD_DrawCircle+0x1cc>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4c64      	ldr	r4, [pc, #400]	; (8004164 <BSP_LCD_DrawCircle+0x1d0>)
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4423      	add	r3, r4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f000 f8c1 	bl	8004168 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	b298      	uxth	r0, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	88ba      	ldrh	r2, [r7, #4]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	b299      	uxth	r1, r3
 8003ffa:	4b59      	ldr	r3, [pc, #356]	; (8004160 <BSP_LCD_DrawCircle+0x1cc>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4c59      	ldr	r4, [pc, #356]	; (8004164 <BSP_LCD_DrawCircle+0x1d0>)
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4423      	add	r3, r4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	f000 f8ab 	bl	8004168 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	b29a      	uxth	r2, r3
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	4413      	add	r3, r2
 800401a:	b298      	uxth	r0, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	b29b      	uxth	r3, r3
 8004020:	88ba      	ldrh	r2, [r7, #4]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	b299      	uxth	r1, r3
 8004026:	4b4e      	ldr	r3, [pc, #312]	; (8004160 <BSP_LCD_DrawCircle+0x1cc>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4c4e      	ldr	r4, [pc, #312]	; (8004164 <BSP_LCD_DrawCircle+0x1d0>)
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4423      	add	r3, r4
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	f000 f895 	bl	8004168 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	b29b      	uxth	r3, r3
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	b298      	uxth	r0, r3
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	b29b      	uxth	r3, r3
 800404c:	88ba      	ldrh	r2, [r7, #4]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	b299      	uxth	r1, r3
 8004052:	4b43      	ldr	r3, [pc, #268]	; (8004160 <BSP_LCD_DrawCircle+0x1cc>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4c43      	ldr	r4, [pc, #268]	; (8004164 <BSP_LCD_DrawCircle+0x1d0>)
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4423      	add	r3, r4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	f000 f87f 	bl	8004168 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	b29a      	uxth	r2, r3
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	4413      	add	r3, r2
 8004072:	b298      	uxth	r0, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	b29a      	uxth	r2, r3
 8004078:	88bb      	ldrh	r3, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	b299      	uxth	r1, r3
 800407e:	4b38      	ldr	r3, [pc, #224]	; (8004160 <BSP_LCD_DrawCircle+0x1cc>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4c38      	ldr	r4, [pc, #224]	; (8004164 <BSP_LCD_DrawCircle+0x1d0>)
 8004084:	4613      	mov	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4423      	add	r3, r4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	f000 f869 	bl	8004168 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	b29b      	uxth	r3, r3
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	b298      	uxth	r0, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	88bb      	ldrh	r3, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	b299      	uxth	r1, r3
 80040aa:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <BSP_LCD_DrawCircle+0x1cc>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4c2d      	ldr	r4, [pc, #180]	; (8004164 <BSP_LCD_DrawCircle+0x1d0>)
 80040b0:	4613      	mov	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4423      	add	r3, r4
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	f000 f853 	bl	8004168 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	4413      	add	r3, r2
 80040ca:	b298      	uxth	r0, r3
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	88bb      	ldrh	r3, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	b299      	uxth	r1, r3
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <BSP_LCD_DrawCircle+0x1cc>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4c22      	ldr	r4, [pc, #136]	; (8004164 <BSP_LCD_DrawCircle+0x1d0>)
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4423      	add	r3, r4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f000 f83d 	bl	8004168 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	b298      	uxth	r0, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	88bb      	ldrh	r3, [r7, #4]
 80040fe:	4413      	add	r3, r2
 8004100:	b299      	uxth	r1, r3
 8004102:	4b17      	ldr	r3, [pc, #92]	; (8004160 <BSP_LCD_DrawCircle+0x1cc>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4c17      	ldr	r4, [pc, #92]	; (8004164 <BSP_LCD_DrawCircle+0x1d0>)
 8004108:	4613      	mov	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4423      	add	r3, r4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	f000 f827 	bl	8004168 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	da06      	bge.n	800412e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	009a      	lsls	r2, r3, #2
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4413      	add	r3, r2
 8004128:	3306      	adds	r3, #6
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e00a      	b.n	8004144 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	009a      	lsls	r2, r3, #2
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	4413      	add	r3, r2
 800413a:	330a      	adds	r3, #10
 800413c:	617b      	str	r3, [r7, #20]
      current_y--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3b01      	subs	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	3301      	adds	r3, #1
 8004148:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	429a      	cmp	r2, r3
 8004150:	f67f af33 	bls.w	8003fba <BSP_LCD_DrawCircle+0x26>
  } 
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd90      	pop	{r4, r7, pc}
 800415e:	bf00      	nop
 8004160:	20010c60 	.word	0x20010c60
 8004164:	20010c64 	.word	0x20010c64

08004168 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004168:	b5b0      	push	{r4, r5, r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	603a      	str	r2, [r7, #0]
 8004172:	80fb      	strh	r3, [r7, #6]
 8004174:	460b      	mov	r3, r1
 8004176:	80bb      	strh	r3, [r7, #4]

  if(Xpos <  hltdc.LayerCfg[ActiveLayer].WindowX0) return;// Added by PatCh
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	4b39      	ldr	r3, [pc, #228]	; (8004260 <BSP_LCD_DrawPixel+0xf8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4939      	ldr	r1, [pc, #228]	; (8004264 <BSP_LCD_DrawPixel+0xfc>)
 8004180:	2034      	movs	r0, #52	; 0x34
 8004182:	fb00 f303 	mul.w	r3, r0, r3
 8004186:	440b      	add	r3, r1
 8004188:	3338      	adds	r3, #56	; 0x38
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d35c      	bcc.n	800424a <BSP_LCD_DrawPixel+0xe2>
  if(Ypos <  hltdc.LayerCfg[ActiveLayer].WindowY0) return;// Added by PatCh
 8004190:	88ba      	ldrh	r2, [r7, #4]
 8004192:	4b33      	ldr	r3, [pc, #204]	; (8004260 <BSP_LCD_DrawPixel+0xf8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4933      	ldr	r1, [pc, #204]	; (8004264 <BSP_LCD_DrawPixel+0xfc>)
 8004198:	2034      	movs	r0, #52	; 0x34
 800419a:	fb00 f303 	mul.w	r3, r0, r3
 800419e:	440b      	add	r3, r1
 80041a0:	3340      	adds	r3, #64	; 0x40
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d352      	bcc.n	800424e <BSP_LCD_DrawPixel+0xe6>
  if(Xpos >= hltdc.LayerCfg[ActiveLayer].WindowX1) return;// Added by PatCh
 80041a8:	88fa      	ldrh	r2, [r7, #6]
 80041aa:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <BSP_LCD_DrawPixel+0xf8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	492d      	ldr	r1, [pc, #180]	; (8004264 <BSP_LCD_DrawPixel+0xfc>)
 80041b0:	2034      	movs	r0, #52	; 0x34
 80041b2:	fb00 f303 	mul.w	r3, r0, r3
 80041b6:	440b      	add	r3, r1
 80041b8:	333c      	adds	r3, #60	; 0x3c
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d248      	bcs.n	8004252 <BSP_LCD_DrawPixel+0xea>
  if(Ypos >= hltdc.LayerCfg[ActiveLayer].WindowY1) return;// Added by PatCh
 80041c0:	88ba      	ldrh	r2, [r7, #4]
 80041c2:	4b27      	ldr	r3, [pc, #156]	; (8004260 <BSP_LCD_DrawPixel+0xf8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4927      	ldr	r1, [pc, #156]	; (8004264 <BSP_LCD_DrawPixel+0xfc>)
 80041c8:	2034      	movs	r0, #52	; 0x34
 80041ca:	fb00 f303 	mul.w	r3, r0, r3
 80041ce:	440b      	add	r3, r1
 80041d0:	3344      	adds	r3, #68	; 0x44
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d23e      	bcs.n	8004256 <BSP_LCD_DrawPixel+0xee>
  /* Write data value to all SDRAM memory */
  if(hltdc.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <BSP_LCD_DrawPixel+0xf8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a21      	ldr	r2, [pc, #132]	; (8004264 <BSP_LCD_DrawPixel+0xfc>)
 80041de:	2134      	movs	r1, #52	; 0x34
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	3348      	adds	r3, #72	; 0x48
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d116      	bne.n	800421c <BSP_LCD_DrawPixel+0xb4>
  { /* RGB565 format */
    *(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80041ee:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <BSP_LCD_DrawPixel+0xf8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <BSP_LCD_DrawPixel+0xfc>)
 80041f4:	2134      	movs	r1, #52	; 0x34
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	335c      	adds	r3, #92	; 0x5c
 80041fe:	681c      	ldr	r4, [r3, #0]
 8004200:	88bd      	ldrh	r5, [r7, #4]
 8004202:	f7ff fc0d 	bl	8003a20 <BSP_LCD_GetXSize>
 8004206:	4603      	mov	r3, r0
 8004208:	fb03 f205 	mul.w	r2, r3, r5
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	4413      	add	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4423      	add	r3, r4
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	b292      	uxth	r2, r2
 8004218:	801a      	strh	r2, [r3, #0]
 800421a:	e01d      	b.n	8004258 <BSP_LCD_DrawPixel+0xf0>
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <BSP_LCD_DrawPixel+0xf8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a10      	ldr	r2, [pc, #64]	; (8004264 <BSP_LCD_DrawPixel+0xfc>)
 8004222:	2134      	movs	r1, #52	; 0x34
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	335c      	adds	r3, #92	; 0x5c
 800422c:	681c      	ldr	r4, [r3, #0]
 800422e:	88bd      	ldrh	r5, [r7, #4]
 8004230:	f7ff fbf6 	bl	8003a20 <BSP_LCD_GetXSize>
 8004234:	4603      	mov	r3, r0
 8004236:	fb03 f205 	mul.w	r2, r3, r5
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4423      	add	r3, r4
 8004242:	461a      	mov	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	e006      	b.n	8004258 <BSP_LCD_DrawPixel+0xf0>
  if(Xpos <  hltdc.LayerCfg[ActiveLayer].WindowX0) return;// Added by PatCh
 800424a:	bf00      	nop
 800424c:	e004      	b.n	8004258 <BSP_LCD_DrawPixel+0xf0>
  if(Ypos <  hltdc.LayerCfg[ActiveLayer].WindowY0) return;// Added by PatCh
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <BSP_LCD_DrawPixel+0xf0>
  if(Xpos >= hltdc.LayerCfg[ActiveLayer].WindowX1) return;// Added by PatCh
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <BSP_LCD_DrawPixel+0xf0>
  if(Ypos >= hltdc.LayerCfg[ActiveLayer].WindowY1) return;// Added by PatCh
 8004256:	bf00      	nop
  }
}
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bdb0      	pop	{r4, r5, r7, pc}
 800425e:	bf00      	nop
 8004260:	20010c60 	.word	0x20010c60
 8004264:	20000b9c 	.word	0x20000b9c

08004268 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	603a      	str	r2, [r7, #0]
 8004272:	80fb      	strh	r3, [r7, #6]
 8004274:	460b      	mov	r3, r1
 8004276:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	2300      	movs	r3, #0
 800427e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <DrawChar+0x168>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4953      	ldr	r1, [pc, #332]	; (80043d4 <DrawChar+0x16c>)
 8004286:	4613      	mov	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3308      	adds	r3, #8
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	88db      	ldrh	r3, [r3, #6]
 8004296:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004298:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <DrawChar+0x168>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	494d      	ldr	r1, [pc, #308]	; (80043d4 <DrawChar+0x16c>)
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3308      	adds	r3, #8
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	889b      	ldrh	r3, [r3, #4]
 80042ae:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80042b0:	8a3b      	ldrh	r3, [r7, #16]
 80042b2:	3307      	adds	r3, #7
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da00      	bge.n	80042ba <DrawChar+0x52>
 80042b8:	3307      	adds	r3, #7
 80042ba:	10db      	asrs	r3, r3, #3
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	8a3b      	ldrh	r3, [r7, #16]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e076      	b.n	80043be <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80042d0:	8a3b      	ldrh	r3, [r7, #16]
 80042d2:	3307      	adds	r3, #7
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	da00      	bge.n	80042da <DrawChar+0x72>
 80042d8:	3307      	adds	r3, #7
 80042da:	10db      	asrs	r3, r3, #3
 80042dc:	461a      	mov	r2, r3
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	4413      	add	r3, r2
 80042e8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80042ea:	8a3b      	ldrh	r3, [r7, #16]
 80042ec:	3307      	adds	r3, #7
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da00      	bge.n	80042f4 <DrawChar+0x8c>
 80042f2:	3307      	adds	r3, #7
 80042f4:	10db      	asrs	r3, r3, #3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d002      	beq.n	8004300 <DrawChar+0x98>
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d004      	beq.n	8004308 <DrawChar+0xa0>
 80042fe:	e00c      	b.n	800431a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	617b      	str	r3, [r7, #20]
      break;
 8004306:	e016      	b.n	8004336 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	3201      	adds	r2, #1
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
      break;
 8004318:	e00d      	b.n	8004336 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	041a      	lsls	r2, r3, #16
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3301      	adds	r3, #1
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	4313      	orrs	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	3202      	adds	r2, #2
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
      break;
 8004334:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e036      	b.n	80043aa <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800433c:	8a3a      	ldrh	r2, [r7, #16]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	4413      	add	r3, r2
 8004346:	3b01      	subs	r3, #1
 8004348:	2201      	movs	r2, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	461a      	mov	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	b29a      	uxth	r2, r3
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	4413      	add	r3, r2
 8004360:	b298      	uxth	r0, r3
 8004362:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <DrawChar+0x168>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	491b      	ldr	r1, [pc, #108]	; (80043d4 <DrawChar+0x16c>)
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	88bb      	ldrh	r3, [r7, #4]
 8004376:	4619      	mov	r1, r3
 8004378:	f7ff fef6 	bl	8004168 <BSP_LCD_DrawPixel>
 800437c:	e012      	b.n	80043a4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	b29a      	uxth	r2, r3
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	4413      	add	r3, r2
 8004386:	b298      	uxth	r0, r3
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <DrawChar+0x168>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4911      	ldr	r1, [pc, #68]	; (80043d4 <DrawChar+0x16c>)
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3304      	adds	r3, #4
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	88bb      	ldrh	r3, [r7, #4]
 800439e:	4619      	mov	r1, r3
 80043a0:	f7ff fee2 	bl	8004168 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	8a3b      	ldrh	r3, [r7, #16]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3c4      	bcc.n	800433c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80043b2:	88bb      	ldrh	r3, [r7, #4]
 80043b4:	3301      	adds	r3, #1
 80043b6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	3301      	adds	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	8a7b      	ldrh	r3, [r7, #18]
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d384      	bcc.n	80042d0 <DrawChar+0x68>
  }
}
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20010c60 	.word	0x20010c60
 80043d4:	20010c64 	.word	0x20010c64

080043d8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80043e6:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <LL_FillBuffer+0x88>)
 80043e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80043ec:	605a      	str	r2, [r3, #4]
  if(hltdc.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <LL_FillBuffer+0x8c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <LL_FillBuffer+0x90>)
 80043f4:	2134      	movs	r1, #52	; 0x34
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	3348      	adds	r3, #72	; 0x48
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d103      	bne.n	800440c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <LL_FillBuffer+0x88>)
 8004406:	2202      	movs	r2, #2
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	e002      	b.n	8004412 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <LL_FillBuffer+0x88>)
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <LL_FillBuffer+0x88>)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <LL_FillBuffer+0x88>)
 800441a:	4a14      	ldr	r2, [pc, #80]	; (800446c <LL_FillBuffer+0x94>)
 800441c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 800441e:	4810      	ldr	r0, [pc, #64]	; (8004460 <LL_FillBuffer+0x88>)
 8004420:	f001 fcb8 	bl	8005d94 <HAL_DMA2D_Init>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d115      	bne.n	8004456 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK)
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	480c      	ldr	r0, [pc, #48]	; (8004460 <LL_FillBuffer+0x88>)
 800442e:	f001 fe0f 	bl	8006050 <HAL_DMA2D_ConfigLayer>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10e      	bne.n	8004456 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69f9      	ldr	r1, [r7, #28]
 8004442:	4807      	ldr	r0, [pc, #28]	; (8004460 <LL_FillBuffer+0x88>)
 8004444:	f001 fcf0 	bl	8005e28 <HAL_DMA2D_Start>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800444e:	210a      	movs	r1, #10
 8004450:	4803      	ldr	r0, [pc, #12]	; (8004460 <LL_FillBuffer+0x88>)
 8004452:	f001 fd14 	bl	8005e7e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004456:	bf00      	nop
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20010c20 	.word	0x20010c20
 8004464:	20010c60 	.word	0x20010c60
 8004468:	20000b9c 	.word	0x20000b9c
 800446c:	4002b000 	.word	0x4002b000

08004470 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	460a      	mov	r2, r1
 800447a:	80fb      	strh	r3, [r7, #6]
 800447c:	4613      	mov	r3, r2
 800447e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <BSP_TS_Init+0x68>)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800448a:	4a14      	ldr	r2, [pc, #80]	; (80044dc <BSP_TS_Init+0x6c>)
 800448c:	88bb      	ldrh	r3, [r7, #4]
 800448e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <BSP_TS_Init+0x70>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2070      	movs	r0, #112	; 0x70
 8004496:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <BSP_TS_Init+0x70>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2070      	movs	r0, #112	; 0x70
 800449e:	4798      	blx	r3
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b51      	cmp	r3, #81	; 0x51
 80044a4:	d111      	bne.n	80044ca <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <BSP_TS_Init+0x74>)
 80044a8:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <BSP_TS_Init+0x70>)
 80044aa:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <BSP_TS_Init+0x78>)
 80044ae:	2270      	movs	r2, #112	; 0x70
 80044b0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80044b2:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <BSP_TS_Init+0x7c>)
 80044b4:	2208      	movs	r2, #8
 80044b6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <BSP_TS_Init+0x74>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <BSP_TS_Init+0x78>)
 80044c0:	7812      	ldrb	r2, [r2, #0]
 80044c2:	b292      	uxth	r2, r2
 80044c4:	4610      	mov	r0, r2
 80044c6:	4798      	blx	r3
 80044c8:	e001      	b.n	80044ce <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80044ca:	2303      	movs	r3, #3
 80044cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20010c80 	.word	0x20010c80
 80044dc:	20010c82 	.word	0x20010c82
 80044e0:	200007e8 	.word	0x200007e8
 80044e4:	20010c7c 	.word	0x20010c7c
 80044e8:	20010c85 	.word	0x20010c85
 80044ec:	20010c84 	.word	0x20010c84

080044f0 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 80044f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044fa:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004500:	2302      	movs	r3, #2
 8004502:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004504:	4b0d      	ldr	r3, [pc, #52]	; (800453c <BSP_TS_ITConfig+0x4c>)
 8004506:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	4619      	mov	r1, r3
 800450c:	480c      	ldr	r0, [pc, #48]	; (8004540 <BSP_TS_ITConfig+0x50>)
 800450e:	f001 fecd 	bl	80062ac <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8004512:	2200      	movs	r2, #0
 8004514:	210f      	movs	r1, #15
 8004516:	2028      	movs	r0, #40	; 0x28
 8004518:	f000 ffed 	bl	80054f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800451c:	2028      	movs	r0, #40	; 0x28
 800451e:	f001 f806 	bl	800552e <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <BSP_TS_ITConfig+0x54>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	4a07      	ldr	r2, [pc, #28]	; (8004548 <BSP_TS_ITConfig+0x58>)
 800452a:	7812      	ldrb	r2, [r2, #0]
 800452c:	b292      	uxth	r2, r2
 800452e:	4610      	mov	r0, r2
 8004530:	4798      	blx	r3

  return TS_OK;  
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	10110000 	.word	0x10110000
 8004540:	40022000 	.word	0x40022000
 8004544:	20010c7c 	.word	0x20010c7c
 8004548:	20010c85 	.word	0x20010c85

0800454c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b097      	sub	sp, #92	; 0x5c
 8004550:	af02      	add	r7, sp, #8
 8004552:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004566:	4bb4      	ldr	r3, [pc, #720]	; (8004838 <BSP_TS_GetState+0x2ec>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	4ab3      	ldr	r2, [pc, #716]	; (800483c <BSP_TS_GetState+0x2f0>)
 800456e:	7812      	ldrb	r2, [r2, #0]
 8004570:	b292      	uxth	r2, r2
 8004572:	4610      	mov	r0, r2
 8004574:	4798      	blx	r3
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8196 	beq.w	80048b4 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004588:	2300      	movs	r3, #0
 800458a:	64bb      	str	r3, [r7, #72]	; 0x48
 800458c:	e185      	b.n	800489a <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800458e:	4baa      	ldr	r3, [pc, #680]	; (8004838 <BSP_TS_GetState+0x2ec>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	4aa9      	ldr	r2, [pc, #676]	; (800483c <BSP_TS_GetState+0x2f0>)
 8004596:	7812      	ldrb	r2, [r2, #0]
 8004598:	b290      	uxth	r0, r2
 800459a:	f107 0120 	add.w	r1, r7, #32
 800459e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045a0:	0052      	lsls	r2, r2, #1
 80045a2:	188c      	adds	r4, r1, r2
 80045a4:	f107 0114 	add.w	r1, r7, #20
 80045a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045aa:	0052      	lsls	r2, r2, #1
 80045ac:	440a      	add	r2, r1
 80045ae:	4621      	mov	r1, r4
 80045b0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80045b2:	4ba3      	ldr	r3, [pc, #652]	; (8004840 <BSP_TS_GetState+0x2f4>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d117      	bne.n	80045ea <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80045ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	3350      	adds	r3, #80	; 0x50
 80045c0:	443b      	add	r3, r7
 80045c2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80045c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	3350      	adds	r3, #80	; 0x50
 80045cc:	443b      	add	r3, r7
 80045ce:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80045d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	3350      	adds	r3, #80	; 0x50
 80045d8:	443b      	add	r3, r7
 80045da:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80045de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	3350      	adds	r3, #80	; 0x50
 80045e4:	443b      	add	r3, r7
 80045e6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80045ea:	4b95      	ldr	r3, [pc, #596]	; (8004840 <BSP_TS_GetState+0x2f4>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00e      	beq.n	8004614 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 80045f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	3350      	adds	r3, #80	; 0x50
 80045fc:	443b      	add	r3, r7
 80045fe:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004602:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004606:	b29a      	uxth	r2, r3
 8004608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	3350      	adds	r3, #80	; 0x50
 800460e:	443b      	add	r3, r7
 8004610:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004614:	4b8a      	ldr	r3, [pc, #552]	; (8004840 <BSP_TS_GetState+0x2f4>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00e      	beq.n	800463e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	3350      	adds	r3, #80	; 0x50
 8004626:	443b      	add	r3, r7
 8004628:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800462c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004630:	b29a      	uxth	r2, r3
 8004632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	3350      	adds	r3, #80	; 0x50
 8004638:	443b      	add	r3, r7
 800463a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800463e:	4b80      	ldr	r3, [pc, #512]	; (8004840 <BSP_TS_GetState+0x2f4>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d017      	beq.n	800467a <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800464a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	3350      	adds	r3, #80	; 0x50
 8004650:	443b      	add	r3, r7
 8004652:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	3350      	adds	r3, #80	; 0x50
 800465c:	443b      	add	r3, r7
 800465e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	3350      	adds	r3, #80	; 0x50
 8004668:	443b      	add	r3, r7
 800466a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800466e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	3350      	adds	r3, #80	; 0x50
 8004674:	443b      	add	r3, r7
 8004676:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800467a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	3350      	adds	r3, #80	; 0x50
 8004680:	443b      	add	r3, r7
 8004682:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004686:	4619      	mov	r1, r3
 8004688:	4a6e      	ldr	r2, [pc, #440]	; (8004844 <BSP_TS_GetState+0x2f8>)
 800468a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004690:	4299      	cmp	r1, r3
 8004692:	d90d      	bls.n	80046b0 <BSP_TS_GetState+0x164>
 8004694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	3350      	adds	r3, #80	; 0x50
 800469a:	443b      	add	r3, r7
 800469c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80046a0:	4968      	ldr	r1, [pc, #416]	; (8004844 <BSP_TS_GetState+0x2f8>)
 80046a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	e00c      	b.n	80046ca <BSP_TS_GetState+0x17e>
 80046b0:	4a64      	ldr	r2, [pc, #400]	; (8004844 <BSP_TS_GetState+0x2f8>)
 80046b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	3350      	adds	r3, #80	; 0x50
 80046c0:	443b      	add	r3, r7
 80046c2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80046ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	3350      	adds	r3, #80	; 0x50
 80046d4:	443b      	add	r3, r7
 80046d6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80046da:	4619      	mov	r1, r3
 80046dc:	4a5a      	ldr	r2, [pc, #360]	; (8004848 <BSP_TS_GetState+0x2fc>)
 80046de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e4:	4299      	cmp	r1, r3
 80046e6:	d90d      	bls.n	8004704 <BSP_TS_GetState+0x1b8>
 80046e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	3350      	adds	r3, #80	; 0x50
 80046ee:	443b      	add	r3, r7
 80046f0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80046f4:	4954      	ldr	r1, [pc, #336]	; (8004848 <BSP_TS_GetState+0x2fc>)
 80046f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	b29b      	uxth	r3, r3
 8004702:	e00c      	b.n	800471e <BSP_TS_GetState+0x1d2>
 8004704:	4a50      	ldr	r2, [pc, #320]	; (8004848 <BSP_TS_GetState+0x2fc>)
 8004706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470c:	b29a      	uxth	r2, r3
 800470e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	3350      	adds	r3, #80	; 0x50
 8004714:	443b      	add	r3, r7
 8004716:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	b29b      	uxth	r3, r3
 800471e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004722:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004726:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800472a:	4413      	add	r3, r2
 800472c:	2b05      	cmp	r3, #5
 800472e:	dd15      	ble.n	800475c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8004730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	3350      	adds	r3, #80	; 0x50
 8004736:	443b      	add	r3, r7
 8004738:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800473c:	4619      	mov	r1, r3
 800473e:	4a41      	ldr	r2, [pc, #260]	; (8004844 <BSP_TS_GetState+0x2f8>)
 8004740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	3350      	adds	r3, #80	; 0x50
 800474c:	443b      	add	r3, r7
 800474e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004752:	4619      	mov	r1, r3
 8004754:	4a3c      	ldr	r2, [pc, #240]	; (8004848 <BSP_TS_GetState+0x2fc>)
 8004756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004758:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800475c:	4b37      	ldr	r3, [pc, #220]	; (800483c <BSP_TS_GetState+0x2f0>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b70      	cmp	r3, #112	; 0x70
 8004762:	d119      	bne.n	8004798 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	3350      	adds	r3, #80	; 0x50
 800476a:	443b      	add	r3, r7
 800476c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	4413      	add	r3, r2
 8004778:	460a      	mov	r2, r1
 800477a:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800477c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	3350      	adds	r3, #80	; 0x50
 8004782:	443b      	add	r3, r7
 8004784:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478c:	3304      	adds	r3, #4
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	460a      	mov	r2, r1
 8004794:	809a      	strh	r2, [r3, #4]
 8004796:	e022      	b.n	80047de <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004798:	4b2c      	ldr	r3, [pc, #176]	; (800484c <BSP_TS_GetState+0x300>)
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	4619      	mov	r1, r3
 800479e:	4a29      	ldr	r2, [pc, #164]	; (8004844 <BSP_TS_GetState+0x2f8>)
 80047a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	0b1b      	lsrs	r3, r3, #12
 80047ac:	b299      	uxth	r1, r3
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	4413      	add	r3, r2
 80047b6:	460a      	mov	r2, r1
 80047b8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80047ba:	4b25      	ldr	r3, [pc, #148]	; (8004850 <BSP_TS_GetState+0x304>)
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	4619      	mov	r1, r3
 80047c0:	4a21      	ldr	r2, [pc, #132]	; (8004848 <BSP_TS_GetState+0x2fc>)
 80047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	0b1b      	lsrs	r3, r3, #12
 80047ce:	b299      	uxth	r1, r3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d4:	3304      	adds	r3, #4
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4413      	add	r3, r2
 80047da:	460a      	mov	r2, r1
 80047dc:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80047de:	4b17      	ldr	r3, [pc, #92]	; (800483c <BSP_TS_GetState+0x2f0>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b298      	uxth	r0, r3
 80047e4:	f107 010c 	add.w	r1, r7, #12
 80047e8:	f107 0210 	add.w	r2, r7, #16
 80047ec:	f107 0308 	add.w	r3, r7, #8
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	460b      	mov	r3, r1
 80047f4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80047f6:	f7fe fe97 	bl	8003528 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	b2d9      	uxtb	r1, r3
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004802:	4413      	add	r3, r2
 8004804:	3316      	adds	r3, #22
 8004806:	460a      	mov	r2, r1
 8004808:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	b2d9      	uxtb	r1, r3
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004812:	4413      	add	r3, r2
 8004814:	3320      	adds	r3, #32
 8004816:	460a      	mov	r2, r1
 8004818:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d835      	bhi.n	800488c <BSP_TS_GetState+0x340>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <BSP_TS_GetState+0x2dc>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	08004855 	.word	0x08004855
 800482c:	08004863 	.word	0x08004863
 8004830:	08004871 	.word	0x08004871
 8004834:	0800487f 	.word	0x0800487f
 8004838:	20010c7c 	.word	0x20010c7c
 800483c:	20010c85 	.word	0x20010c85
 8004840:	20010c84 	.word	0x20010c84
 8004844:	20010c88 	.word	0x20010c88
 8004848:	20010c9c 	.word	0x20010c9c
 800484c:	20010c80 	.word	0x20010c80
 8004850:	20010c82 	.word	0x20010c82
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004858:	4413      	add	r3, r2
 800485a:	331b      	adds	r3, #27
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
          break;
 8004860:	e018      	b.n	8004894 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004866:	4413      	add	r3, r2
 8004868:	331b      	adds	r3, #27
 800486a:	2202      	movs	r2, #2
 800486c:	701a      	strb	r2, [r3, #0]
          break;
 800486e:	e011      	b.n	8004894 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004874:	4413      	add	r3, r2
 8004876:	331b      	adds	r3, #27
 8004878:	2203      	movs	r2, #3
 800487a:	701a      	strb	r2, [r3, #0]
          break;
 800487c:	e00a      	b.n	8004894 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004882:	4413      	add	r3, r2
 8004884:	331b      	adds	r3, #27
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
          break;
 800488a:	e003      	b.n	8004894 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004892:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004896:	3301      	adds	r3, #1
 8004898:	64bb      	str	r3, [r7, #72]	; 0x48
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a2:	4293      	cmp	r3, r2
 80048a4:	f4ff ae73 	bcc.w	800458e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f809 	bl	80048c0 <BSP_TS_Get_GestureId>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80048b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3754      	adds	r7, #84	; 0x54
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}

080048c0 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80048d0:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <BSP_TS_Get_GestureId+0x100>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f107 0208 	add.w	r2, r7, #8
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe fe0a 	bl	80034f6 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b49      	cmp	r3, #73	; 0x49
 80048e6:	d05e      	beq.n	80049a6 <BSP_TS_Get_GestureId+0xe6>
 80048e8:	2b49      	cmp	r3, #73	; 0x49
 80048ea:	d860      	bhi.n	80049ae <BSP_TS_Get_GestureId+0xee>
 80048ec:	2b1c      	cmp	r3, #28
 80048ee:	d83f      	bhi.n	8004970 <BSP_TS_Get_GestureId+0xb0>
 80048f0:	2b1c      	cmp	r3, #28
 80048f2:	d85c      	bhi.n	80049ae <BSP_TS_Get_GestureId+0xee>
 80048f4:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <BSP_TS_Get_GestureId+0x3c>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	08004977 	.word	0x08004977
 8004900:	080049af 	.word	0x080049af
 8004904:	080049af 	.word	0x080049af
 8004908:	080049af 	.word	0x080049af
 800490c:	080049af 	.word	0x080049af
 8004910:	080049af 	.word	0x080049af
 8004914:	080049af 	.word	0x080049af
 8004918:	080049af 	.word	0x080049af
 800491c:	080049af 	.word	0x080049af
 8004920:	080049af 	.word	0x080049af
 8004924:	080049af 	.word	0x080049af
 8004928:	080049af 	.word	0x080049af
 800492c:	080049af 	.word	0x080049af
 8004930:	080049af 	.word	0x080049af
 8004934:	080049af 	.word	0x080049af
 8004938:	080049af 	.word	0x080049af
 800493c:	0800497f 	.word	0x0800497f
 8004940:	080049af 	.word	0x080049af
 8004944:	080049af 	.word	0x080049af
 8004948:	080049af 	.word	0x080049af
 800494c:	08004987 	.word	0x08004987
 8004950:	080049af 	.word	0x080049af
 8004954:	080049af 	.word	0x080049af
 8004958:	080049af 	.word	0x080049af
 800495c:	0800498f 	.word	0x0800498f
 8004960:	080049af 	.word	0x080049af
 8004964:	080049af 	.word	0x080049af
 8004968:	080049af 	.word	0x080049af
 800496c:	08004997 	.word	0x08004997
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d014      	beq.n	800499e <BSP_TS_Get_GestureId+0xde>
 8004974:	e01b      	b.n	80049ae <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800497c:	e01a      	b.n	80049b4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004984:	e016      	b.n	80049b4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800498c:	e012      	b.n	80049b4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2203      	movs	r2, #3
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004994:	e00e      	b.n	80049b4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2204      	movs	r2, #4
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800499c:	e00a      	b.n	80049b4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2205      	movs	r2, #5
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80049a4:	e006      	b.n	80049b4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2206      	movs	r2, #6
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80049ac:	e002      	b.n	80049b4 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
      break;
 80049b2:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20010c85 	.word	0x20010c85

080049c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049c8:	2003      	movs	r0, #3
 80049ca:	f000 fd89 	bl	80054e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049ce:	2003      	movs	r0, #3
 80049d0:	f000 f806 	bl	80049e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80049d4:	f7fd fd92 	bl	80024fc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049e8:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <HAL_InitTick+0x54>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <HAL_InitTick+0x58>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fdb1 	bl	8005566 <HAL_SYSTICK_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e00e      	b.n	8004a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b0f      	cmp	r3, #15
 8004a12:	d80a      	bhi.n	8004a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a14:	2200      	movs	r2, #0
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	f000 fd6b 	bl	80054f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a20:	4a06      	ldr	r2, [pc, #24]	; (8004a3c <HAL_InitTick+0x5c>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	200007e4 	.word	0x200007e4
 8004a38:	20000824 	.word	0x20000824
 8004a3c:	20000820 	.word	0x20000820

08004a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_IncTick+0x20>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_IncTick+0x24>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4413      	add	r3, r2
 8004a50:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <HAL_IncTick+0x24>)
 8004a52:	6013      	str	r3, [r2, #0]
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000824 	.word	0x20000824
 8004a64:	20010cb0 	.word	0x20010cb0

08004a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <HAL_GetTick+0x14>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20010cb0 	.word	0x20010cb0

08004a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a88:	f7ff ffee 	bl	8004a68 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d005      	beq.n	8004aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <HAL_Delay+0x44>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004aa6:	bf00      	nop
 8004aa8:	f7ff ffde 	bl	8004a68 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d8f7      	bhi.n	8004aa8 <HAL_Delay+0x28>
  {
  }
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000824 	.word	0x20000824

08004ac8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e031      	b.n	8004b42 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fd fd2c 	bl	8002544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d116      	bne.n	8004b34 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_ADC_Init+0x84>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	f043 0202 	orr.w	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa72 	bl	8005000 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
 8004b32:	e001      	b.n	8004b38 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	ffffeefd 	.word	0xffffeefd

08004b50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_ADC_Start_DMA+0x1e>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e0d4      	b.n	8004d18 <HAL_ADC_Start_DMA+0x1c8>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d018      	beq.n	8004bb6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004b94:	4b62      	ldr	r3, [pc, #392]	; (8004d20 <HAL_ADC_Start_DMA+0x1d0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a62      	ldr	r2, [pc, #392]	; (8004d24 <HAL_ADC_Start_DMA+0x1d4>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	0c9a      	lsrs	r2, r3, #18
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	4413      	add	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004ba8:	e002      	b.n	8004bb0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f9      	bne.n	8004baa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f040 809c 	bne.w	8004cfe <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bca:	4b57      	ldr	r3, [pc, #348]	; (8004d28 <HAL_ADC_Start_DMA+0x1d8>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c00:	d106      	bne.n	8004c10 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	f023 0206 	bic.w	r2, r3, #6
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
 8004c0e:	e002      	b.n	8004c16 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	4a42      	ldr	r2, [pc, #264]	; (8004d2c <HAL_ADC_Start_DMA+0x1dc>)
 8004c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	4a41      	ldr	r2, [pc, #260]	; (8004d30 <HAL_ADC_Start_DMA+0x1e0>)
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	4a40      	ldr	r2, [pc, #256]	; (8004d34 <HAL_ADC_Start_DMA+0x1e4>)
 8004c34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004c4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	334c      	adds	r3, #76	; 0x4c
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f000 fd34 	bl	80056dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004c74:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <HAL_ADC_Start_DMA+0x1e8>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d143      	bne.n	8004d16 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c9c:	609a      	str	r2, [r3, #8]
 8004c9e:	e03a      	b.n	8004d16 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <HAL_ADC_Start_DMA+0x1ec>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_ADC_Start_DMA+0x178>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004cc6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <HAL_ADC_Start_DMA+0x1e8>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d120      	bne.n	8004d16 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_ADC_Start_DMA+0x1f0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d11b      	bne.n	8004d16 <HAL_ADC_Start_DMA+0x1c6>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d114      	bne.n	8004d16 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	e00b      	b.n	8004d16 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	f043 0210 	orr.w	r2, r3, #16
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	200007e4 	.word	0x200007e4
 8004d24:	431bde83 	.word	0x431bde83
 8004d28:	fffff8fe 	.word	0xfffff8fe
 8004d2c:	080051f5 	.word	0x080051f5
 8004d30:	080052af 	.word	0x080052af
 8004d34:	080052cb 	.word	0x080052cb
 8004d38:	40012300 	.word	0x40012300
 8004d3c:	40012000 	.word	0x40012000
 8004d40:	40012200 	.word	0x40012200

08004d44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x1c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e12a      	b.n	8004fde <HAL_ADC_ConfigChannel+0x272>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b09      	cmp	r3, #9
 8004d96:	d93a      	bls.n	8004e0e <HAL_ADC_ConfigChannel+0xa2>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004da0:	d035      	beq.n	8004e0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68d9      	ldr	r1, [r3, #12]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	4613      	mov	r3, r2
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4413      	add	r3, r2
 8004db6:	3b1e      	subs	r3, #30
 8004db8:	2207      	movs	r2, #7
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43da      	mvns	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	400a      	ands	r2, r1
 8004dc6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a87      	ldr	r2, [pc, #540]	; (8004fec <HAL_ADC_ConfigChannel+0x280>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10a      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68d9      	ldr	r1, [r3, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	061a      	lsls	r2, r3, #24
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004de6:	e035      	b.n	8004e54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68d9      	ldr	r1, [r3, #12]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4618      	mov	r0, r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4403      	add	r3, r0
 8004e00:	3b1e      	subs	r3, #30
 8004e02:	409a      	lsls	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e0c:	e022      	b.n	8004e54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6919      	ldr	r1, [r3, #16]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	2207      	movs	r2, #7
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	400a      	ands	r2, r1
 8004e30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6919      	ldr	r1, [r3, #16]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	4618      	mov	r0, r3
 8004e44:	4603      	mov	r3, r0
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4403      	add	r3, r0
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b06      	cmp	r3, #6
 8004e5a:	d824      	bhi.n	8004ea6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3b05      	subs	r3, #5
 8004e6e:	221f      	movs	r2, #31
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43da      	mvns	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	3b05      	subs	r3, #5
 8004e98:	fa00 f203 	lsl.w	r2, r0, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	635a      	str	r2, [r3, #52]	; 0x34
 8004ea4:	e04c      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b0c      	cmp	r3, #12
 8004eac:	d824      	bhi.n	8004ef8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3b23      	subs	r3, #35	; 0x23
 8004ec0:	221f      	movs	r2, #31
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43da      	mvns	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	400a      	ands	r2, r1
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4618      	mov	r0, r3
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3b23      	subs	r3, #35	; 0x23
 8004eea:	fa00 f203 	lsl.w	r2, r0, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ef6:	e023      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	3b41      	subs	r3, #65	; 0x41
 8004f0a:	221f      	movs	r2, #31
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	43da      	mvns	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	400a      	ands	r2, r1
 8004f18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	4618      	mov	r0, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	3b41      	subs	r3, #65	; 0x41
 8004f34:	fa00 f203 	lsl.w	r2, r0, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a2a      	ldr	r2, [pc, #168]	; (8004ff0 <HAL_ADC_ConfigChannel+0x284>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10a      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1f4>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f52:	d105      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004f54:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <HAL_ADC_ConfigChannel+0x288>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	4a26      	ldr	r2, [pc, #152]	; (8004ff4 <HAL_ADC_ConfigChannel+0x288>)
 8004f5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004f5e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a22      	ldr	r2, [pc, #136]	; (8004ff0 <HAL_ADC_ConfigChannel+0x284>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d109      	bne.n	8004f7e <HAL_ADC_ConfigChannel+0x212>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b12      	cmp	r3, #18
 8004f70:	d105      	bne.n	8004f7e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004f72:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <HAL_ADC_ConfigChannel+0x288>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <HAL_ADC_ConfigChannel+0x288>)
 8004f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f7c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <HAL_ADC_ConfigChannel+0x284>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d125      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x268>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a17      	ldr	r2, [pc, #92]	; (8004fec <HAL_ADC_ConfigChannel+0x280>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <HAL_ADC_ConfigChannel+0x22e>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b11      	cmp	r3, #17
 8004f98:	d11c      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004f9a:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <HAL_ADC_ConfigChannel+0x288>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4a15      	ldr	r2, [pc, #84]	; (8004ff4 <HAL_ADC_ConfigChannel+0x288>)
 8004fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fa4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a10      	ldr	r2, [pc, #64]	; (8004fec <HAL_ADC_ConfigChannel+0x280>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d111      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004fb0:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <HAL_ADC_ConfigChannel+0x28c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <HAL_ADC_ConfigChannel+0x290>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	0c9a      	lsrs	r2, r3, #18
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004fc6:	e002      	b.n	8004fce <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f9      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	10000012 	.word	0x10000012
 8004ff0:	40012000 	.word	0x40012000
 8004ff4:	40012300 	.word	0x40012300
 8004ff8:	200007e4 	.word	0x200007e4
 8004ffc:	431bde83 	.word	0x431bde83

08005000 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005008:	4b78      	ldr	r3, [pc, #480]	; (80051ec <ADC_Init+0x1ec>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4a77      	ldr	r2, [pc, #476]	; (80051ec <ADC_Init+0x1ec>)
 800500e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005012:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005014:	4b75      	ldr	r3, [pc, #468]	; (80051ec <ADC_Init+0x1ec>)
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4973      	ldr	r1, [pc, #460]	; (80051ec <ADC_Init+0x1ec>)
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6859      	ldr	r1, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	021a      	lsls	r2, r3, #8
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6859      	ldr	r1, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6899      	ldr	r1, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	4a58      	ldr	r2, [pc, #352]	; (80051f0 <ADC_Init+0x1f0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d022      	beq.n	80050da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6899      	ldr	r1, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6899      	ldr	r1, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	e00f      	b.n	80050fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0202 	bic.w	r2, r2, #2
 8005108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6899      	ldr	r1, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	005a      	lsls	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01b      	beq.n	8005160 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005136:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	3b01      	subs	r3, #1
 8005154:	035a      	lsls	r2, r3, #13
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	e007      	b.n	8005170 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800516e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800517e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	3b01      	subs	r3, #1
 800518c:	051a      	lsls	r2, r3, #20
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6899      	ldr	r1, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051b2:	025a      	lsls	r2, r3, #9
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	029a      	lsls	r2, r3, #10
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012300 	.word	0x40012300
 80051f0:	0f000001 	.word	0x0f000001

080051f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800520a:	2b00      	cmp	r3, #0
 800520c:	d13c      	bne.n	8005288 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d12b      	bne.n	8005280 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800522c:	2b00      	cmp	r3, #0
 800522e:	d127      	bne.n	8005280 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005248:	2b00      	cmp	r3, #0
 800524a:	d119      	bne.n	8005280 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0220 	bic.w	r2, r2, #32
 800525a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f043 0201 	orr.w	r2, r3, #1
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7fc f86b 	bl	800135c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005286:	e00e      	b.n	80052a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff fd5f 	bl	8004d58 <HAL_ADC_ErrorCallback>
}
 800529a:	e004      	b.n	80052a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff fd41 	bl	8004d44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2240      	movs	r2, #64	; 0x40
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	f043 0204 	orr.w	r2, r3, #4
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f7ff fd34 	bl	8004d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <__NVIC_SetPriorityGrouping>:
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <__NVIC_SetPriorityGrouping+0x40>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005314:	4013      	ands	r3, r2
 8005316:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <__NVIC_SetPriorityGrouping+0x44>)
 8005322:	4313      	orrs	r3, r2
 8005324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005326:	4a04      	ldr	r2, [pc, #16]	; (8005338 <__NVIC_SetPriorityGrouping+0x40>)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	60d3      	str	r3, [r2, #12]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000ed00 	.word	0xe000ed00
 800533c:	05fa0000 	.word	0x05fa0000

08005340 <__NVIC_GetPriorityGrouping>:
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005344:	4b04      	ldr	r3, [pc, #16]	; (8005358 <__NVIC_GetPriorityGrouping+0x18>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	f003 0307 	and.w	r3, r3, #7
}
 800534e:	4618      	mov	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	e000ed00 	.word	0xe000ed00

0800535c <__NVIC_EnableIRQ>:
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536a:	2b00      	cmp	r3, #0
 800536c:	db0b      	blt.n	8005386 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	f003 021f 	and.w	r2, r3, #31
 8005374:	4907      	ldr	r1, [pc, #28]	; (8005394 <__NVIC_EnableIRQ+0x38>)
 8005376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	2001      	movs	r0, #1
 800537e:	fa00 f202 	lsl.w	r2, r0, r2
 8005382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	e000e100 	.word	0xe000e100

08005398 <__NVIC_DisableIRQ>:
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	db12      	blt.n	80053d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	f003 021f 	and.w	r2, r3, #31
 80053b0:	490a      	ldr	r1, [pc, #40]	; (80053dc <__NVIC_DisableIRQ+0x44>)
 80053b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	2001      	movs	r0, #1
 80053ba:	fa00 f202 	lsl.w	r2, r0, r2
 80053be:	3320      	adds	r3, #32
 80053c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80053c4:	f3bf 8f4f 	dsb	sy
}
 80053c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80053ca:	f3bf 8f6f 	isb	sy
}
 80053ce:	bf00      	nop
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	e000e100 	.word	0xe000e100

080053e0 <__NVIC_SetPriority>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	6039      	str	r1, [r7, #0]
 80053ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	db0a      	blt.n	800540a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	490c      	ldr	r1, [pc, #48]	; (800542c <__NVIC_SetPriority+0x4c>)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	0112      	lsls	r2, r2, #4
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	440b      	add	r3, r1
 8005404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005408:	e00a      	b.n	8005420 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	4908      	ldr	r1, [pc, #32]	; (8005430 <__NVIC_SetPriority+0x50>)
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	3b04      	subs	r3, #4
 8005418:	0112      	lsls	r2, r2, #4
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	440b      	add	r3, r1
 800541e:	761a      	strb	r2, [r3, #24]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	e000e100 	.word	0xe000e100
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <NVIC_EncodePriority>:
{
 8005434:	b480      	push	{r7}
 8005436:	b089      	sub	sp, #36	; 0x24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f1c3 0307 	rsb	r3, r3, #7
 800544e:	2b04      	cmp	r3, #4
 8005450:	bf28      	it	cs
 8005452:	2304      	movcs	r3, #4
 8005454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3304      	adds	r3, #4
 800545a:	2b06      	cmp	r3, #6
 800545c:	d902      	bls.n	8005464 <NVIC_EncodePriority+0x30>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	3b03      	subs	r3, #3
 8005462:	e000      	b.n	8005466 <NVIC_EncodePriority+0x32>
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005468:	f04f 32ff 	mov.w	r2, #4294967295
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43da      	mvns	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	401a      	ands	r2, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800547c:	f04f 31ff 	mov.w	r1, #4294967295
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	43d9      	mvns	r1, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800548c:	4313      	orrs	r3, r2
}
 800548e:	4618      	mov	r0, r3
 8005490:	3724      	adds	r7, #36	; 0x24
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054ac:	d301      	bcc.n	80054b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054ae:	2301      	movs	r3, #1
 80054b0:	e00f      	b.n	80054d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <SysTick_Config+0x40>)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ba:	210f      	movs	r1, #15
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295
 80054c0:	f7ff ff8e 	bl	80053e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <SysTick_Config+0x40>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ca:	4b04      	ldr	r3, [pc, #16]	; (80054dc <SysTick_Config+0x40>)
 80054cc:	2207      	movs	r2, #7
 80054ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	e000e010 	.word	0xe000e010

080054e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ff05 	bl	80052f8 <__NVIC_SetPriorityGrouping>
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b086      	sub	sp, #24
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	4603      	mov	r3, r0
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005508:	f7ff ff1a 	bl	8005340 <__NVIC_GetPriorityGrouping>
 800550c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	6978      	ldr	r0, [r7, #20]
 8005514:	f7ff ff8e 	bl	8005434 <NVIC_EncodePriority>
 8005518:	4602      	mov	r2, r0
 800551a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800551e:	4611      	mov	r1, r2
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ff5d 	bl	80053e0 <__NVIC_SetPriority>
}
 8005526:	bf00      	nop
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	4603      	mov	r3, r0
 8005536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff ff0d 	bl	800535c <__NVIC_EnableIRQ>
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	4603      	mov	r3, r0
 8005552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ff1d 	bl	8005398 <__NVIC_DisableIRQ>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff ff94 	bl	800549c <SysTick_Config>
 8005574:	4603      	mov	r3, r0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800558c:	f7ff fa6c 	bl	8004a68 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e099      	b.n	80056d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055bc:	e00f      	b.n	80055de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055be:	f7ff fa53 	bl	8004a68 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	d908      	bls.n	80055de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2203      	movs	r2, #3
 80055d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e078      	b.n	80056d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e8      	bne.n	80055be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4b38      	ldr	r3, [pc, #224]	; (80056d8 <HAL_DMA_Init+0x158>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800560a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b04      	cmp	r3, #4
 8005636:	d107      	bne.n	8005648 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	4313      	orrs	r3, r2
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0307 	bic.w	r3, r3, #7
 800565e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2b04      	cmp	r3, #4
 8005670:	d117      	bne.n	80056a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00e      	beq.n	80056a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fb09 	bl	8005c9c <DMA_CheckFifoParam>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2240      	movs	r2, #64	; 0x40
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800569e:	2301      	movs	r3, #1
 80056a0:	e016      	b.n	80056d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fac0 	bl	8005c30 <DMA_CalcBaseAndBitshift>
 80056b0:	4603      	mov	r3, r0
 80056b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b8:	223f      	movs	r2, #63	; 0x3f
 80056ba:	409a      	lsls	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	f010803f 	.word	0xf010803f

080056dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_DMA_Start_IT+0x26>
 80056fe:	2302      	movs	r3, #2
 8005700:	e048      	b.n	8005794 <HAL_DMA_Start_IT+0xb8>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	d137      	bne.n	8005786 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fa52 	bl	8005bd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	223f      	movs	r2, #63	; 0x3f
 8005736:	409a      	lsls	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0216 	orr.w	r2, r2, #22
 800574a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800575a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0208 	orr.w	r2, r2, #8
 8005772:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e005      	b.n	8005792 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800578e:	2302      	movs	r3, #2
 8005790:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057aa:	f7ff f95d 	bl	8004a68 <HAL_GetTick>
 80057ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d008      	beq.n	80057ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2280      	movs	r2, #128	; 0x80
 80057c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e052      	b.n	8005874 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0216 	bic.w	r2, r2, #22
 80057dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <HAL_DMA_Abort+0x62>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0208 	bic.w	r2, r2, #8
 800580c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800581e:	e013      	b.n	8005848 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005820:	f7ff f922 	bl	8004a68 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b05      	cmp	r3, #5
 800582c:	d90c      	bls.n	8005848 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2203      	movs	r2, #3
 8005840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e015      	b.n	8005874 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e4      	bne.n	8005820 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585a:	223f      	movs	r2, #63	; 0x3f
 800585c:	409a      	lsls	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d004      	beq.n	800589a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2280      	movs	r2, #128	; 0x80
 8005894:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e00c      	b.n	80058b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2205      	movs	r2, #5
 800589e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80058cc:	4b8e      	ldr	r3, [pc, #568]	; (8005b08 <HAL_DMA_IRQHandler+0x248>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a8e      	ldr	r2, [pc, #568]	; (8005b0c <HAL_DMA_IRQHandler+0x24c>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	0a9b      	lsrs	r3, r3, #10
 80058d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ea:	2208      	movs	r2, #8
 80058ec:	409a      	lsls	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01a      	beq.n	800592c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d013      	beq.n	800592c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0204 	bic.w	r2, r2, #4
 8005912:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	2208      	movs	r2, #8
 800591a:	409a      	lsls	r2, r3
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005924:	f043 0201 	orr.w	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005930:	2201      	movs	r2, #1
 8005932:	409a      	lsls	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d012      	beq.n	8005962 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594e:	2201      	movs	r2, #1
 8005950:	409a      	lsls	r2, r3
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595a:	f043 0202 	orr.w	r2, r3, #2
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005966:	2204      	movs	r2, #4
 8005968:	409a      	lsls	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d012      	beq.n	8005998 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	2204      	movs	r2, #4
 8005986:	409a      	lsls	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005990:	f043 0204 	orr.w	r2, r3, #4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599c:	2210      	movs	r2, #16
 800599e:	409a      	lsls	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d043      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d03c      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ba:	2210      	movs	r2, #16
 80059bc:	409a      	lsls	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d018      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d108      	bne.n	80059f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d024      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	4798      	blx	r3
 80059ee:	e01f      	b.n	8005a30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01b      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	4798      	blx	r3
 8005a00:	e016      	b.n	8005a30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d107      	bne.n	8005a20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0208 	bic.w	r2, r2, #8
 8005a1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	2220      	movs	r2, #32
 8005a36:	409a      	lsls	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 808f 	beq.w	8005b60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8087 	beq.w	8005b60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a56:	2220      	movs	r2, #32
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d136      	bne.n	8005ad8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0216 	bic.w	r2, r2, #22
 8005a78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d103      	bne.n	8005a9a <HAL_DMA_IRQHandler+0x1da>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0208 	bic.w	r2, r2, #8
 8005aa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	223f      	movs	r2, #63	; 0x3f
 8005ab0:	409a      	lsls	r2, r3
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d07e      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	4798      	blx	r3
        }
        return;
 8005ad6:	e079      	b.n	8005bcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01d      	beq.n	8005b22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10d      	bne.n	8005b10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d031      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
 8005b04:	e02c      	b.n	8005b60 <HAL_DMA_IRQHandler+0x2a0>
 8005b06:	bf00      	nop
 8005b08:	200007e4 	.word	0x200007e4
 8005b0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d023      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
 8005b20:	e01e      	b.n	8005b60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10f      	bne.n	8005b50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0210 	bic.w	r2, r2, #16
 8005b3e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d032      	beq.n	8005bce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d022      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2205      	movs	r2, #5
 8005b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d307      	bcc.n	8005ba8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f2      	bne.n	8005b8c <HAL_DMA_IRQHandler+0x2cc>
 8005ba6:	e000      	b.n	8005baa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ba8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
 8005bca:	e000      	b.n	8005bce <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bcc:	bf00      	nop
    }
  }
}
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b40      	cmp	r3, #64	; 0x40
 8005c00:	d108      	bne.n	8005c14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c12:	e007      	b.n	8005c24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	60da      	str	r2, [r3, #12]
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	3b10      	subs	r3, #16
 8005c40:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <DMA_CalcBaseAndBitshift+0x60>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	091b      	lsrs	r3, r3, #4
 8005c48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c4a:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <DMA_CalcBaseAndBitshift+0x64>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d908      	bls.n	8005c70 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <DMA_CalcBaseAndBitshift+0x68>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	659a      	str	r2, [r3, #88]	; 0x58
 8005c6e:	e006      	b.n	8005c7e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <DMA_CalcBaseAndBitshift+0x68>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	aaaaaaab 	.word	0xaaaaaaab
 8005c94:	08010708 	.word	0x08010708
 8005c98:	fffffc00 	.word	0xfffffc00

08005c9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11f      	bne.n	8005cf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d856      	bhi.n	8005d6a <DMA_CheckFifoParam+0xce>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <DMA_CheckFifoParam+0x28>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005ce7 	.word	0x08005ce7
 8005ccc:	08005cd5 	.word	0x08005cd5
 8005cd0:	08005d6b 	.word	0x08005d6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d046      	beq.n	8005d6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce4:	e043      	b.n	8005d6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cee:	d140      	bne.n	8005d72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf4:	e03d      	b.n	8005d72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfe:	d121      	bne.n	8005d44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d837      	bhi.n	8005d76 <DMA_CheckFifoParam+0xda>
 8005d06:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <DMA_CheckFifoParam+0x70>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d1d 	.word	0x08005d1d
 8005d10:	08005d23 	.word	0x08005d23
 8005d14:	08005d1d 	.word	0x08005d1d
 8005d18:	08005d35 	.word	0x08005d35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d20:	e030      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d025      	beq.n	8005d7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d32:	e022      	b.n	8005d7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d3c:	d11f      	bne.n	8005d7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d42:	e01c      	b.n	8005d7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d903      	bls.n	8005d52 <DMA_CheckFifoParam+0xb6>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d003      	beq.n	8005d58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d50:	e018      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]
      break;
 8005d56:	e015      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
      break;
 8005d68:	e00b      	b.n	8005d82 <DMA_CheckFifoParam+0xe6>
      break;
 8005d6a:	bf00      	nop
 8005d6c:	e00a      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d6e:	bf00      	nop
 8005d70:	e008      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d72:	bf00      	nop
 8005d74:	e006      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d76:	bf00      	nop
 8005d78:	e004      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d7a:	bf00      	nop
 8005d7c:	e002      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d82:	bf00      	nop
    }
  } 
  
  return status; 
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop

08005d94 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e039      	b.n	8005e1a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc fc9a 	bl	80026f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de4:	f023 0107 	bic.w	r1, r3, #7
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <HAL_DMA2D_Init+0x90>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68d1      	ldr	r1, [r2, #12]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	430b      	orrs	r3, r1
 8005e08:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	ffffc000 	.word	0xffffc000

08005e28 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_DMA2D_Start+0x1c>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e018      	b.n	8005e76 <HAL_DMA2D_Start+0x4e>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f988 	bl	8006174 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b086      	sub	sp, #24
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d056      	beq.n	8005f48 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e9a:	f7fe fde5 	bl	8004a68 <HAL_GetTick>
 8005e9e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ea0:	e04b      	b.n	8005f3a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d023      	beq.n	8005efc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	f043 0202 	orr.w	r2, r3, #2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed8:	f043 0201 	orr.w	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2221      	movs	r2, #33	; 0x21
 8005ee6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2204      	movs	r2, #4
 8005eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0a5      	b.n	8006048 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d01a      	beq.n	8005f3a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f04:	f7fe fdb0 	bl	8004a68 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d302      	bcc.n	8005f1a <HAL_DMA2D_PollForTransfer+0x9c>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1e:	f043 0220 	orr.w	r2, r3, #32
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2203      	movs	r2, #3
 8005f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e086      	b.n	8006048 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0ac      	beq.n	8005ea2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	f003 0320 	and.w	r3, r3, #32
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d061      	beq.n	800602e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f6a:	f7fe fd7d 	bl	8004a68 <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005f70:	e056      	b.n	8006020 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d02e      	beq.n	8005fe2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f92:	f043 0204 	orr.w	r2, r3, #4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa8:	f043 0202 	orr.w	r2, r3, #2
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbe:	f043 0201 	orr.w	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2229      	movs	r2, #41	; 0x29
 8005fcc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e032      	b.n	8006048 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d01a      	beq.n	8006020 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fe fd3d 	bl	8004a68 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <HAL_DMA2D_PollForTransfer+0x182>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10f      	bne.n	8006020 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006004:	f043 0220 	orr.w	r2, r3, #32
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2203      	movs	r2, #3
 8006010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e013      	b.n	8006048 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0a1      	beq.n	8005f72 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2212      	movs	r2, #18
 8006034:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_DMA2D_ConfigLayer+0x20>
 800606c:	2302      	movs	r3, #2
 800606e:	e079      	b.n	8006164 <HAL_DMA2D_ConfigLayer+0x114>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	3318      	adds	r3, #24
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	4413      	add	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800609a:	4b35      	ldr	r3, [pc, #212]	; (8006170 <HAL_DMA2D_ConfigLayer+0x120>)
 800609c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b0a      	cmp	r3, #10
 80060a4:	d003      	beq.n	80060ae <HAL_DMA2D_ConfigLayer+0x5e>
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b09      	cmp	r3, #9
 80060ac:	d107      	bne.n	80060be <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e005      	b.n	80060ca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	061b      	lsls	r3, r3, #24
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d120      	bne.n	8006112 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	43db      	mvns	r3, r3
 80060da:	ea02 0103 	and.w	r1, r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b0a      	cmp	r3, #10
 80060f8:	d003      	beq.n	8006102 <HAL_DMA2D_ConfigLayer+0xb2>
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b09      	cmp	r3, #9
 8006100:	d127      	bne.n	8006152 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800610e:	629a      	str	r2, [r3, #40]	; 0x28
 8006110:	e01f      	b.n	8006152 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	43db      	mvns	r3, r3
 800611c:	ea02 0103 	and.w	r1, r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	430a      	orrs	r2, r1
 8006128:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b0a      	cmp	r3, #10
 800613a:	d003      	beq.n	8006144 <HAL_DMA2D_ConfigLayer+0xf4>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b09      	cmp	r3, #9
 8006142:	d106      	bne.n	8006152 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006150:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	ff03000f 	.word	0xff03000f

08006174 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006174:	b480      	push	{r7}
 8006176:	b08b      	sub	sp, #44	; 0x2c
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006188:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	041a      	lsls	r2, r3, #16
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	431a      	orrs	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061ac:	d174      	bne.n	8006298 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80061b4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061bc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80061c4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d108      	bne.n	80061e6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	431a      	orrs	r2, r3
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	4313      	orrs	r3, r2
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
 80061e4:	e053      	b.n	800628e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d106      	bne.n	80061fc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	e048      	b.n	800628e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d111      	bne.n	8006228 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	0cdb      	lsrs	r3, r3, #19
 8006208:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	0a9b      	lsrs	r3, r3, #10
 800620e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	08db      	lsrs	r3, r3, #3
 8006214:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	02db      	lsls	r3, r3, #11
 800621e:	4313      	orrs	r3, r2
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
 8006226:	e032      	b.n	800628e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b03      	cmp	r3, #3
 800622e:	d117      	bne.n	8006260 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	0fdb      	lsrs	r3, r3, #31
 8006234:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	0cdb      	lsrs	r3, r3, #19
 800623a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	0adb      	lsrs	r3, r3, #11
 8006240:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	08db      	lsrs	r3, r3, #3
 8006246:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	029b      	lsls	r3, r3, #10
 8006250:	431a      	orrs	r2, r3
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	03db      	lsls	r3, r3, #15
 8006256:	4313      	orrs	r3, r2
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
 800625e:	e016      	b.n	800628e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	0f1b      	lsrs	r3, r3, #28
 8006264:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	0d1b      	lsrs	r3, r3, #20
 800626a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	0b1b      	lsrs	r3, r3, #12
 8006270:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	011a      	lsls	r2, r3, #4
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	431a      	orrs	r2, r3
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	031b      	lsls	r3, r3, #12
 8006286:	4313      	orrs	r3, r2
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006296:	e003      	b.n	80062a0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	60da      	str	r2, [r3, #12]
}
 80062a0:	bf00      	nop
 80062a2:	372c      	adds	r7, #44	; 0x2c
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b089      	sub	sp, #36	; 0x24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	e175      	b.n	80065b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80062cc:	2201      	movs	r2, #1
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4013      	ands	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	f040 8164 	bne.w	80065b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d00b      	beq.n	800630a <HAL_GPIO_Init+0x5e>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d007      	beq.n	800630a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062fe:	2b11      	cmp	r3, #17
 8006300:	d003      	beq.n	800630a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b12      	cmp	r3, #18
 8006308:	d130      	bne.n	800636c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	2203      	movs	r2, #3
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	43db      	mvns	r3, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	4013      	ands	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	4313      	orrs	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006340:	2201      	movs	r2, #1
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	4013      	ands	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	091b      	lsrs	r3, r3, #4
 8006356:	f003 0201 	and.w	r2, r3, #1
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4313      	orrs	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	2203      	movs	r2, #3
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43db      	mvns	r3, r3
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	4013      	ands	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4313      	orrs	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d003      	beq.n	80063ac <HAL_GPIO_Init+0x100>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b12      	cmp	r3, #18
 80063aa:	d123      	bne.n	80063f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	08da      	lsrs	r2, r3, #3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3208      	adds	r2, #8
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	220f      	movs	r2, #15
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	43db      	mvns	r3, r3
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	4013      	ands	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	08da      	lsrs	r2, r3, #3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3208      	adds	r2, #8
 80063ee:	69b9      	ldr	r1, [r7, #24]
 80063f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	2203      	movs	r2, #3
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	43db      	mvns	r3, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0203 	and.w	r2, r3, #3
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	4313      	orrs	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80be 	beq.w	80065b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006436:	4b66      	ldr	r3, [pc, #408]	; (80065d0 <HAL_GPIO_Init+0x324>)
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	4a65      	ldr	r2, [pc, #404]	; (80065d0 <HAL_GPIO_Init+0x324>)
 800643c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006440:	6453      	str	r3, [r2, #68]	; 0x44
 8006442:	4b63      	ldr	r3, [pc, #396]	; (80065d0 <HAL_GPIO_Init+0x324>)
 8006444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800644e:	4a61      	ldr	r2, [pc, #388]	; (80065d4 <HAL_GPIO_Init+0x328>)
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	089b      	lsrs	r3, r3, #2
 8006454:	3302      	adds	r3, #2
 8006456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	220f      	movs	r2, #15
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	43db      	mvns	r3, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4013      	ands	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a58      	ldr	r2, [pc, #352]	; (80065d8 <HAL_GPIO_Init+0x32c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d037      	beq.n	80064ea <HAL_GPIO_Init+0x23e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a57      	ldr	r2, [pc, #348]	; (80065dc <HAL_GPIO_Init+0x330>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d031      	beq.n	80064e6 <HAL_GPIO_Init+0x23a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a56      	ldr	r2, [pc, #344]	; (80065e0 <HAL_GPIO_Init+0x334>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d02b      	beq.n	80064e2 <HAL_GPIO_Init+0x236>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a55      	ldr	r2, [pc, #340]	; (80065e4 <HAL_GPIO_Init+0x338>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d025      	beq.n	80064de <HAL_GPIO_Init+0x232>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a54      	ldr	r2, [pc, #336]	; (80065e8 <HAL_GPIO_Init+0x33c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01f      	beq.n	80064da <HAL_GPIO_Init+0x22e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a53      	ldr	r2, [pc, #332]	; (80065ec <HAL_GPIO_Init+0x340>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d019      	beq.n	80064d6 <HAL_GPIO_Init+0x22a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a52      	ldr	r2, [pc, #328]	; (80065f0 <HAL_GPIO_Init+0x344>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d013      	beq.n	80064d2 <HAL_GPIO_Init+0x226>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a51      	ldr	r2, [pc, #324]	; (80065f4 <HAL_GPIO_Init+0x348>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00d      	beq.n	80064ce <HAL_GPIO_Init+0x222>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a50      	ldr	r2, [pc, #320]	; (80065f8 <HAL_GPIO_Init+0x34c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d007      	beq.n	80064ca <HAL_GPIO_Init+0x21e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a4f      	ldr	r2, [pc, #316]	; (80065fc <HAL_GPIO_Init+0x350>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d101      	bne.n	80064c6 <HAL_GPIO_Init+0x21a>
 80064c2:	2309      	movs	r3, #9
 80064c4:	e012      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064c6:	230a      	movs	r3, #10
 80064c8:	e010      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064ca:	2308      	movs	r3, #8
 80064cc:	e00e      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064ce:	2307      	movs	r3, #7
 80064d0:	e00c      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064d2:	2306      	movs	r3, #6
 80064d4:	e00a      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064d6:	2305      	movs	r3, #5
 80064d8:	e008      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064da:	2304      	movs	r3, #4
 80064dc:	e006      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064de:	2303      	movs	r3, #3
 80064e0:	e004      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e002      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <HAL_GPIO_Init+0x240>
 80064ea:	2300      	movs	r3, #0
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	f002 0203 	and.w	r2, r2, #3
 80064f2:	0092      	lsls	r2, r2, #2
 80064f4:	4093      	lsls	r3, r2
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80064fc:	4935      	ldr	r1, [pc, #212]	; (80065d4 <HAL_GPIO_Init+0x328>)
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	089b      	lsrs	r3, r3, #2
 8006502:	3302      	adds	r3, #2
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800650a:	4b3d      	ldr	r3, [pc, #244]	; (8006600 <HAL_GPIO_Init+0x354>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	43db      	mvns	r3, r3
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	4013      	ands	r3, r2
 8006518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800652e:	4a34      	ldr	r2, [pc, #208]	; (8006600 <HAL_GPIO_Init+0x354>)
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006534:	4b32      	ldr	r3, [pc, #200]	; (8006600 <HAL_GPIO_Init+0x354>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	43db      	mvns	r3, r3
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4013      	ands	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006558:	4a29      	ldr	r2, [pc, #164]	; (8006600 <HAL_GPIO_Init+0x354>)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800655e:	4b28      	ldr	r3, [pc, #160]	; (8006600 <HAL_GPIO_Init+0x354>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	43db      	mvns	r3, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	4013      	ands	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006582:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <HAL_GPIO_Init+0x354>)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006588:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <HAL_GPIO_Init+0x354>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	43db      	mvns	r3, r3
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	4013      	ands	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065ac:	4a14      	ldr	r2, [pc, #80]	; (8006600 <HAL_GPIO_Init+0x354>)
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	3301      	adds	r3, #1
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	2b0f      	cmp	r3, #15
 80065bc:	f67f ae86 	bls.w	80062cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80065c0:	bf00      	nop
 80065c2:	bf00      	nop
 80065c4:	3724      	adds	r7, #36	; 0x24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40023800 	.word	0x40023800
 80065d4:	40013800 	.word	0x40013800
 80065d8:	40020000 	.word	0x40020000
 80065dc:	40020400 	.word	0x40020400
 80065e0:	40020800 	.word	0x40020800
 80065e4:	40020c00 	.word	0x40020c00
 80065e8:	40021000 	.word	0x40021000
 80065ec:	40021400 	.word	0x40021400
 80065f0:	40021800 	.word	0x40021800
 80065f4:	40021c00 	.word	0x40021c00
 80065f8:	40022000 	.word	0x40022000
 80065fc:	40022400 	.word	0x40022400
 8006600:	40013c00 	.word	0x40013c00

08006604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	807b      	strh	r3, [r7, #2]
 8006610:	4613      	mov	r3, r2
 8006612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006614:	787b      	ldrb	r3, [r7, #1]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800661a:	887a      	ldrh	r2, [r7, #2]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006620:	e003      	b.n	800662a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006622:	887b      	ldrh	r3, [r7, #2]
 8006624:	041a      	lsls	r2, r3, #16
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	619a      	str	r2, [r3, #24]
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	4013      	ands	r3, r2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d006      	beq.n	800665c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800664e:	4a05      	ldr	r2, [pc, #20]	; (8006664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	4618      	mov	r0, r3
 8006658:	f7fa fd62 	bl	8001120 <HAL_GPIO_EXTI_Callback>
  }
}
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	40013c00 	.word	0x40013c00

08006668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e07f      	b.n	800677a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f8a9 	bl	80067e6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2224      	movs	r2, #36	; 0x24
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0201 	bic.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d107      	bne.n	80066e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	e006      	b.n	80066f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d104      	bne.n	8006702 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006700:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6859      	ldr	r1, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <HAL_I2C_Init+0x11c>)
 800670e:	430b      	orrs	r3, r1
 8006710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	ea42 0103 	orr.w	r1, r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	021a      	lsls	r2, r3, #8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69d9      	ldr	r1, [r3, #28]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	02008000 	.word	0x02008000

08006788 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e021      	b.n	80067de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2224      	movs	r2, #36	; 0x24
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f821 	bl	80067fa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
	...

08006810 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	4608      	mov	r0, r1
 800681a:	4611      	mov	r1, r2
 800681c:	461a      	mov	r2, r3
 800681e:	4603      	mov	r3, r0
 8006820:	817b      	strh	r3, [r7, #10]
 8006822:	460b      	mov	r3, r1
 8006824:	813b      	strh	r3, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b20      	cmp	r3, #32
 8006834:	f040 80f9 	bne.w	8006a2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_I2C_Mem_Write+0x34>
 800683e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800684a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0ed      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_I2C_Mem_Write+0x4e>
 800685a:	2302      	movs	r3, #2
 800685c:	e0e6      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006866:	f7fe f8ff 	bl	8004a68 <HAL_GetTick>
 800686a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	2319      	movs	r3, #25
 8006872:	2201      	movs	r2, #1
 8006874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fad1 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0d1      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2221      	movs	r2, #33	; 0x21
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2240      	movs	r2, #64	; 0x40
 8006894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a3a      	ldr	r2, [r7, #32]
 80068a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068b0:	88f8      	ldrh	r0, [r7, #6]
 80068b2:	893a      	ldrh	r2, [r7, #8]
 80068b4:	8979      	ldrh	r1, [r7, #10]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	4603      	mov	r3, r0
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f9e1 	bl	8006c88 <I2C_RequestMemoryWrite>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0a9      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2bff      	cmp	r3, #255	; 0xff
 80068e0:	d90e      	bls.n	8006900 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	8979      	ldrh	r1, [r7, #10]
 80068f0:	2300      	movs	r3, #0
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fbb3 	bl	8007064 <I2C_TransferConfig>
 80068fe:	e00f      	b.n	8006920 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690e:	b2da      	uxtb	r2, r3
 8006910:	8979      	ldrh	r1, [r7, #10]
 8006912:	2300      	movs	r3, #0
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fba2 	bl	8007064 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fabb 	bl	8006ea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e07b      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d034      	beq.n	80069d8 <HAL_I2C_Mem_Write+0x1c8>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006972:	2b00      	cmp	r3, #0
 8006974:	d130      	bne.n	80069d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	2200      	movs	r2, #0
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fa4d 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e04d      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	2bff      	cmp	r3, #255	; 0xff
 8006998:	d90e      	bls.n	80069b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	22ff      	movs	r2, #255	; 0xff
 800699e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	8979      	ldrh	r1, [r7, #10]
 80069a8:	2300      	movs	r3, #0
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fb57 	bl	8007064 <I2C_TransferConfig>
 80069b6:	e00f      	b.n	80069d8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	8979      	ldrh	r1, [r7, #10]
 80069ca:	2300      	movs	r3, #0
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fb46 	bl	8007064 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d19e      	bne.n	8006920 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fa9a 	bl	8006f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e01a      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2220      	movs	r2, #32
 80069fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6859      	ldr	r1, [r3, #4]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <HAL_I2C_Mem_Write+0x224>)
 8006a0a:	400b      	ands	r3, r1
 8006a0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006a2a:	2302      	movs	r3, #2
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	fe00e800 	.word	0xfe00e800

08006a38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	4608      	mov	r0, r1
 8006a42:	4611      	mov	r1, r2
 8006a44:	461a      	mov	r2, r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	817b      	strh	r3, [r7, #10]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	813b      	strh	r3, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	f040 80fd 	bne.w	8006c5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <HAL_I2C_Mem_Read+0x34>
 8006a66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0f1      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_I2C_Mem_Read+0x4e>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e0ea      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a8e:	f7fd ffeb 	bl	8004a68 <HAL_GetTick>
 8006a92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	2319      	movs	r3, #25
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f9bd 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0d5      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2222      	movs	r2, #34	; 0x22
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2240      	movs	r2, #64	; 0x40
 8006abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ad8:	88f8      	ldrh	r0, [r7, #6]
 8006ada:	893a      	ldrh	r2, [r7, #8]
 8006adc:	8979      	ldrh	r1, [r7, #10]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f921 	bl	8006d30 <I2C_RequestMemoryRead>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0ad      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2bff      	cmp	r3, #255	; 0xff
 8006b08:	d90e      	bls.n	8006b28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	22ff      	movs	r2, #255	; 0xff
 8006b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	8979      	ldrh	r1, [r7, #10]
 8006b18:	4b52      	ldr	r3, [pc, #328]	; (8006c64 <HAL_I2C_Mem_Read+0x22c>)
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fa9f 	bl	8007064 <I2C_TransferConfig>
 8006b26:	e00f      	b.n	8006b48 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	8979      	ldrh	r1, [r7, #10]
 8006b3a:	4b4a      	ldr	r3, [pc, #296]	; (8006c64 <HAL_I2C_Mem_Read+0x22c>)
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fa8e 	bl	8007064 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2104      	movs	r1, #4
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 f964 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e07c      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d034      	beq.n	8006c08 <HAL_I2C_Mem_Read+0x1d0>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d130      	bne.n	8006c08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	2200      	movs	r2, #0
 8006bae:	2180      	movs	r1, #128	; 0x80
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f935 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e04d      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2bff      	cmp	r3, #255	; 0xff
 8006bc8:	d90e      	bls.n	8006be8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	22ff      	movs	r2, #255	; 0xff
 8006bce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	8979      	ldrh	r1, [r7, #10]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fa3f 	bl	8007064 <I2C_TransferConfig>
 8006be6:	e00f      	b.n	8006c08 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	8979      	ldrh	r1, [r7, #10]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fa2e 	bl	8007064 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d19a      	bne.n	8006b48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f982 	bl	8006f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e01a      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6859      	ldr	r1, [r3, #4]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <HAL_I2C_Mem_Read+0x230>)
 8006c3a:	400b      	ands	r3, r1
 8006c3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e000      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006c5a:	2302      	movs	r3, #2
  }
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	80002400 	.word	0x80002400
 8006c68:	fe00e800 	.word	0xfe00e800

08006c6c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c7a:	b2db      	uxtb	r3, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	4608      	mov	r0, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	461a      	mov	r2, r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	817b      	strh	r3, [r7, #10]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	813b      	strh	r3, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	8979      	ldrh	r1, [r7, #10]
 8006ca8:	4b20      	ldr	r3, [pc, #128]	; (8006d2c <I2C_RequestMemoryWrite+0xa4>)
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f9d7 	bl	8007064 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	69b9      	ldr	r1, [r7, #24]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f8f0 	bl	8006ea0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e02c      	b.n	8006d24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d105      	bne.n	8006cdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cd0:	893b      	ldrh	r3, [r7, #8]
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	629a      	str	r2, [r3, #40]	; 0x28
 8006cda:	e015      	b.n	8006d08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cdc:	893b      	ldrh	r3, [r7, #8]
 8006cde:	0a1b      	lsrs	r3, r3, #8
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	69b9      	ldr	r1, [r7, #24]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f8d6 	bl	8006ea0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e012      	b.n	8006d24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cfe:	893b      	ldrh	r3, [r7, #8]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2180      	movs	r1, #128	; 0x80
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f884 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	80002000 	.word	0x80002000

08006d30 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	4608      	mov	r0, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	817b      	strh	r3, [r7, #10]
 8006d42:	460b      	mov	r3, r1
 8006d44:	813b      	strh	r3, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	8979      	ldrh	r1, [r7, #10]
 8006d50:	4b20      	ldr	r3, [pc, #128]	; (8006dd4 <I2C_RequestMemoryRead+0xa4>)
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	2300      	movs	r3, #0
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f984 	bl	8007064 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d5c:	69fa      	ldr	r2, [r7, #28]
 8006d5e:	69b9      	ldr	r1, [r7, #24]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f89d 	bl	8006ea0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e02c      	b.n	8006dca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d70:	88fb      	ldrh	r3, [r7, #6]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d105      	bne.n	8006d82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d76:	893b      	ldrh	r3, [r7, #8]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d80:	e015      	b.n	8006dae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d82:	893b      	ldrh	r3, [r7, #8]
 8006d84:	0a1b      	lsrs	r3, r3, #8
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	69b9      	ldr	r1, [r7, #24]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f883 	bl	8006ea0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e012      	b.n	8006dca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006da4:	893b      	ldrh	r3, [r7, #8]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	2200      	movs	r2, #0
 8006db6:	2140      	movs	r1, #64	; 0x40
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 f831 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	80002000 	.word	0x80002000

08006dd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d103      	bne.n	8006df6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d007      	beq.n	8006e14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0201 	orr.w	r2, r2, #1
 8006e12:	619a      	str	r2, [r3, #24]
  }
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e30:	e022      	b.n	8006e78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e38:	d01e      	beq.n	8006e78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3a:	f7fd fe15 	bl	8004a68 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d302      	bcc.n	8006e50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d113      	bne.n	8006e78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e54:	f043 0220 	orr.w	r2, r3, #32
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e00f      	b.n	8006e98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	4013      	ands	r3, r2
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	bf0c      	ite	eq
 8006e88:	2301      	moveq	r3, #1
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d0cd      	beq.n	8006e32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006eac:	e02c      	b.n	8006f08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f870 	bl	8006f98 <I2C_IsAcknowledgeFailed>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e02a      	b.n	8006f18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d01e      	beq.n	8006f08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eca:	f7fd fdcd 	bl	8004a68 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d302      	bcc.n	8006ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d113      	bne.n	8006f08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee4:	f043 0220 	orr.w	r2, r3, #32
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e007      	b.n	8006f18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d1cb      	bne.n	8006eae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f2c:	e028      	b.n	8006f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	68b9      	ldr	r1, [r7, #8]
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f830 	bl	8006f98 <I2C_IsAcknowledgeFailed>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e026      	b.n	8006f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f42:	f7fd fd91 	bl	8004a68 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d302      	bcc.n	8006f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d113      	bne.n	8006f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e007      	b.n	8006f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d1cf      	bne.n	8006f2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d151      	bne.n	8007056 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fb2:	e022      	b.n	8006ffa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d01e      	beq.n	8006ffa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fbc:	f7fd fd54 	bl	8004a68 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d302      	bcc.n	8006fd2 <I2C_IsAcknowledgeFailed+0x3a>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d113      	bne.n	8006ffa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	f043 0220 	orr.w	r2, r3, #32
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e02e      	b.n	8007058 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b20      	cmp	r3, #32
 8007006:	d1d5      	bne.n	8006fb4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2210      	movs	r2, #16
 800700e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2220      	movs	r2, #32
 8007016:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f7ff fedd 	bl	8006dd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6859      	ldr	r1, [r3, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <I2C_IsAcknowledgeFailed+0xc8>)
 800702a:	400b      	ands	r3, r1
 800702c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	f043 0204 	orr.w	r2, r3, #4
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	fe00e800 	.word	0xfe00e800

08007064 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	817b      	strh	r3, [r7, #10]
 8007072:	4613      	mov	r3, r2
 8007074:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	0d5b      	lsrs	r3, r3, #21
 8007080:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007084:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <I2C_TransferConfig+0x58>)
 8007086:	430b      	orrs	r3, r1
 8007088:	43db      	mvns	r3, r3
 800708a:	ea02 0103 	and.w	r1, r2, r3
 800708e:	897b      	ldrh	r3, [r7, #10]
 8007090:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007094:	7a7b      	ldrb	r3, [r7, #9]
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	431a      	orrs	r2, r3
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	03ff63ff 	.word	0x03ff63ff

080070c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e0bf      	b.n	8007252 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fb fb24 	bl	8002734 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007102:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6999      	ldr	r1, [r3, #24]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007118:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6899      	ldr	r1, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	4b4a      	ldr	r3, [pc, #296]	; (800725c <HAL_LTDC_Init+0x19c>)
 8007134:	400b      	ands	r3, r1
 8007136:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6899      	ldr	r1, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68d9      	ldr	r1, [r3, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4b3e      	ldr	r3, [pc, #248]	; (800725c <HAL_LTDC_Init+0x19c>)
 8007162:	400b      	ands	r3, r1
 8007164:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	041b      	lsls	r3, r3, #16
 800716c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68d9      	ldr	r1, [r3, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6919      	ldr	r1, [r3, #16]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b33      	ldr	r3, [pc, #204]	; (800725c <HAL_LTDC_Init+0x19c>)
 8007190:	400b      	ands	r3, r1
 8007192:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6919      	ldr	r1, [r3, #16]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6959      	ldr	r1, [r3, #20]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4b27      	ldr	r3, [pc, #156]	; (800725c <HAL_LTDC_Init+0x19c>)
 80071be:	400b      	ands	r3, r1
 80071c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6959      	ldr	r1, [r3, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0206 	orr.w	r2, r2, #6
 800722e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	f000f800 	.word	0xf000f800

08007260 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007276:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d023      	beq.n	80072ca <HAL_LTDC_IRQHandler+0x6a>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01e      	beq.n	80072ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0204 	bic.w	r2, r2, #4
 800729a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2204      	movs	r2, #4
 80072a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072aa:	f043 0201 	orr.w	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2204      	movs	r2, #4
 80072b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f86f 	bl	80073a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d023      	beq.n	800731c <HAL_LTDC_IRQHandler+0xbc>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01e      	beq.n	800731c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f022 0202 	bic.w	r2, r2, #2
 80072ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2202      	movs	r2, #2
 80072f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072fc:	f043 0202 	orr.w	r2, r3, #2
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2204      	movs	r2, #4
 800730a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f846 	bl	80073a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01b      	beq.n	800735e <HAL_LTDC_IRQHandler+0xfe>
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d016      	beq.n	800735e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2201      	movs	r2, #1
 8007346:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7f9 ffdb 	bl	8001314 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01b      	beq.n	80073a0 <HAL_LTDC_IRQHandler+0x140>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0208 	bic.w	r2, r2, #8
 8007380:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2208      	movs	r2, #8
 8007388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f80e 	bl	80073bc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80073a0:	bf00      	nop
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80073d0:	b5b0      	push	{r4, r5, r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d101      	bne.n	80073ea <HAL_LTDC_ConfigLayer+0x1a>
 80073e6:	2302      	movs	r3, #2
 80073e8:	e02c      	b.n	8007444 <HAL_LTDC_ConfigLayer+0x74>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2202      	movs	r2, #2
 80073f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2134      	movs	r1, #52	; 0x34
 8007400:	fb01 f303 	mul.w	r3, r1, r3
 8007404:	4413      	add	r3, r2
 8007406:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800741a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f849 	bl	80074bc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2201      	movs	r2, #1
 8007430:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bdb0      	pop	{r4, r5, r7, pc}

0800744c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_LTDC_ProgramLineEvent+0x18>
 8007460:	2302      	movs	r3, #2
 8007462:	e023      	b.n	80074ac <HAL_LTDC_ProgramLineEvent+0x60>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007484:	4a0c      	ldr	r2, [pc, #48]	; (80074b8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 0201 	orr.w	r2, r2, #1
 8007498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	40016800 	.word	0x40016800

080074bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074bc:	b480      	push	{r7}
 80074be:	b089      	sub	sp, #36	; 0x24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074d8:	4413      	add	r3, r2
 80074da:	041b      	lsls	r3, r3, #16
 80074dc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	01db      	lsls	r3, r3, #7
 80074e8:	4413      	add	r3, r2
 80074ea:	3384      	adds	r3, #132	; 0x84
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	6812      	ldr	r2, [r2, #0]
 80074f2:	4611      	mov	r1, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	01d2      	lsls	r2, r2, #7
 80074f8:	440a      	add	r2, r1
 80074fa:	3284      	adds	r2, #132	; 0x84
 80074fc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007500:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	0c1b      	lsrs	r3, r3, #16
 800750e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007512:	4413      	add	r3, r2
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4619      	mov	r1, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	01db      	lsls	r3, r3, #7
 8007520:	440b      	add	r3, r1
 8007522:	3384      	adds	r3, #132	; 0x84
 8007524:	4619      	mov	r1, r3
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4313      	orrs	r3, r2
 800752a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800753a:	4413      	add	r3, r2
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	01db      	lsls	r3, r3, #7
 800754a:	4413      	add	r3, r2
 800754c:	3384      	adds	r3, #132	; 0x84
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	4611      	mov	r1, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	01d2      	lsls	r2, r2, #7
 800755a:	440a      	add	r2, r1
 800755c:	3284      	adds	r2, #132	; 0x84
 800755e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007562:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007572:	4413      	add	r3, r2
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4619      	mov	r1, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	01db      	lsls	r3, r3, #7
 8007580:	440b      	add	r3, r1
 8007582:	3384      	adds	r3, #132	; 0x84
 8007584:	4619      	mov	r1, r3
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4313      	orrs	r3, r2
 800758a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	01db      	lsls	r3, r3, #7
 8007596:	4413      	add	r3, r2
 8007598:	3384      	adds	r3, #132	; 0x84
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	6812      	ldr	r2, [r2, #0]
 80075a0:	4611      	mov	r1, r2
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	01d2      	lsls	r2, r2, #7
 80075a6:	440a      	add	r2, r1
 80075a8:	3284      	adds	r2, #132	; 0x84
 80075aa:	f023 0307 	bic.w	r3, r3, #7
 80075ae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	461a      	mov	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	01db      	lsls	r3, r3, #7
 80075ba:	4413      	add	r3, r2
 80075bc:	3384      	adds	r3, #132	; 0x84
 80075be:	461a      	mov	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075cc:	021b      	lsls	r3, r3, #8
 80075ce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075d6:	041b      	lsls	r3, r3, #16
 80075d8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	061b      	lsls	r3, r3, #24
 80075e0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	01db      	lsls	r3, r3, #7
 80075ec:	4413      	add	r3, r2
 80075ee:	3384      	adds	r3, #132	; 0x84
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	01db      	lsls	r3, r3, #7
 80075fc:	4413      	add	r3, r2
 80075fe:	3384      	adds	r3, #132	; 0x84
 8007600:	461a      	mov	r2, r3
 8007602:	2300      	movs	r3, #0
 8007604:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800760c:	461a      	mov	r2, r3
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	431a      	orrs	r2, r3
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	431a      	orrs	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4619      	mov	r1, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	01db      	lsls	r3, r3, #7
 8007620:	440b      	add	r3, r1
 8007622:	3384      	adds	r3, #132	; 0x84
 8007624:	4619      	mov	r1, r3
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	4313      	orrs	r3, r2
 800762a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	01db      	lsls	r3, r3, #7
 8007636:	4413      	add	r3, r2
 8007638:	3384      	adds	r3, #132	; 0x84
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	6812      	ldr	r2, [r2, #0]
 8007640:	4611      	mov	r1, r2
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	01d2      	lsls	r2, r2, #7
 8007646:	440a      	add	r2, r1
 8007648:	3284      	adds	r2, #132	; 0x84
 800764a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800764e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	01db      	lsls	r3, r3, #7
 800765a:	4413      	add	r3, r2
 800765c:	3384      	adds	r3, #132	; 0x84
 800765e:	461a      	mov	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	01db      	lsls	r3, r3, #7
 8007670:	4413      	add	r3, r2
 8007672:	3384      	adds	r3, #132	; 0x84
 8007674:	69da      	ldr	r2, [r3, #28]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4619      	mov	r1, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	01db      	lsls	r3, r3, #7
 8007680:	440b      	add	r3, r1
 8007682:	3384      	adds	r3, #132	; 0x84
 8007684:	4619      	mov	r1, r3
 8007686:	4b58      	ldr	r3, [pc, #352]	; (80077e8 <LTDC_SetConfig+0x32c>)
 8007688:	4013      	ands	r3, r2
 800768a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	68f9      	ldr	r1, [r7, #12]
 8007696:	6809      	ldr	r1, [r1, #0]
 8007698:	4608      	mov	r0, r1
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	01c9      	lsls	r1, r1, #7
 800769e:	4401      	add	r1, r0
 80076a0:	3184      	adds	r1, #132	; 0x84
 80076a2:	4313      	orrs	r3, r2
 80076a4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	01db      	lsls	r3, r3, #7
 80076b0:	4413      	add	r3, r2
 80076b2:	3384      	adds	r3, #132	; 0x84
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	01db      	lsls	r3, r3, #7
 80076c0:	4413      	add	r3, r2
 80076c2:	3384      	adds	r3, #132	; 0x84
 80076c4:	461a      	mov	r2, r3
 80076c6:	2300      	movs	r3, #0
 80076c8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	01db      	lsls	r3, r3, #7
 80076d4:	4413      	add	r3, r2
 80076d6:	3384      	adds	r3, #132	; 0x84
 80076d8:	461a      	mov	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80076e8:	2304      	movs	r3, #4
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	e01b      	b.n	8007726 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d102      	bne.n	80076fc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80076f6:	2303      	movs	r3, #3
 80076f8:	61fb      	str	r3, [r7, #28]
 80076fa:	e014      	b.n	8007726 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b04      	cmp	r3, #4
 8007702:	d00b      	beq.n	800771c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007708:	2b02      	cmp	r3, #2
 800770a:	d007      	beq.n	800771c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007710:	2b03      	cmp	r3, #3
 8007712:	d003      	beq.n	800771c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007718:	2b07      	cmp	r3, #7
 800771a:	d102      	bne.n	8007722 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800771c:	2302      	movs	r3, #2
 800771e:	61fb      	str	r3, [r7, #28]
 8007720:	e001      	b.n	8007726 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007722:	2301      	movs	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	01db      	lsls	r3, r3, #7
 8007730:	4413      	add	r3, r2
 8007732:	3384      	adds	r3, #132	; 0x84
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	4611      	mov	r1, r2
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	01d2      	lsls	r2, r2, #7
 8007740:	440a      	add	r2, r1
 8007742:	3284      	adds	r2, #132	; 0x84
 8007744:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007748:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	fb02 f303 	mul.w	r3, r2, r3
 8007754:	041a      	lsls	r2, r3, #16
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6859      	ldr	r1, [r3, #4]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	1acb      	subs	r3, r1, r3
 8007760:	69f9      	ldr	r1, [r7, #28]
 8007762:	fb01 f303 	mul.w	r3, r1, r3
 8007766:	3303      	adds	r3, #3
 8007768:	68f9      	ldr	r1, [r7, #12]
 800776a:	6809      	ldr	r1, [r1, #0]
 800776c:	4608      	mov	r0, r1
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	01c9      	lsls	r1, r1, #7
 8007772:	4401      	add	r1, r0
 8007774:	3184      	adds	r1, #132	; 0x84
 8007776:	4313      	orrs	r3, r2
 8007778:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	01db      	lsls	r3, r3, #7
 8007784:	4413      	add	r3, r2
 8007786:	3384      	adds	r3, #132	; 0x84
 8007788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4619      	mov	r1, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	01db      	lsls	r3, r3, #7
 8007794:	440b      	add	r3, r1
 8007796:	3384      	adds	r3, #132	; 0x84
 8007798:	4619      	mov	r1, r3
 800779a:	4b14      	ldr	r3, [pc, #80]	; (80077ec <LTDC_SetConfig+0x330>)
 800779c:	4013      	ands	r3, r2
 800779e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	01db      	lsls	r3, r3, #7
 80077aa:	4413      	add	r3, r2
 80077ac:	3384      	adds	r3, #132	; 0x84
 80077ae:	461a      	mov	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	4413      	add	r3, r2
 80077c2:	3384      	adds	r3, #132	; 0x84
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	4611      	mov	r1, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	01d2      	lsls	r2, r2, #7
 80077d0:	440a      	add	r2, r1
 80077d2:	3284      	adds	r2, #132	; 0x84
 80077d4:	f043 0301 	orr.w	r3, r3, #1
 80077d8:	6013      	str	r3, [r2, #0]
}
 80077da:	bf00      	nop
 80077dc:	3724      	adds	r7, #36	; 0x24
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	fffff8f8 	.word	0xfffff8f8
 80077ec:	fffff800 	.word	0xfffff800

080077f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077f4:	4b05      	ldr	r3, [pc, #20]	; (800780c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a04      	ldr	r2, [pc, #16]	; (800780c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40007000 	.word	0x40007000

08007810 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800781a:	4b23      	ldr	r3, [pc, #140]	; (80078a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	4a22      	ldr	r2, [pc, #136]	; (80078a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007824:	6413      	str	r3, [r2, #64]	; 0x40
 8007826:	4b20      	ldr	r3, [pc, #128]	; (80078a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007832:	4b1e      	ldr	r3, [pc, #120]	; (80078ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a1d      	ldr	r2, [pc, #116]	; (80078ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8007838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800783c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800783e:	f7fd f913 	bl	8004a68 <HAL_GetTick>
 8007842:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007844:	e009      	b.n	800785a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007846:	f7fd f90f 	bl	8004a68 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007854:	d901      	bls.n	800785a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e022      	b.n	80078a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800785a:	4b14      	ldr	r3, [pc, #80]	; (80078ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007866:	d1ee      	bne.n	8007846 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007868:	4b10      	ldr	r3, [pc, #64]	; (80078ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a0f      	ldr	r2, [pc, #60]	; (80078ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800786e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007872:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007874:	f7fd f8f8 	bl	8004a68 <HAL_GetTick>
 8007878:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800787a:	e009      	b.n	8007890 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800787c:	f7fd f8f4 	bl	8004a68 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800788a:	d901      	bls.n	8007890 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e007      	b.n	80078a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007890:	4b06      	ldr	r3, [pc, #24]	; (80078ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800789c:	d1ee      	bne.n	800787c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40023800 	.word	0x40023800
 80078ac:	40007000 	.word	0x40007000

080078b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80078b8:	2300      	movs	r3, #0
 80078ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e291      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8087 	beq.w	80079e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078d4:	4b96      	ldr	r3, [pc, #600]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f003 030c 	and.w	r3, r3, #12
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d00c      	beq.n	80078fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078e0:	4b93      	ldr	r3, [pc, #588]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 030c 	and.w	r3, r3, #12
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d112      	bne.n	8007912 <HAL_RCC_OscConfig+0x62>
 80078ec:	4b90      	ldr	r3, [pc, #576]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078f8:	d10b      	bne.n	8007912 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078fa:	4b8d      	ldr	r3, [pc, #564]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d06c      	beq.n	80079e0 <HAL_RCC_OscConfig+0x130>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d168      	bne.n	80079e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e26b      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791a:	d106      	bne.n	800792a <HAL_RCC_OscConfig+0x7a>
 800791c:	4b84      	ldr	r3, [pc, #528]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a83      	ldr	r2, [pc, #524]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	e02e      	b.n	8007988 <HAL_RCC_OscConfig+0xd8>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <HAL_RCC_OscConfig+0x9c>
 8007932:	4b7f      	ldr	r3, [pc, #508]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a7e      	ldr	r2, [pc, #504]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	4b7c      	ldr	r3, [pc, #496]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a7b      	ldr	r2, [pc, #492]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	e01d      	b.n	8007988 <HAL_RCC_OscConfig+0xd8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007954:	d10c      	bne.n	8007970 <HAL_RCC_OscConfig+0xc0>
 8007956:	4b76      	ldr	r3, [pc, #472]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a75      	ldr	r2, [pc, #468]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 800795c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	4b73      	ldr	r3, [pc, #460]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a72      	ldr	r2, [pc, #456]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	e00b      	b.n	8007988 <HAL_RCC_OscConfig+0xd8>
 8007970:	4b6f      	ldr	r3, [pc, #444]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a6e      	ldr	r2, [pc, #440]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	4b6c      	ldr	r3, [pc, #432]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a6b      	ldr	r2, [pc, #428]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d013      	beq.n	80079b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7fd f86a 	bl	8004a68 <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007998:	f7fd f866 	bl	8004a68 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b64      	cmp	r3, #100	; 0x64
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e21f      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079aa:	4b61      	ldr	r3, [pc, #388]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0f0      	beq.n	8007998 <HAL_RCC_OscConfig+0xe8>
 80079b6:	e014      	b.n	80079e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b8:	f7fd f856 	bl	8004a68 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079c0:	f7fd f852 	bl	8004a68 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b64      	cmp	r3, #100	; 0x64
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e20b      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079d2:	4b57      	ldr	r3, [pc, #348]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f0      	bne.n	80079c0 <HAL_RCC_OscConfig+0x110>
 80079de:	e000      	b.n	80079e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d069      	beq.n	8007ac2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80079ee:	4b50      	ldr	r3, [pc, #320]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 030c 	and.w	r3, r3, #12
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00b      	beq.n	8007a12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079fa:	4b4d      	ldr	r3, [pc, #308]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 030c 	and.w	r3, r3, #12
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d11c      	bne.n	8007a40 <HAL_RCC_OscConfig+0x190>
 8007a06:	4b4a      	ldr	r3, [pc, #296]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d116      	bne.n	8007a40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a12:	4b47      	ldr	r3, [pc, #284]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <HAL_RCC_OscConfig+0x17a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d001      	beq.n	8007a2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e1df      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a2a:	4b41      	ldr	r3, [pc, #260]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	493d      	ldr	r1, [pc, #244]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a3e:	e040      	b.n	8007ac2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d023      	beq.n	8007a90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a48:	4b39      	ldr	r3, [pc, #228]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a38      	ldr	r2, [pc, #224]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a54:	f7fd f808 	bl	8004a68 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a5c:	f7fd f804 	bl	8004a68 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e1bd      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a6e:	4b30      	ldr	r3, [pc, #192]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0f0      	beq.n	8007a5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a7a:	4b2d      	ldr	r3, [pc, #180]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4929      	ldr	r1, [pc, #164]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	600b      	str	r3, [r1, #0]
 8007a8e:	e018      	b.n	8007ac2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a90:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a26      	ldr	r2, [pc, #152]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007a96:	f023 0301 	bic.w	r3, r3, #1
 8007a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9c:	f7fc ffe4 	bl	8004a68 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aa4:	f7fc ffe0 	bl	8004a68 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e199      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ab6:	4b1e      	ldr	r3, [pc, #120]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f0      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d038      	beq.n	8007b40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d019      	beq.n	8007b0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ad6:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ada:	4a15      	ldr	r2, [pc, #84]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007adc:	f043 0301 	orr.w	r3, r3, #1
 8007ae0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae2:	f7fc ffc1 	bl	8004a68 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aea:	f7fc ffbd 	bl	8004a68 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e176      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007afc:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0f0      	beq.n	8007aea <HAL_RCC_OscConfig+0x23a>
 8007b08:	e01a      	b.n	8007b40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b0a:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0e:	4a08      	ldr	r2, [pc, #32]	; (8007b30 <HAL_RCC_OscConfig+0x280>)
 8007b10:	f023 0301 	bic.w	r3, r3, #1
 8007b14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b16:	f7fc ffa7 	bl	8004a68 <HAL_GetTick>
 8007b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b1c:	e00a      	b.n	8007b34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b1e:	f7fc ffa3 	bl	8004a68 <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d903      	bls.n	8007b34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e15c      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
 8007b30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b34:	4b91      	ldr	r3, [pc, #580]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1ee      	bne.n	8007b1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 80a4 	beq.w	8007c96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b4e:	4b8b      	ldr	r3, [pc, #556]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10d      	bne.n	8007b76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b5a:	4b88      	ldr	r3, [pc, #544]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	4a87      	ldr	r2, [pc, #540]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b64:	6413      	str	r3, [r2, #64]	; 0x40
 8007b66:	4b85      	ldr	r3, [pc, #532]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6e:	60bb      	str	r3, [r7, #8]
 8007b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b72:	2301      	movs	r3, #1
 8007b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b76:	4b82      	ldr	r3, [pc, #520]	; (8007d80 <HAL_RCC_OscConfig+0x4d0>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d118      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b82:	4b7f      	ldr	r3, [pc, #508]	; (8007d80 <HAL_RCC_OscConfig+0x4d0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a7e      	ldr	r2, [pc, #504]	; (8007d80 <HAL_RCC_OscConfig+0x4d0>)
 8007b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b8e:	f7fc ff6b 	bl	8004a68 <HAL_GetTick>
 8007b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b94:	e008      	b.n	8007ba8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b96:	f7fc ff67 	bl	8004a68 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b64      	cmp	r3, #100	; 0x64
 8007ba2:	d901      	bls.n	8007ba8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e120      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ba8:	4b75      	ldr	r3, [pc, #468]	; (8007d80 <HAL_RCC_OscConfig+0x4d0>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0f0      	beq.n	8007b96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d106      	bne.n	8007bca <HAL_RCC_OscConfig+0x31a>
 8007bbc:	4b6f      	ldr	r3, [pc, #444]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc0:	4a6e      	ldr	r2, [pc, #440]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8007bc8:	e02d      	b.n	8007c26 <HAL_RCC_OscConfig+0x376>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10c      	bne.n	8007bec <HAL_RCC_OscConfig+0x33c>
 8007bd2:	4b6a      	ldr	r3, [pc, #424]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd6:	4a69      	ldr	r2, [pc, #420]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007bd8:	f023 0301 	bic.w	r3, r3, #1
 8007bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8007bde:	4b67      	ldr	r3, [pc, #412]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be2:	4a66      	ldr	r2, [pc, #408]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007be4:	f023 0304 	bic.w	r3, r3, #4
 8007be8:	6713      	str	r3, [r2, #112]	; 0x70
 8007bea:	e01c      	b.n	8007c26 <HAL_RCC_OscConfig+0x376>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b05      	cmp	r3, #5
 8007bf2:	d10c      	bne.n	8007c0e <HAL_RCC_OscConfig+0x35e>
 8007bf4:	4b61      	ldr	r3, [pc, #388]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf8:	4a60      	ldr	r2, [pc, #384]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007bfa:	f043 0304 	orr.w	r3, r3, #4
 8007bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007c00:	4b5e      	ldr	r3, [pc, #376]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c04:	4a5d      	ldr	r2, [pc, #372]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c0c:	e00b      	b.n	8007c26 <HAL_RCC_OscConfig+0x376>
 8007c0e:	4b5b      	ldr	r3, [pc, #364]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	4a5a      	ldr	r2, [pc, #360]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c14:	f023 0301 	bic.w	r3, r3, #1
 8007c18:	6713      	str	r3, [r2, #112]	; 0x70
 8007c1a:	4b58      	ldr	r3, [pc, #352]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1e:	4a57      	ldr	r2, [pc, #348]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c20:	f023 0304 	bic.w	r3, r3, #4
 8007c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d015      	beq.n	8007c5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c2e:	f7fc ff1b 	bl	8004a68 <HAL_GetTick>
 8007c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c34:	e00a      	b.n	8007c4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c36:	f7fc ff17 	bl	8004a68 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e0ce      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4c:	4b4b      	ldr	r3, [pc, #300]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0ee      	beq.n	8007c36 <HAL_RCC_OscConfig+0x386>
 8007c58:	e014      	b.n	8007c84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c5a:	f7fc ff05 	bl	8004a68 <HAL_GetTick>
 8007c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c60:	e00a      	b.n	8007c78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c62:	f7fc ff01 	bl	8004a68 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d901      	bls.n	8007c78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e0b8      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c78:	4b40      	ldr	r3, [pc, #256]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1ee      	bne.n	8007c62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d105      	bne.n	8007c96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c8a:	4b3c      	ldr	r3, [pc, #240]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	4a3b      	ldr	r2, [pc, #236]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 80a4 	beq.w	8007de8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ca0:	4b36      	ldr	r3, [pc, #216]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f003 030c 	and.w	r3, r3, #12
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d06b      	beq.n	8007d84 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d149      	bne.n	8007d48 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cb4:	4b31      	ldr	r3, [pc, #196]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a30      	ldr	r2, [pc, #192]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc0:	f7fc fed2 	bl	8004a68 <HAL_GetTick>
 8007cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cc6:	e008      	b.n	8007cda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cc8:	f7fc fece 	bl	8004a68 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e087      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cda:	4b28      	ldr	r3, [pc, #160]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1f0      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	019b      	lsls	r3, r3, #6
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	041b      	lsls	r3, r3, #16
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	061b      	lsls	r3, r3, #24
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	4a1b      	ldr	r2, [pc, #108]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007d0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d12:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d14:	4b19      	ldr	r3, [pc, #100]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a18      	ldr	r2, [pc, #96]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d20:	f7fc fea2 	bl	8004a68 <HAL_GetTick>
 8007d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d28:	f7fc fe9e 	bl	8004a68 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e057      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d3a:	4b10      	ldr	r3, [pc, #64]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0f0      	beq.n	8007d28 <HAL_RCC_OscConfig+0x478>
 8007d46:	e04f      	b.n	8007de8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d48:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a0b      	ldr	r2, [pc, #44]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d54:	f7fc fe88 	bl	8004a68 <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d5c:	f7fc fe84 	bl	8004a68 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e03d      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d6e:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <HAL_RCC_OscConfig+0x4cc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1f0      	bne.n	8007d5c <HAL_RCC_OscConfig+0x4ac>
 8007d7a:	e035      	b.n	8007de8 <HAL_RCC_OscConfig+0x538>
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007d84:	4b1b      	ldr	r3, [pc, #108]	; (8007df4 <HAL_RCC_OscConfig+0x544>)
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d028      	beq.n	8007de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d121      	bne.n	8007de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d11a      	bne.n	8007de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007db4:	4013      	ands	r3, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007dba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d111      	bne.n	8007de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	085b      	lsrs	r3, r3, #1
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d107      	bne.n	8007de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d001      	beq.n	8007de8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e000      	b.n	8007dea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40023800 	.word	0x40023800

08007df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e0d0      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e10:	4b6a      	ldr	r3, [pc, #424]	; (8007fbc <HAL_RCC_ClockConfig+0x1c4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d910      	bls.n	8007e40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e1e:	4b67      	ldr	r3, [pc, #412]	; (8007fbc <HAL_RCC_ClockConfig+0x1c4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f023 020f 	bic.w	r2, r3, #15
 8007e26:	4965      	ldr	r1, [pc, #404]	; (8007fbc <HAL_RCC_ClockConfig+0x1c4>)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e2e:	4b63      	ldr	r3, [pc, #396]	; (8007fbc <HAL_RCC_ClockConfig+0x1c4>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d001      	beq.n	8007e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e0b8      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d020      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e58:	4b59      	ldr	r3, [pc, #356]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	4a58      	ldr	r2, [pc, #352]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0308 	and.w	r3, r3, #8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e70:	4b53      	ldr	r3, [pc, #332]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	4a52      	ldr	r2, [pc, #328]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e7c:	4b50      	ldr	r3, [pc, #320]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	494d      	ldr	r1, [pc, #308]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d040      	beq.n	8007f1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d107      	bne.n	8007eb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ea2:	4b47      	ldr	r3, [pc, #284]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d115      	bne.n	8007eda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e07f      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d107      	bne.n	8007eca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eba:	4b41      	ldr	r3, [pc, #260]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d109      	bne.n	8007eda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e073      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eca:	4b3d      	ldr	r3, [pc, #244]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e06b      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eda:	4b39      	ldr	r3, [pc, #228]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f023 0203 	bic.w	r2, r3, #3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4936      	ldr	r1, [pc, #216]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eec:	f7fc fdbc 	bl	8004a68 <HAL_GetTick>
 8007ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ef2:	e00a      	b.n	8007f0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ef4:	f7fc fdb8 	bl	8004a68 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e053      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f0a:	4b2d      	ldr	r3, [pc, #180]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 020c 	and.w	r2, r3, #12
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d1eb      	bne.n	8007ef4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f1c:	4b27      	ldr	r3, [pc, #156]	; (8007fbc <HAL_RCC_ClockConfig+0x1c4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d210      	bcs.n	8007f4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f2a:	4b24      	ldr	r3, [pc, #144]	; (8007fbc <HAL_RCC_ClockConfig+0x1c4>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f023 020f 	bic.w	r2, r3, #15
 8007f32:	4922      	ldr	r1, [pc, #136]	; (8007fbc <HAL_RCC_ClockConfig+0x1c4>)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f3a:	4b20      	ldr	r3, [pc, #128]	; (8007fbc <HAL_RCC_ClockConfig+0x1c4>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d001      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e032      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d008      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f58:	4b19      	ldr	r3, [pc, #100]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	4916      	ldr	r1, [pc, #88]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f76:	4b12      	ldr	r3, [pc, #72]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	490e      	ldr	r1, [pc, #56]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f8a:	f000 f821 	bl	8007fd0 <HAL_RCC_GetSysClockFreq>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	091b      	lsrs	r3, r3, #4
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	490a      	ldr	r1, [pc, #40]	; (8007fc4 <HAL_RCC_ClockConfig+0x1cc>)
 8007f9c:	5ccb      	ldrb	r3, [r1, r3]
 8007f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa2:	4a09      	ldr	r2, [pc, #36]	; (8007fc8 <HAL_RCC_ClockConfig+0x1d0>)
 8007fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <HAL_RCC_ClockConfig+0x1d4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fc fd18 	bl	80049e0 <HAL_InitTick>

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	40023c00 	.word	0x40023c00
 8007fc0:	40023800 	.word	0x40023800
 8007fc4:	0800dd60 	.word	0x0800dd60
 8007fc8:	200007e4 	.word	0x200007e4
 8007fcc:	20000820 	.word	0x20000820

08007fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fd4:	b090      	sub	sp, #64	; 0x40
 8007fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	637b      	str	r3, [r7, #52]	; 0x34
 8007fdc:	2300      	movs	r3, #0
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fe8:	4b59      	ldr	r3, [pc, #356]	; (8008150 <HAL_RCC_GetSysClockFreq+0x180>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f003 030c 	and.w	r3, r3, #12
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d00d      	beq.n	8008010 <HAL_RCC_GetSysClockFreq+0x40>
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	f200 80a1 	bhi.w	800813c <HAL_RCC_GetSysClockFreq+0x16c>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_RCC_GetSysClockFreq+0x34>
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d003      	beq.n	800800a <HAL_RCC_GetSysClockFreq+0x3a>
 8008002:	e09b      	b.n	800813c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008004:	4b53      	ldr	r3, [pc, #332]	; (8008154 <HAL_RCC_GetSysClockFreq+0x184>)
 8008006:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008008:	e09b      	b.n	8008142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800800a:	4b53      	ldr	r3, [pc, #332]	; (8008158 <HAL_RCC_GetSysClockFreq+0x188>)
 800800c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800800e:	e098      	b.n	8008142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008010:	4b4f      	ldr	r3, [pc, #316]	; (8008150 <HAL_RCC_GetSysClockFreq+0x180>)
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800801a:	4b4d      	ldr	r3, [pc, #308]	; (8008150 <HAL_RCC_GetSysClockFreq+0x180>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d028      	beq.n	8008078 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008026:	4b4a      	ldr	r3, [pc, #296]	; (8008150 <HAL_RCC_GetSysClockFreq+0x180>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	099b      	lsrs	r3, r3, #6
 800802c:	2200      	movs	r2, #0
 800802e:	623b      	str	r3, [r7, #32]
 8008030:	627a      	str	r2, [r7, #36]	; 0x24
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008038:	2100      	movs	r1, #0
 800803a:	4b47      	ldr	r3, [pc, #284]	; (8008158 <HAL_RCC_GetSysClockFreq+0x188>)
 800803c:	fb03 f201 	mul.w	r2, r3, r1
 8008040:	2300      	movs	r3, #0
 8008042:	fb00 f303 	mul.w	r3, r0, r3
 8008046:	4413      	add	r3, r2
 8008048:	4a43      	ldr	r2, [pc, #268]	; (8008158 <HAL_RCC_GetSysClockFreq+0x188>)
 800804a:	fba0 1202 	umull	r1, r2, r0, r2
 800804e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008050:	460a      	mov	r2, r1
 8008052:	62ba      	str	r2, [r7, #40]	; 0x28
 8008054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008056:	4413      	add	r3, r2
 8008058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805c:	2200      	movs	r2, #0
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	61fa      	str	r2, [r7, #28]
 8008062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008066:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800806a:	f7f8 fe0d 	bl	8000c88 <__aeabi_uldivmod>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	4613      	mov	r3, r2
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008076:	e053      	b.n	8008120 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008078:	4b35      	ldr	r3, [pc, #212]	; (8008150 <HAL_RCC_GetSysClockFreq+0x180>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	099b      	lsrs	r3, r3, #6
 800807e:	2200      	movs	r2, #0
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	617a      	str	r2, [r7, #20]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800808a:	f04f 0b00 	mov.w	fp, #0
 800808e:	4652      	mov	r2, sl
 8008090:	465b      	mov	r3, fp
 8008092:	f04f 0000 	mov.w	r0, #0
 8008096:	f04f 0100 	mov.w	r1, #0
 800809a:	0159      	lsls	r1, r3, #5
 800809c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080a0:	0150      	lsls	r0, r2, #5
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	ebb2 080a 	subs.w	r8, r2, sl
 80080aa:	eb63 090b 	sbc.w	r9, r3, fp
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	f04f 0300 	mov.w	r3, #0
 80080b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080c2:	ebb2 0408 	subs.w	r4, r2, r8
 80080c6:	eb63 0509 	sbc.w	r5, r3, r9
 80080ca:	f04f 0200 	mov.w	r2, #0
 80080ce:	f04f 0300 	mov.w	r3, #0
 80080d2:	00eb      	lsls	r3, r5, #3
 80080d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080d8:	00e2      	lsls	r2, r4, #3
 80080da:	4614      	mov	r4, r2
 80080dc:	461d      	mov	r5, r3
 80080de:	eb14 030a 	adds.w	r3, r4, sl
 80080e2:	603b      	str	r3, [r7, #0]
 80080e4:	eb45 030b 	adc.w	r3, r5, fp
 80080e8:	607b      	str	r3, [r7, #4]
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080f6:	4629      	mov	r1, r5
 80080f8:	028b      	lsls	r3, r1, #10
 80080fa:	4621      	mov	r1, r4
 80080fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008100:	4621      	mov	r1, r4
 8008102:	028a      	lsls	r2, r1, #10
 8008104:	4610      	mov	r0, r2
 8008106:	4619      	mov	r1, r3
 8008108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810a:	2200      	movs	r2, #0
 800810c:	60bb      	str	r3, [r7, #8]
 800810e:	60fa      	str	r2, [r7, #12]
 8008110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008114:	f7f8 fdb8 	bl	8000c88 <__aeabi_uldivmod>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4613      	mov	r3, r2
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008120:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <HAL_RCC_GetSysClockFreq+0x180>)
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	0c1b      	lsrs	r3, r3, #16
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	3301      	adds	r3, #1
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	fbb2 f3f3 	udiv	r3, r2, r3
 8008138:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800813a:	e002      	b.n	8008142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800813c:	4b05      	ldr	r3, [pc, #20]	; (8008154 <HAL_RCC_GetSysClockFreq+0x184>)
 800813e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008144:	4618      	mov	r0, r3
 8008146:	3740      	adds	r7, #64	; 0x40
 8008148:	46bd      	mov	sp, r7
 800814a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800814e:	bf00      	nop
 8008150:	40023800 	.word	0x40023800
 8008154:	00f42400 	.word	0x00f42400
 8008158:	017d7840 	.word	0x017d7840

0800815c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008160:	4b03      	ldr	r3, [pc, #12]	; (8008170 <HAL_RCC_GetHCLKFreq+0x14>)
 8008162:	681b      	ldr	r3, [r3, #0]
}
 8008164:	4618      	mov	r0, r3
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	200007e4 	.word	0x200007e4

08008174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008178:	f7ff fff0 	bl	800815c <HAL_RCC_GetHCLKFreq>
 800817c:	4602      	mov	r2, r0
 800817e:	4b05      	ldr	r3, [pc, #20]	; (8008194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	0a9b      	lsrs	r3, r3, #10
 8008184:	f003 0307 	and.w	r3, r3, #7
 8008188:	4903      	ldr	r1, [pc, #12]	; (8008198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800818a:	5ccb      	ldrb	r3, [r1, r3]
 800818c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008190:	4618      	mov	r0, r3
 8008192:	bd80      	pop	{r7, pc}
 8008194:	40023800 	.word	0x40023800
 8008198:	0800dd70 	.word	0x0800dd70

0800819c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081a0:	f7ff ffdc 	bl	800815c <HAL_RCC_GetHCLKFreq>
 80081a4:	4602      	mov	r2, r0
 80081a6:	4b05      	ldr	r3, [pc, #20]	; (80081bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	0b5b      	lsrs	r3, r3, #13
 80081ac:	f003 0307 	and.w	r3, r3, #7
 80081b0:	4903      	ldr	r1, [pc, #12]	; (80081c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081b2:	5ccb      	ldrb	r3, [r1, r3]
 80081b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	40023800 	.word	0x40023800
 80081c0:	0800dd70 	.word	0x0800dd70

080081c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d012      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081ec:	4b69      	ldr	r3, [pc, #420]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	4a68      	ldr	r2, [pc, #416]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80081f6:	6093      	str	r3, [r2, #8]
 80081f8:	4b66      	ldr	r3, [pc, #408]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008200:	4964      	ldr	r1, [pc, #400]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008202:	4313      	orrs	r3, r2
 8008204:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800820e:	2301      	movs	r3, #1
 8008210:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d017      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800821e:	4b5d      	ldr	r3, [pc, #372]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008224:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822c:	4959      	ldr	r1, [pc, #356]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800823c:	d101      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800823e:	2301      	movs	r3, #1
 8008240:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800824a:	2301      	movs	r3, #1
 800824c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d017      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800825a:	4b4e      	ldr	r3, [pc, #312]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800825c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008260:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	494a      	ldr	r1, [pc, #296]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800826a:	4313      	orrs	r3, r2
 800826c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008278:	d101      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800827a:	2301      	movs	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008286:	2301      	movs	r3, #1
 8008288:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008296:	2301      	movs	r3, #1
 8008298:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0320 	and.w	r3, r3, #32
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 808b 	beq.w	80083be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80082a8:	4b3a      	ldr	r3, [pc, #232]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ac:	4a39      	ldr	r2, [pc, #228]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b2:	6413      	str	r3, [r2, #64]	; 0x40
 80082b4:	4b37      	ldr	r3, [pc, #220]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082bc:	60bb      	str	r3, [r7, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082c0:	4b35      	ldr	r3, [pc, #212]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a34      	ldr	r2, [pc, #208]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082cc:	f7fc fbcc 	bl	8004a68 <HAL_GetTick>
 80082d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082d2:	e008      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d4:	f7fc fbc8 	bl	8004a68 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b64      	cmp	r3, #100	; 0x64
 80082e0:	d901      	bls.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e357      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082e6:	4b2c      	ldr	r3, [pc, #176]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f0      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082f2:	4b28      	ldr	r3, [pc, #160]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d035      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	429a      	cmp	r2, r3
 800830e:	d02e      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008310:	4b20      	ldr	r3, [pc, #128]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008318:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800831a:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008324:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008326:	4b1b      	ldr	r3, [pc, #108]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	4a1a      	ldr	r2, [pc, #104]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800832c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008330:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008332:	4a18      	ldr	r2, [pc, #96]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008338:	4b16      	ldr	r3, [pc, #88]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800833a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b01      	cmp	r3, #1
 8008342:	d114      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008344:	f7fc fb90 	bl	8004a68 <HAL_GetTick>
 8008348:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800834a:	e00a      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800834c:	f7fc fb8c 	bl	8004a68 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	f241 3288 	movw	r2, #5000	; 0x1388
 800835a:	4293      	cmp	r3, r2
 800835c:	d901      	bls.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e319      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0ee      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800837a:	d111      	bne.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800837c:	4b05      	ldr	r3, [pc, #20]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008388:	4b04      	ldr	r3, [pc, #16]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800838a:	400b      	ands	r3, r1
 800838c:	4901      	ldr	r1, [pc, #4]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838e:	4313      	orrs	r3, r2
 8008390:	608b      	str	r3, [r1, #8]
 8008392:	e00b      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008394:	40023800 	.word	0x40023800
 8008398:	40007000 	.word	0x40007000
 800839c:	0ffffcff 	.word	0x0ffffcff
 80083a0:	4baa      	ldr	r3, [pc, #680]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	4aa9      	ldr	r2, [pc, #676]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80083aa:	6093      	str	r3, [r2, #8]
 80083ac:	4ba7      	ldr	r3, [pc, #668]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083b8:	49a4      	ldr	r1, [pc, #656]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0310 	and.w	r3, r3, #16
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d010      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083ca:	4ba0      	ldr	r3, [pc, #640]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d0:	4a9e      	ldr	r2, [pc, #632]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80083da:	4b9c      	ldr	r3, [pc, #624]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	4999      	ldr	r1, [pc, #612]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083f8:	4b94      	ldr	r3, [pc, #592]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008406:	4991      	ldr	r1, [pc, #580]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008408:	4313      	orrs	r3, r2
 800840a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800841a:	4b8c      	ldr	r3, [pc, #560]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800841c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008420:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008428:	4988      	ldr	r1, [pc, #544]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800843c:	4b83      	ldr	r3, [pc, #524]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008442:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800844a:	4980      	ldr	r1, [pc, #512]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800844c:	4313      	orrs	r3, r2
 800844e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800845e:	4b7b      	ldr	r3, [pc, #492]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008464:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846c:	4977      	ldr	r1, [pc, #476]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800846e:	4313      	orrs	r3, r2
 8008470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008480:	4b72      	ldr	r3, [pc, #456]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008486:	f023 0203 	bic.w	r2, r3, #3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848e:	496f      	ldr	r1, [pc, #444]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008490:	4313      	orrs	r3, r2
 8008492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084a2:	4b6a      	ldr	r3, [pc, #424]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a8:	f023 020c 	bic.w	r2, r3, #12
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084b0:	4966      	ldr	r1, [pc, #408]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084c4:	4b61      	ldr	r3, [pc, #388]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d2:	495e      	ldr	r1, [pc, #376]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084e6:	4b59      	ldr	r3, [pc, #356]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f4:	4955      	ldr	r1, [pc, #340]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008508:	4b50      	ldr	r3, [pc, #320]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008516:	494d      	ldr	r1, [pc, #308]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008518:	4313      	orrs	r3, r2
 800851a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800852a:	4b48      	ldr	r3, [pc, #288]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008530:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008538:	4944      	ldr	r1, [pc, #272]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853a:	4313      	orrs	r3, r2
 800853c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800854c:	4b3f      	ldr	r3, [pc, #252]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008552:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800855a:	493c      	ldr	r1, [pc, #240]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855c:	4313      	orrs	r3, r2
 800855e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800856e:	4b37      	ldr	r3, [pc, #220]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008574:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800857c:	4933      	ldr	r1, [pc, #204]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857e:	4313      	orrs	r3, r2
 8008580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008590:	4b2e      	ldr	r3, [pc, #184]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008596:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800859e:	492b      	ldr	r1, [pc, #172]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d011      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80085b2:	4b26      	ldr	r3, [pc, #152]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c0:	4922      	ldr	r1, [pc, #136]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d0:	d101      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80085d2:	2301      	movs	r3, #1
 80085d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80085e2:	2301      	movs	r3, #1
 80085e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085f2:	4b16      	ldr	r3, [pc, #88]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008600:	4912      	ldr	r1, [pc, #72]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008614:	4b0d      	ldr	r3, [pc, #52]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008624:	4909      	ldr	r1, [pc, #36]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d006      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 80d9 	beq.w	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008640:	4b02      	ldr	r3, [pc, #8]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a01      	ldr	r2, [pc, #4]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008646:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800864a:	e001      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800864c:	40023800 	.word	0x40023800
 8008650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008652:	f7fc fa09 	bl	8004a68 <HAL_GetTick>
 8008656:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008658:	e008      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800865a:	f7fc fa05 	bl	8004a68 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b64      	cmp	r3, #100	; 0x64
 8008666:	d901      	bls.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e194      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800866c:	4b6c      	ldr	r3, [pc, #432]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1f0      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d021      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	d11d      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800868c:	4b64      	ldr	r3, [pc, #400]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800868e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008692:	0c1b      	lsrs	r3, r3, #16
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800869a:	4b61      	ldr	r3, [pc, #388]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800869c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a0:	0e1b      	lsrs	r3, r3, #24
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	019a      	lsls	r2, r3, #6
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	041b      	lsls	r3, r3, #16
 80086b2:	431a      	orrs	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	061b      	lsls	r3, r3, #24
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	071b      	lsls	r3, r3, #28
 80086c0:	4957      	ldr	r1, [pc, #348]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086dc:	d00a      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d02e      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086f2:	d129      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086f4:	4b4a      	ldr	r3, [pc, #296]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086fa:	0c1b      	lsrs	r3, r3, #16
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008702:	4b47      	ldr	r3, [pc, #284]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008708:	0f1b      	lsrs	r3, r3, #28
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	019a      	lsls	r2, r3, #6
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	041b      	lsls	r3, r3, #16
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	061b      	lsls	r3, r3, #24
 8008722:	431a      	orrs	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	071b      	lsls	r3, r3, #28
 8008728:	493d      	ldr	r1, [pc, #244]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800872a:	4313      	orrs	r3, r2
 800872c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008730:	4b3b      	ldr	r3, [pc, #236]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008736:	f023 021f 	bic.w	r2, r3, #31
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	3b01      	subs	r3, #1
 8008740:	4937      	ldr	r1, [pc, #220]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008742:	4313      	orrs	r3, r2
 8008744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01d      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008754:	4b32      	ldr	r3, [pc, #200]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800875a:	0e1b      	lsrs	r3, r3, #24
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008762:	4b2f      	ldr	r3, [pc, #188]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008768:	0f1b      	lsrs	r3, r3, #28
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	019a      	lsls	r2, r3, #6
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	041b      	lsls	r3, r3, #16
 800877c:	431a      	orrs	r2, r3
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	061b      	lsls	r3, r3, #24
 8008782:	431a      	orrs	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	071b      	lsls	r3, r3, #28
 8008788:	4925      	ldr	r1, [pc, #148]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d011      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	019a      	lsls	r2, r3, #6
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	041b      	lsls	r3, r3, #16
 80087a8:	431a      	orrs	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	061b      	lsls	r3, r3, #24
 80087b0:	431a      	orrs	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	071b      	lsls	r3, r3, #28
 80087b8:	4919      	ldr	r1, [pc, #100]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80087c0:	4b17      	ldr	r3, [pc, #92]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a16      	ldr	r2, [pc, #88]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087cc:	f7fc f94c 	bl	8004a68 <HAL_GetTick>
 80087d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087d2:	e008      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087d4:	f7fc f948 	bl	8004a68 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b64      	cmp	r3, #100	; 0x64
 80087e0:	d901      	bls.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e0d7      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087e6:	4b0e      	ldr	r3, [pc, #56]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0f0      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	f040 80cd 	bne.w	8008994 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80087fa:	4b09      	ldr	r3, [pc, #36]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a08      	ldr	r2, [pc, #32]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008806:	f7fc f92f 	bl	8004a68 <HAL_GetTick>
 800880a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800880c:	e00a      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800880e:	f7fc f92b 	bl	8004a68 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b64      	cmp	r3, #100	; 0x64
 800881a:	d903      	bls.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e0ba      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008820:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008824:	4b5e      	ldr	r3, [pc, #376]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800882c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008830:	d0ed      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800884e:	2b00      	cmp	r3, #0
 8008850:	d02e      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d12a      	bne.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800885a:	4b51      	ldr	r3, [pc, #324]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800885c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008860:	0c1b      	lsrs	r3, r3, #16
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008868:	4b4d      	ldr	r3, [pc, #308]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800886a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800886e:	0f1b      	lsrs	r3, r3, #28
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	019a      	lsls	r2, r3, #6
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	041b      	lsls	r3, r3, #16
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	061b      	lsls	r3, r3, #24
 8008888:	431a      	orrs	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	071b      	lsls	r3, r3, #28
 800888e:	4944      	ldr	r1, [pc, #272]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008890:	4313      	orrs	r3, r2
 8008892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008896:	4b42      	ldr	r3, [pc, #264]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a4:	3b01      	subs	r3, #1
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	493d      	ldr	r1, [pc, #244]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d022      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088c4:	d11d      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088c6:	4b36      	ldr	r3, [pc, #216]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088cc:	0e1b      	lsrs	r3, r3, #24
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088d4:	4b32      	ldr	r3, [pc, #200]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088da:	0f1b      	lsrs	r3, r3, #28
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	019a      	lsls	r2, r3, #6
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	041b      	lsls	r3, r3, #16
 80088ee:	431a      	orrs	r2, r3
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	061b      	lsls	r3, r3, #24
 80088f4:	431a      	orrs	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	071b      	lsls	r3, r3, #28
 80088fa:	4929      	ldr	r1, [pc, #164]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0308 	and.w	r3, r3, #8
 800890a:	2b00      	cmp	r3, #0
 800890c:	d028      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800890e:	4b24      	ldr	r3, [pc, #144]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008914:	0e1b      	lsrs	r3, r3, #24
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800891c:	4b20      	ldr	r3, [pc, #128]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008922:	0c1b      	lsrs	r3, r3, #16
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	019a      	lsls	r2, r3, #6
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	041b      	lsls	r3, r3, #16
 8008934:	431a      	orrs	r2, r3
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	071b      	lsls	r3, r3, #28
 8008942:	4917      	ldr	r1, [pc, #92]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008944:	4313      	orrs	r3, r2
 8008946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800894a:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	4911      	ldr	r1, [pc, #68]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800895a:	4313      	orrs	r3, r2
 800895c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a0e      	ldr	r2, [pc, #56]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800896a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896c:	f7fc f87c 	bl	8004a68 <HAL_GetTick>
 8008970:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008972:	e008      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008974:	f7fc f878 	bl	8004a68 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b64      	cmp	r3, #100	; 0x64
 8008980:	d901      	bls.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e007      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008986:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800898e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008992:	d1ef      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3720      	adds	r7, #32
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	40023800 	.word	0x40023800

080089a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e025      	b.n	8008a04 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d106      	bne.n	80089d2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7fa fa43 	bl	8002e58 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2202      	movs	r2, #2
 80089d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3304      	adds	r3, #4
 80089e2:	4619      	mov	r1, r3
 80089e4:	4610      	mov	r0, r2
 80089e6:	f001 fde7 	bl	800a5b8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	461a      	mov	r2, r3
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	f001 fe51 	bl	800a69c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d101      	bne.n	8008a28 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008a24:	2302      	movs	r3, #2
 8008a26:	e018      	b.n	8008a5a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f001 feaf 	bl	800a79c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d104      	bne.n	8008a50 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2205      	movs	r2, #5
 8008a4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008a4e:	e003      	b.n	8008a58 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e049      	b.n	8008b08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d106      	bne.n	8008a8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7f9 fff5 	bl	8002a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2202      	movs	r2, #2
 8008a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f000 fabb 	bl	800901c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d001      	beq.n	8008b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e054      	b.n	8008bd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0201 	orr.w	r2, r2, #1
 8008b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a26      	ldr	r2, [pc, #152]	; (8008be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d022      	beq.n	8008b90 <HAL_TIM_Base_Start_IT+0x80>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b52:	d01d      	beq.n	8008b90 <HAL_TIM_Base_Start_IT+0x80>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a22      	ldr	r2, [pc, #136]	; (8008be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d018      	beq.n	8008b90 <HAL_TIM_Base_Start_IT+0x80>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a21      	ldr	r2, [pc, #132]	; (8008be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d013      	beq.n	8008b90 <HAL_TIM_Base_Start_IT+0x80>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1f      	ldr	r2, [pc, #124]	; (8008bec <HAL_TIM_Base_Start_IT+0xdc>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00e      	beq.n	8008b90 <HAL_TIM_Base_Start_IT+0x80>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a1e      	ldr	r2, [pc, #120]	; (8008bf0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d009      	beq.n	8008b90 <HAL_TIM_Base_Start_IT+0x80>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a1c      	ldr	r2, [pc, #112]	; (8008bf4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d004      	beq.n	8008b90 <HAL_TIM_Base_Start_IT+0x80>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a1b      	ldr	r2, [pc, #108]	; (8008bf8 <HAL_TIM_Base_Start_IT+0xe8>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d115      	bne.n	8008bbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <HAL_TIM_Base_Start_IT+0xec>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b06      	cmp	r3, #6
 8008ba0:	d015      	beq.n	8008bce <HAL_TIM_Base_Start_IT+0xbe>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba8:	d011      	beq.n	8008bce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0201 	orr.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bba:	e008      	b.n	8008bce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0201 	orr.w	r2, r2, #1
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e000      	b.n	8008bd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40010000 	.word	0x40010000
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800
 8008bec:	40000c00 	.word	0x40000c00
 8008bf0:	40010400 	.word	0x40010400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40001800 	.word	0x40001800
 8008bfc:	00010007 	.word	0x00010007

08008c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d122      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f003 0302 	and.w	r3, r3, #2
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d11b      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f06f 0202 	mvn.w	r2, #2
 8008c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f9cc 	bl	8008fe0 <HAL_TIM_IC_CaptureCallback>
 8008c48:	e005      	b.n	8008c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f9be 	bl	8008fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f9cf 	bl	8008ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d122      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d11b      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f06f 0204 	mvn.w	r2, #4
 8008c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f9a2 	bl	8008fe0 <HAL_TIM_IC_CaptureCallback>
 8008c9c:	e005      	b.n	8008caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f994 	bl	8008fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f9a5 	bl	8008ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	d122      	bne.n	8008d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f003 0308 	and.w	r3, r3, #8
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d11b      	bne.n	8008d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0208 	mvn.w	r2, #8
 8008cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2204      	movs	r2, #4
 8008cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f978 	bl	8008fe0 <HAL_TIM_IC_CaptureCallback>
 8008cf0:	e005      	b.n	8008cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f96a 	bl	8008fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f97b 	bl	8008ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f003 0310 	and.w	r3, r3, #16
 8008d0e:	2b10      	cmp	r3, #16
 8008d10:	d122      	bne.n	8008d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f003 0310 	and.w	r3, r3, #16
 8008d1c:	2b10      	cmp	r3, #16
 8008d1e:	d11b      	bne.n	8008d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f06f 0210 	mvn.w	r2, #16
 8008d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2208      	movs	r2, #8
 8008d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f94e 	bl	8008fe0 <HAL_TIM_IC_CaptureCallback>
 8008d44:	e005      	b.n	8008d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f940 	bl	8008fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f951 	bl	8008ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d10e      	bne.n	8008d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d107      	bne.n	8008d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f06f 0201 	mvn.w	r2, #1
 8008d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7f8 fb54 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8e:	2b80      	cmp	r3, #128	; 0x80
 8008d90:	d10e      	bne.n	8008db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d9c:	2b80      	cmp	r3, #128	; 0x80
 8008d9e:	d107      	bne.n	8008db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fb08 	bl	80093c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dbe:	d10e      	bne.n	8008dde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dca:	2b80      	cmp	r3, #128	; 0x80
 8008dcc:	d107      	bne.n	8008dde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fafb 	bl	80093d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de8:	2b40      	cmp	r3, #64	; 0x40
 8008dea:	d10e      	bne.n	8008e0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df6:	2b40      	cmp	r3, #64	; 0x40
 8008df8:	d107      	bne.n	8008e0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f8ff 	bl	8009008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d10e      	bne.n	8008e36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	d107      	bne.n	8008e36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f06f 0220 	mvn.w	r2, #32
 8008e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fabb 	bl	80093ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_TIM_ConfigClockSource+0x18>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e0b3      	b.n	8008fc0 <HAL_TIM_ConfigClockSource+0x180>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4b55      	ldr	r3, [pc, #340]	; (8008fc8 <HAL_TIM_ConfigClockSource+0x188>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e90:	d03e      	beq.n	8008f10 <HAL_TIM_ConfigClockSource+0xd0>
 8008e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e96:	f200 8087 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x168>
 8008e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9e:	f000 8085 	beq.w	8008fac <HAL_TIM_ConfigClockSource+0x16c>
 8008ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea6:	d87f      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x168>
 8008ea8:	2b70      	cmp	r3, #112	; 0x70
 8008eaa:	d01a      	beq.n	8008ee2 <HAL_TIM_ConfigClockSource+0xa2>
 8008eac:	2b70      	cmp	r3, #112	; 0x70
 8008eae:	d87b      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x168>
 8008eb0:	2b60      	cmp	r3, #96	; 0x60
 8008eb2:	d050      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x116>
 8008eb4:	2b60      	cmp	r3, #96	; 0x60
 8008eb6:	d877      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x168>
 8008eb8:	2b50      	cmp	r3, #80	; 0x50
 8008eba:	d03c      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0xf6>
 8008ebc:	2b50      	cmp	r3, #80	; 0x50
 8008ebe:	d873      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x168>
 8008ec0:	2b40      	cmp	r3, #64	; 0x40
 8008ec2:	d058      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x136>
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d86f      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x168>
 8008ec8:	2b30      	cmp	r3, #48	; 0x30
 8008eca:	d064      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x156>
 8008ecc:	2b30      	cmp	r3, #48	; 0x30
 8008ece:	d86b      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x168>
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d060      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x156>
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	d867      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x168>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d05c      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x156>
 8008edc:	2b10      	cmp	r3, #16
 8008ede:	d05a      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008ee0:	e062      	b.n	8008fa8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	6899      	ldr	r1, [r3, #8]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f000 f9ad 	bl	8009250 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	609a      	str	r2, [r3, #8]
      break;
 8008f0e:	e04e      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	6899      	ldr	r1, [r3, #8]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f000 f996 	bl	8009250 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f32:	609a      	str	r2, [r3, #8]
      break;
 8008f34:	e03b      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	6859      	ldr	r1, [r3, #4]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	461a      	mov	r2, r3
 8008f44:	f000 f90a 	bl	800915c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2150      	movs	r1, #80	; 0x50
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f963 	bl	800921a <TIM_ITRx_SetConfig>
      break;
 8008f54:	e02b      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6859      	ldr	r1, [r3, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f000 f929 	bl	80091ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2160      	movs	r1, #96	; 0x60
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 f953 	bl	800921a <TIM_ITRx_SetConfig>
      break;
 8008f74:	e01b      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6859      	ldr	r1, [r3, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	461a      	mov	r2, r3
 8008f84:	f000 f8ea 	bl	800915c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2140      	movs	r1, #64	; 0x40
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f943 	bl	800921a <TIM_ITRx_SetConfig>
      break;
 8008f94:	e00b      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	f000 f93a 	bl	800921a <TIM_ITRx_SetConfig>
        break;
 8008fa6:	e002      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008fa8:	bf00      	nop
 8008faa:	e000      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008fac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	fffeff88 	.word	0xfffeff88

08008fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a40      	ldr	r2, [pc, #256]	; (8009130 <TIM_Base_SetConfig+0x114>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d013      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800903a:	d00f      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a3d      	ldr	r2, [pc, #244]	; (8009134 <TIM_Base_SetConfig+0x118>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00b      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a3c      	ldr	r2, [pc, #240]	; (8009138 <TIM_Base_SetConfig+0x11c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d007      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a3b      	ldr	r2, [pc, #236]	; (800913c <TIM_Base_SetConfig+0x120>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d003      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a3a      	ldr	r2, [pc, #232]	; (8009140 <TIM_Base_SetConfig+0x124>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d108      	bne.n	800906e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a2f      	ldr	r2, [pc, #188]	; (8009130 <TIM_Base_SetConfig+0x114>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d02b      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907c:	d027      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a2c      	ldr	r2, [pc, #176]	; (8009134 <TIM_Base_SetConfig+0x118>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d023      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a2b      	ldr	r2, [pc, #172]	; (8009138 <TIM_Base_SetConfig+0x11c>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d01f      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a2a      	ldr	r2, [pc, #168]	; (800913c <TIM_Base_SetConfig+0x120>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d01b      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a29      	ldr	r2, [pc, #164]	; (8009140 <TIM_Base_SetConfig+0x124>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d017      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a28      	ldr	r2, [pc, #160]	; (8009144 <TIM_Base_SetConfig+0x128>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d013      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a27      	ldr	r2, [pc, #156]	; (8009148 <TIM_Base_SetConfig+0x12c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d00f      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a26      	ldr	r2, [pc, #152]	; (800914c <TIM_Base_SetConfig+0x130>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d00b      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a25      	ldr	r2, [pc, #148]	; (8009150 <TIM_Base_SetConfig+0x134>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d007      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a24      	ldr	r2, [pc, #144]	; (8009154 <TIM_Base_SetConfig+0x138>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d003      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a23      	ldr	r2, [pc, #140]	; (8009158 <TIM_Base_SetConfig+0x13c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d108      	bne.n	80090e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <TIM_Base_SetConfig+0x114>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d003      	beq.n	8009114 <TIM_Base_SetConfig+0xf8>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a0c      	ldr	r2, [pc, #48]	; (8009140 <TIM_Base_SetConfig+0x124>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d103      	bne.n	800911c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	615a      	str	r2, [r3, #20]
}
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	40010000 	.word	0x40010000
 8009134:	40000400 	.word	0x40000400
 8009138:	40000800 	.word	0x40000800
 800913c:	40000c00 	.word	0x40000c00
 8009140:	40010400 	.word	0x40010400
 8009144:	40014000 	.word	0x40014000
 8009148:	40014400 	.word	0x40014400
 800914c:	40014800 	.word	0x40014800
 8009150:	40001800 	.word	0x40001800
 8009154:	40001c00 	.word	0x40001c00
 8009158:	40002000 	.word	0x40002000

0800915c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	f023 0201 	bic.w	r2, r3, #1
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	011b      	lsls	r3, r3, #4
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	4313      	orrs	r3, r2
 8009190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f023 030a 	bic.w	r3, r3, #10
 8009198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4313      	orrs	r3, r2
 80091a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b087      	sub	sp, #28
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f023 0210 	bic.w	r2, r3, #16
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	031b      	lsls	r3, r3, #12
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	4313      	orrs	r3, r2
 8009200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	621a      	str	r2, [r3, #32]
}
 800920e:	bf00      	nop
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800921a:	b480      	push	{r7}
 800921c:	b085      	sub	sp, #20
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4313      	orrs	r3, r2
 8009238:	f043 0307 	orr.w	r3, r3, #7
 800923c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	609a      	str	r2, [r3, #8]
}
 8009244:	bf00      	nop
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800926a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	021a      	lsls	r2, r3, #8
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	431a      	orrs	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	4313      	orrs	r3, r2
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	4313      	orrs	r3, r2
 800927c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	609a      	str	r2, [r3, #8]
}
 8009284:	bf00      	nop
 8009286:	371c      	adds	r7, #28
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092a4:	2302      	movs	r3, #2
 80092a6:	e06d      	b.n	8009384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a30      	ldr	r2, [pc, #192]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d004      	beq.n	80092dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a2f      	ldr	r2, [pc, #188]	; (8009394 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d108      	bne.n	80092ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a20      	ldr	r2, [pc, #128]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d022      	beq.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800931a:	d01d      	beq.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a1d      	ldr	r2, [pc, #116]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d018      	beq.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a1c      	ldr	r2, [pc, #112]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d013      	beq.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a1a      	ldr	r2, [pc, #104]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d00e      	beq.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a15      	ldr	r2, [pc, #84]	; (8009394 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d009      	beq.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a16      	ldr	r2, [pc, #88]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d004      	beq.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a15      	ldr	r2, [pc, #84]	; (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d10c      	bne.n	8009372 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800935e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	4313      	orrs	r3, r2
 8009368:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	40010000 	.word	0x40010000
 8009394:	40010400 	.word	0x40010400
 8009398:	40000400 	.word	0x40000400
 800939c:	40000800 	.word	0x40000800
 80093a0:	40000c00 	.word	0x40000c00
 80093a4:	40014000 	.word	0x40014000
 80093a8:	40001800 	.word	0x40001800

080093ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e040      	b.n	800947c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7f9 fbac 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2224      	movs	r2, #36	; 0x24
 8009414:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0201 	bic.w	r2, r2, #1
 8009424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fade 	bl	80099e8 <UART_SetConfig>
 800942c:	4603      	mov	r3, r0
 800942e:	2b01      	cmp	r3, #1
 8009430:	d101      	bne.n	8009436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e022      	b.n	800947c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fd36 	bl	8009eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689a      	ldr	r2, [r3, #8]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f042 0201 	orr.w	r2, r2, #1
 8009472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fdbd 	bl	8009ff4 <UART_CheckIdleState>
 800947a:	4603      	mov	r3, r0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	4613      	mov	r3, r2
 8009490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009496:	2b20      	cmp	r3, #32
 8009498:	d145      	bne.n	8009526 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <HAL_UART_Transmit_IT+0x22>
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e03e      	b.n	8009528 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_UART_Transmit_IT+0x34>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e037      	b.n	8009528 <HAL_UART_Transmit_IT+0xa4>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	88fa      	ldrh	r2, [r7, #6]
 80094ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	88fa      	ldrh	r2, [r7, #6]
 80094d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2221      	movs	r2, #33	; 0x21
 80094e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f2:	d107      	bne.n	8009504 <HAL_UART_Transmit_IT+0x80>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d103      	bne.n	8009504 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4a0d      	ldr	r2, [pc, #52]	; (8009534 <HAL_UART_Transmit_IT+0xb0>)
 8009500:	669a      	str	r2, [r3, #104]	; 0x68
 8009502:	e002      	b.n	800950a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4a0c      	ldr	r2, [pc, #48]	; (8009538 <HAL_UART_Transmit_IT+0xb4>)
 8009508:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009520:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	e000      	b.n	8009528 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8009526:	2302      	movs	r3, #2
  }
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	0800a361 	.word	0x0800a361
 8009538:	0800a2ef 	.word	0x0800a2ef

0800953c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954e:	2b20      	cmp	r3, #32
 8009550:	d12c      	bne.n	80095ac <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <HAL_UART_Receive_IT+0x22>
 8009558:	88fb      	ldrh	r3, [r7, #6]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e025      	b.n	80095ae <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_UART_Receive_IT+0x34>
 800956c:	2302      	movs	r3, #2
 800956e:	e01e      	b.n	80095ae <HAL_UART_Receive_IT+0x72>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d007      	beq.n	800959c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800959a:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	461a      	mov	r2, r3
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f000 fdd6 	bl	800a154 <UART_Start_Receive_IT>
 80095a8:	4603      	mov	r3, r0
 80095aa:	e000      	b.n	80095ae <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80095ac:	2302      	movs	r3, #2
  }
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	f640 030f 	movw	r3, #2063	; 0x80f
 80095de:	4013      	ands	r3, r2
 80095e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d113      	bne.n	8009610 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00e      	beq.n	8009610 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d009      	beq.n	8009610 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 81ba 	beq.w	800997a <HAL_UART_IRQHandler+0x3c2>
      {
        huart->RxISR(huart);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	4798      	blx	r3
      }
      return;
 800960e:	e1b4      	b.n	800997a <HAL_UART_IRQHandler+0x3c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 80e8 	beq.w	80097e8 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d105      	bne.n	800962e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009622:	69ba      	ldr	r2, [r7, #24]
 8009624:	4b6e      	ldr	r3, [pc, #440]	; (80097e0 <HAL_UART_IRQHandler+0x228>)
 8009626:	4013      	ands	r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 80dd 	beq.w	80097e8 <HAL_UART_IRQHandler+0x230>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	2b00      	cmp	r3, #0
 8009636:	d010      	beq.n	800965a <HAL_UART_IRQHandler+0xa2>
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00b      	beq.n	800965a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2201      	movs	r2, #1
 8009648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009650:	f043 0201 	orr.w	r2, r3, #1
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d010      	beq.n	8009686 <HAL_UART_IRQHandler+0xce>
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00b      	beq.n	8009686 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2202      	movs	r2, #2
 8009674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800967c:	f043 0204 	orr.w	r2, r3, #4
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d010      	beq.n	80096b2 <HAL_UART_IRQHandler+0xfa>
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00b      	beq.n	80096b2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2204      	movs	r2, #4
 80096a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096a8:	f043 0202 	orr.w	r2, r3, #2
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	f003 0308 	and.w	r3, r3, #8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d015      	beq.n	80096e8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	f003 0320 	and.w	r3, r3, #32
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d104      	bne.n	80096d0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2208      	movs	r2, #8
 80096d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096de:	f043 0208 	orr.w	r2, r3, #8
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d011      	beq.n	8009716 <HAL_UART_IRQHandler+0x15e>
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00c      	beq.n	8009716 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800970c:	f043 0220 	orr.w	r2, r3, #32
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 812e 	beq.w	800997e <HAL_UART_IRQHandler+0x3c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00c      	beq.n	8009746 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d007      	beq.n	8009746 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800974c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009758:	2b40      	cmp	r3, #64	; 0x40
 800975a:	d004      	beq.n	8009766 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009762:	2b00      	cmp	r3, #0
 8009764:	d031      	beq.n	80097ca <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fd7c 	bl	800a264 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009776:	2b40      	cmp	r3, #64	; 0x40
 8009778:	d123      	bne.n	80097c2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009788:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978e:	2b00      	cmp	r3, #0
 8009790:	d013      	beq.n	80097ba <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009796:	4a13      	ldr	r2, [pc, #76]	; (80097e4 <HAL_UART_IRQHandler+0x22c>)
 8009798:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fc f86c 	bl	800587c <HAL_DMA_Abort_IT>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d017      	beq.n	80097da <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b8:	e00f      	b.n	80097da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f8ea 	bl	8009994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c0:	e00b      	b.n	80097da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f8e6 	bl	8009994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c8:	e007      	b.n	80097da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f8e2 	bl	8009994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80097d8:	e0d1      	b.n	800997e <HAL_UART_IRQHandler+0x3c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097da:	bf00      	nop
    return;
 80097dc:	e0cf      	b.n	800997e <HAL_UART_IRQHandler+0x3c6>
 80097de:	bf00      	nop
 80097e0:	04000120 	.word	0x04000120
 80097e4:	0800a2c3 	.word	0x0800a2c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	f040 80a3 	bne.w	8009938 <HAL_UART_IRQHandler+0x380>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	f003 0310 	and.w	r3, r3, #16
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 809d 	beq.w	8009938 <HAL_UART_IRQHandler+0x380>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8097 	beq.w	8009938 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2210      	movs	r2, #16
 8009810:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981c:	2b40      	cmp	r3, #64	; 0x40
 800981e:	d152      	bne.n	80098c6 <HAL_UART_IRQHandler+0x30e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800982a:	893b      	ldrh	r3, [r7, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 80a8 	beq.w	8009982 <HAL_UART_IRQHandler+0x3ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009838:	893a      	ldrh	r2, [r7, #8]
 800983a:	429a      	cmp	r2, r3
 800983c:	f080 80a1 	bcs.w	8009982 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	893a      	ldrh	r2, [r7, #8]
 8009844:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009852:	d02a      	beq.n	80098aa <HAL_UART_IRQHandler+0x2f2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009862:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689a      	ldr	r2, [r3, #8]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 0201 	bic.w	r2, r2, #1
 8009872:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009882:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0210 	bic.w	r2, r2, #16
 800989e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fb ff79 	bl	800579c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f872 	bl	80099a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098c4:	e05d      	b.n	8009982 <HAL_UART_IRQHandler+0x3ca>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098de:	b29b      	uxth	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d050      	beq.n	8009986 <HAL_UART_IRQHandler+0x3ce>
          && (nb_rx_data > 0U))
 80098e4:	897b      	ldrh	r3, [r7, #10]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d04d      	beq.n	8009986 <HAL_UART_IRQHandler+0x3ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098f8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 0201 	bic.w	r2, r2, #1
 8009908:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2220      	movs	r2, #32
 800990e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f022 0210 	bic.w	r2, r2, #16
 800992a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800992c:	897b      	ldrh	r3, [r7, #10]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f839 	bl	80099a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009936:	e026      	b.n	8009986 <HAL_UART_IRQHandler+0x3ce>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00d      	beq.n	800995e <HAL_UART_IRQHandler+0x3a6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009948:	2b00      	cmp	r3, #0
 800994a:	d008      	beq.n	800995e <HAL_UART_IRQHandler+0x3a6>
  {
    if (huart->TxISR != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01a      	beq.n	800998a <HAL_UART_IRQHandler+0x3d2>
    {
      huart->TxISR(huart);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	4798      	blx	r3
    }
    return;
 800995c:	e015      	b.n	800998a <HAL_UART_IRQHandler+0x3d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d011      	beq.n	800998c <HAL_UART_IRQHandler+0x3d4>
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00c      	beq.n	800998c <HAL_UART_IRQHandler+0x3d4>
  {
    UART_EndTransmit_IT(huart);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fd32 	bl	800a3dc <UART_EndTransmit_IT>
    return;
 8009978:	e008      	b.n	800998c <HAL_UART_IRQHandler+0x3d4>
      return;
 800997a:	bf00      	nop
 800997c:	e006      	b.n	800998c <HAL_UART_IRQHandler+0x3d4>
    return;
 800997e:	bf00      	nop
 8009980:	e004      	b.n	800998c <HAL_UART_IRQHandler+0x3d4>
      return;
 8009982:	bf00      	nop
 8009984:	e002      	b.n	800998c <HAL_UART_IRQHandler+0x3d4>
      return;
 8009986:	bf00      	nop
 8009988:	e000      	b.n	800998c <HAL_UART_IRQHandler+0x3d4>
    return;
 800998a:	bf00      	nop
  }

}
 800998c:	3720      	adds	r7, #32
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop

08009994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099cc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099d2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	4313      	orrs	r3, r2
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	431a      	orrs	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	4ba6      	ldr	r3, [pc, #664]	; (8009cac <UART_SetConfig+0x2c4>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6812      	ldr	r2, [r2, #0]
 8009a1a:	6979      	ldr	r1, [r7, #20]
 8009a1c:	430b      	orrs	r3, r1
 8009a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	430a      	orrs	r2, r1
 8009a58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a94      	ldr	r2, [pc, #592]	; (8009cb0 <UART_SetConfig+0x2c8>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d120      	bne.n	8009aa6 <UART_SetConfig+0xbe>
 8009a64:	4b93      	ldr	r3, [pc, #588]	; (8009cb4 <UART_SetConfig+0x2cc>)
 8009a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6a:	f003 0303 	and.w	r3, r3, #3
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d816      	bhi.n	8009aa0 <UART_SetConfig+0xb8>
 8009a72:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <UART_SetConfig+0x90>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009a89 	.word	0x08009a89
 8009a7c:	08009a95 	.word	0x08009a95
 8009a80:	08009a8f 	.word	0x08009a8f
 8009a84:	08009a9b 	.word	0x08009a9b
 8009a88:	2301      	movs	r3, #1
 8009a8a:	77fb      	strb	r3, [r7, #31]
 8009a8c:	e150      	b.n	8009d30 <UART_SetConfig+0x348>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	77fb      	strb	r3, [r7, #31]
 8009a92:	e14d      	b.n	8009d30 <UART_SetConfig+0x348>
 8009a94:	2304      	movs	r3, #4
 8009a96:	77fb      	strb	r3, [r7, #31]
 8009a98:	e14a      	b.n	8009d30 <UART_SetConfig+0x348>
 8009a9a:	2308      	movs	r3, #8
 8009a9c:	77fb      	strb	r3, [r7, #31]
 8009a9e:	e147      	b.n	8009d30 <UART_SetConfig+0x348>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	77fb      	strb	r3, [r7, #31]
 8009aa4:	e144      	b.n	8009d30 <UART_SetConfig+0x348>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a83      	ldr	r2, [pc, #524]	; (8009cb8 <UART_SetConfig+0x2d0>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d132      	bne.n	8009b16 <UART_SetConfig+0x12e>
 8009ab0:	4b80      	ldr	r3, [pc, #512]	; (8009cb4 <UART_SetConfig+0x2cc>)
 8009ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab6:	f003 030c 	and.w	r3, r3, #12
 8009aba:	2b0c      	cmp	r3, #12
 8009abc:	d828      	bhi.n	8009b10 <UART_SetConfig+0x128>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <UART_SetConfig+0xdc>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009af9 	.word	0x08009af9
 8009ac8:	08009b11 	.word	0x08009b11
 8009acc:	08009b11 	.word	0x08009b11
 8009ad0:	08009b11 	.word	0x08009b11
 8009ad4:	08009b05 	.word	0x08009b05
 8009ad8:	08009b11 	.word	0x08009b11
 8009adc:	08009b11 	.word	0x08009b11
 8009ae0:	08009b11 	.word	0x08009b11
 8009ae4:	08009aff 	.word	0x08009aff
 8009ae8:	08009b11 	.word	0x08009b11
 8009aec:	08009b11 	.word	0x08009b11
 8009af0:	08009b11 	.word	0x08009b11
 8009af4:	08009b0b 	.word	0x08009b0b
 8009af8:	2300      	movs	r3, #0
 8009afa:	77fb      	strb	r3, [r7, #31]
 8009afc:	e118      	b.n	8009d30 <UART_SetConfig+0x348>
 8009afe:	2302      	movs	r3, #2
 8009b00:	77fb      	strb	r3, [r7, #31]
 8009b02:	e115      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b04:	2304      	movs	r3, #4
 8009b06:	77fb      	strb	r3, [r7, #31]
 8009b08:	e112      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b0a:	2308      	movs	r3, #8
 8009b0c:	77fb      	strb	r3, [r7, #31]
 8009b0e:	e10f      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b10:	2310      	movs	r3, #16
 8009b12:	77fb      	strb	r3, [r7, #31]
 8009b14:	e10c      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a68      	ldr	r2, [pc, #416]	; (8009cbc <UART_SetConfig+0x2d4>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d120      	bne.n	8009b62 <UART_SetConfig+0x17a>
 8009b20:	4b64      	ldr	r3, [pc, #400]	; (8009cb4 <UART_SetConfig+0x2cc>)
 8009b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b2a:	2b30      	cmp	r3, #48	; 0x30
 8009b2c:	d013      	beq.n	8009b56 <UART_SetConfig+0x16e>
 8009b2e:	2b30      	cmp	r3, #48	; 0x30
 8009b30:	d814      	bhi.n	8009b5c <UART_SetConfig+0x174>
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	d009      	beq.n	8009b4a <UART_SetConfig+0x162>
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d810      	bhi.n	8009b5c <UART_SetConfig+0x174>
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <UART_SetConfig+0x15c>
 8009b3e:	2b10      	cmp	r3, #16
 8009b40:	d006      	beq.n	8009b50 <UART_SetConfig+0x168>
 8009b42:	e00b      	b.n	8009b5c <UART_SetConfig+0x174>
 8009b44:	2300      	movs	r3, #0
 8009b46:	77fb      	strb	r3, [r7, #31]
 8009b48:	e0f2      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	77fb      	strb	r3, [r7, #31]
 8009b4e:	e0ef      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b50:	2304      	movs	r3, #4
 8009b52:	77fb      	strb	r3, [r7, #31]
 8009b54:	e0ec      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b56:	2308      	movs	r3, #8
 8009b58:	77fb      	strb	r3, [r7, #31]
 8009b5a:	e0e9      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b5c:	2310      	movs	r3, #16
 8009b5e:	77fb      	strb	r3, [r7, #31]
 8009b60:	e0e6      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a56      	ldr	r2, [pc, #344]	; (8009cc0 <UART_SetConfig+0x2d8>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d120      	bne.n	8009bae <UART_SetConfig+0x1c6>
 8009b6c:	4b51      	ldr	r3, [pc, #324]	; (8009cb4 <UART_SetConfig+0x2cc>)
 8009b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b76:	2bc0      	cmp	r3, #192	; 0xc0
 8009b78:	d013      	beq.n	8009ba2 <UART_SetConfig+0x1ba>
 8009b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8009b7c:	d814      	bhi.n	8009ba8 <UART_SetConfig+0x1c0>
 8009b7e:	2b80      	cmp	r3, #128	; 0x80
 8009b80:	d009      	beq.n	8009b96 <UART_SetConfig+0x1ae>
 8009b82:	2b80      	cmp	r3, #128	; 0x80
 8009b84:	d810      	bhi.n	8009ba8 <UART_SetConfig+0x1c0>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <UART_SetConfig+0x1a8>
 8009b8a:	2b40      	cmp	r3, #64	; 0x40
 8009b8c:	d006      	beq.n	8009b9c <UART_SetConfig+0x1b4>
 8009b8e:	e00b      	b.n	8009ba8 <UART_SetConfig+0x1c0>
 8009b90:	2300      	movs	r3, #0
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	e0cc      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b96:	2302      	movs	r3, #2
 8009b98:	77fb      	strb	r3, [r7, #31]
 8009b9a:	e0c9      	b.n	8009d30 <UART_SetConfig+0x348>
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	77fb      	strb	r3, [r7, #31]
 8009ba0:	e0c6      	b.n	8009d30 <UART_SetConfig+0x348>
 8009ba2:	2308      	movs	r3, #8
 8009ba4:	77fb      	strb	r3, [r7, #31]
 8009ba6:	e0c3      	b.n	8009d30 <UART_SetConfig+0x348>
 8009ba8:	2310      	movs	r3, #16
 8009baa:	77fb      	strb	r3, [r7, #31]
 8009bac:	e0c0      	b.n	8009d30 <UART_SetConfig+0x348>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a44      	ldr	r2, [pc, #272]	; (8009cc4 <UART_SetConfig+0x2dc>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d125      	bne.n	8009c04 <UART_SetConfig+0x21c>
 8009bb8:	4b3e      	ldr	r3, [pc, #248]	; (8009cb4 <UART_SetConfig+0x2cc>)
 8009bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bc6:	d017      	beq.n	8009bf8 <UART_SetConfig+0x210>
 8009bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bcc:	d817      	bhi.n	8009bfe <UART_SetConfig+0x216>
 8009bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd2:	d00b      	beq.n	8009bec <UART_SetConfig+0x204>
 8009bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd8:	d811      	bhi.n	8009bfe <UART_SetConfig+0x216>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <UART_SetConfig+0x1fe>
 8009bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009be2:	d006      	beq.n	8009bf2 <UART_SetConfig+0x20a>
 8009be4:	e00b      	b.n	8009bfe <UART_SetConfig+0x216>
 8009be6:	2300      	movs	r3, #0
 8009be8:	77fb      	strb	r3, [r7, #31]
 8009bea:	e0a1      	b.n	8009d30 <UART_SetConfig+0x348>
 8009bec:	2302      	movs	r3, #2
 8009bee:	77fb      	strb	r3, [r7, #31]
 8009bf0:	e09e      	b.n	8009d30 <UART_SetConfig+0x348>
 8009bf2:	2304      	movs	r3, #4
 8009bf4:	77fb      	strb	r3, [r7, #31]
 8009bf6:	e09b      	b.n	8009d30 <UART_SetConfig+0x348>
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	77fb      	strb	r3, [r7, #31]
 8009bfc:	e098      	b.n	8009d30 <UART_SetConfig+0x348>
 8009bfe:	2310      	movs	r3, #16
 8009c00:	77fb      	strb	r3, [r7, #31]
 8009c02:	e095      	b.n	8009d30 <UART_SetConfig+0x348>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a2f      	ldr	r2, [pc, #188]	; (8009cc8 <UART_SetConfig+0x2e0>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d125      	bne.n	8009c5a <UART_SetConfig+0x272>
 8009c0e:	4b29      	ldr	r3, [pc, #164]	; (8009cb4 <UART_SetConfig+0x2cc>)
 8009c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c1c:	d017      	beq.n	8009c4e <UART_SetConfig+0x266>
 8009c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c22:	d817      	bhi.n	8009c54 <UART_SetConfig+0x26c>
 8009c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c28:	d00b      	beq.n	8009c42 <UART_SetConfig+0x25a>
 8009c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c2e:	d811      	bhi.n	8009c54 <UART_SetConfig+0x26c>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d003      	beq.n	8009c3c <UART_SetConfig+0x254>
 8009c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c38:	d006      	beq.n	8009c48 <UART_SetConfig+0x260>
 8009c3a:	e00b      	b.n	8009c54 <UART_SetConfig+0x26c>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	77fb      	strb	r3, [r7, #31]
 8009c40:	e076      	b.n	8009d30 <UART_SetConfig+0x348>
 8009c42:	2302      	movs	r3, #2
 8009c44:	77fb      	strb	r3, [r7, #31]
 8009c46:	e073      	b.n	8009d30 <UART_SetConfig+0x348>
 8009c48:	2304      	movs	r3, #4
 8009c4a:	77fb      	strb	r3, [r7, #31]
 8009c4c:	e070      	b.n	8009d30 <UART_SetConfig+0x348>
 8009c4e:	2308      	movs	r3, #8
 8009c50:	77fb      	strb	r3, [r7, #31]
 8009c52:	e06d      	b.n	8009d30 <UART_SetConfig+0x348>
 8009c54:	2310      	movs	r3, #16
 8009c56:	77fb      	strb	r3, [r7, #31]
 8009c58:	e06a      	b.n	8009d30 <UART_SetConfig+0x348>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a1b      	ldr	r2, [pc, #108]	; (8009ccc <UART_SetConfig+0x2e4>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d138      	bne.n	8009cd6 <UART_SetConfig+0x2ee>
 8009c64:	4b13      	ldr	r3, [pc, #76]	; (8009cb4 <UART_SetConfig+0x2cc>)
 8009c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009c6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c72:	d017      	beq.n	8009ca4 <UART_SetConfig+0x2bc>
 8009c74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c78:	d82a      	bhi.n	8009cd0 <UART_SetConfig+0x2e8>
 8009c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7e:	d00b      	beq.n	8009c98 <UART_SetConfig+0x2b0>
 8009c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c84:	d824      	bhi.n	8009cd0 <UART_SetConfig+0x2e8>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <UART_SetConfig+0x2aa>
 8009c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c8e:	d006      	beq.n	8009c9e <UART_SetConfig+0x2b6>
 8009c90:	e01e      	b.n	8009cd0 <UART_SetConfig+0x2e8>
 8009c92:	2300      	movs	r3, #0
 8009c94:	77fb      	strb	r3, [r7, #31]
 8009c96:	e04b      	b.n	8009d30 <UART_SetConfig+0x348>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	77fb      	strb	r3, [r7, #31]
 8009c9c:	e048      	b.n	8009d30 <UART_SetConfig+0x348>
 8009c9e:	2304      	movs	r3, #4
 8009ca0:	77fb      	strb	r3, [r7, #31]
 8009ca2:	e045      	b.n	8009d30 <UART_SetConfig+0x348>
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	77fb      	strb	r3, [r7, #31]
 8009ca8:	e042      	b.n	8009d30 <UART_SetConfig+0x348>
 8009caa:	bf00      	nop
 8009cac:	efff69f3 	.word	0xefff69f3
 8009cb0:	40011000 	.word	0x40011000
 8009cb4:	40023800 	.word	0x40023800
 8009cb8:	40004400 	.word	0x40004400
 8009cbc:	40004800 	.word	0x40004800
 8009cc0:	40004c00 	.word	0x40004c00
 8009cc4:	40005000 	.word	0x40005000
 8009cc8:	40011400 	.word	0x40011400
 8009ccc:	40007800 	.word	0x40007800
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	77fb      	strb	r3, [r7, #31]
 8009cd4:	e02c      	b.n	8009d30 <UART_SetConfig+0x348>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a72      	ldr	r2, [pc, #456]	; (8009ea4 <UART_SetConfig+0x4bc>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d125      	bne.n	8009d2c <UART_SetConfig+0x344>
 8009ce0:	4b71      	ldr	r3, [pc, #452]	; (8009ea8 <UART_SetConfig+0x4c0>)
 8009ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009cea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009cee:	d017      	beq.n	8009d20 <UART_SetConfig+0x338>
 8009cf0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009cf4:	d817      	bhi.n	8009d26 <UART_SetConfig+0x33e>
 8009cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cfa:	d00b      	beq.n	8009d14 <UART_SetConfig+0x32c>
 8009cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d00:	d811      	bhi.n	8009d26 <UART_SetConfig+0x33e>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <UART_SetConfig+0x326>
 8009d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d0a:	d006      	beq.n	8009d1a <UART_SetConfig+0x332>
 8009d0c:	e00b      	b.n	8009d26 <UART_SetConfig+0x33e>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	77fb      	strb	r3, [r7, #31]
 8009d12:	e00d      	b.n	8009d30 <UART_SetConfig+0x348>
 8009d14:	2302      	movs	r3, #2
 8009d16:	77fb      	strb	r3, [r7, #31]
 8009d18:	e00a      	b.n	8009d30 <UART_SetConfig+0x348>
 8009d1a:	2304      	movs	r3, #4
 8009d1c:	77fb      	strb	r3, [r7, #31]
 8009d1e:	e007      	b.n	8009d30 <UART_SetConfig+0x348>
 8009d20:	2308      	movs	r3, #8
 8009d22:	77fb      	strb	r3, [r7, #31]
 8009d24:	e004      	b.n	8009d30 <UART_SetConfig+0x348>
 8009d26:	2310      	movs	r3, #16
 8009d28:	77fb      	strb	r3, [r7, #31]
 8009d2a:	e001      	b.n	8009d30 <UART_SetConfig+0x348>
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d38:	d15c      	bne.n	8009df4 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8009d3a:	7ffb      	ldrb	r3, [r7, #31]
 8009d3c:	2b08      	cmp	r3, #8
 8009d3e:	d828      	bhi.n	8009d92 <UART_SetConfig+0x3aa>
 8009d40:	a201      	add	r2, pc, #4	; (adr r2, 8009d48 <UART_SetConfig+0x360>)
 8009d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d46:	bf00      	nop
 8009d48:	08009d6d 	.word	0x08009d6d
 8009d4c:	08009d75 	.word	0x08009d75
 8009d50:	08009d7d 	.word	0x08009d7d
 8009d54:	08009d93 	.word	0x08009d93
 8009d58:	08009d83 	.word	0x08009d83
 8009d5c:	08009d93 	.word	0x08009d93
 8009d60:	08009d93 	.word	0x08009d93
 8009d64:	08009d93 	.word	0x08009d93
 8009d68:	08009d8b 	.word	0x08009d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d6c:	f7fe fa02 	bl	8008174 <HAL_RCC_GetPCLK1Freq>
 8009d70:	61b8      	str	r0, [r7, #24]
        break;
 8009d72:	e013      	b.n	8009d9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d74:	f7fe fa12 	bl	800819c <HAL_RCC_GetPCLK2Freq>
 8009d78:	61b8      	str	r0, [r7, #24]
        break;
 8009d7a:	e00f      	b.n	8009d9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d7c:	4b4b      	ldr	r3, [pc, #300]	; (8009eac <UART_SetConfig+0x4c4>)
 8009d7e:	61bb      	str	r3, [r7, #24]
        break;
 8009d80:	e00c      	b.n	8009d9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d82:	f7fe f925 	bl	8007fd0 <HAL_RCC_GetSysClockFreq>
 8009d86:	61b8      	str	r0, [r7, #24]
        break;
 8009d88:	e008      	b.n	8009d9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d8e:	61bb      	str	r3, [r7, #24]
        break;
 8009d90:	e004      	b.n	8009d9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	77bb      	strb	r3, [r7, #30]
        break;
 8009d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d074      	beq.n	8009e8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	005a      	lsls	r2, r3, #1
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	085b      	lsrs	r3, r3, #1
 8009dac:	441a      	add	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2b0f      	cmp	r3, #15
 8009dbe:	d916      	bls.n	8009dee <UART_SetConfig+0x406>
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc6:	d212      	bcs.n	8009dee <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	f023 030f 	bic.w	r3, r3, #15
 8009dd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	085b      	lsrs	r3, r3, #1
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	89fb      	ldrh	r3, [r7, #14]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	89fa      	ldrh	r2, [r7, #14]
 8009dea:	60da      	str	r2, [r3, #12]
 8009dec:	e04e      	b.n	8009e8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	77bb      	strb	r3, [r7, #30]
 8009df2:	e04b      	b.n	8009e8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009df4:	7ffb      	ldrb	r3, [r7, #31]
 8009df6:	2b08      	cmp	r3, #8
 8009df8:	d827      	bhi.n	8009e4a <UART_SetConfig+0x462>
 8009dfa:	a201      	add	r2, pc, #4	; (adr r2, 8009e00 <UART_SetConfig+0x418>)
 8009dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e00:	08009e25 	.word	0x08009e25
 8009e04:	08009e2d 	.word	0x08009e2d
 8009e08:	08009e35 	.word	0x08009e35
 8009e0c:	08009e4b 	.word	0x08009e4b
 8009e10:	08009e3b 	.word	0x08009e3b
 8009e14:	08009e4b 	.word	0x08009e4b
 8009e18:	08009e4b 	.word	0x08009e4b
 8009e1c:	08009e4b 	.word	0x08009e4b
 8009e20:	08009e43 	.word	0x08009e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e24:	f7fe f9a6 	bl	8008174 <HAL_RCC_GetPCLK1Freq>
 8009e28:	61b8      	str	r0, [r7, #24]
        break;
 8009e2a:	e013      	b.n	8009e54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e2c:	f7fe f9b6 	bl	800819c <HAL_RCC_GetPCLK2Freq>
 8009e30:	61b8      	str	r0, [r7, #24]
        break;
 8009e32:	e00f      	b.n	8009e54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e34:	4b1d      	ldr	r3, [pc, #116]	; (8009eac <UART_SetConfig+0x4c4>)
 8009e36:	61bb      	str	r3, [r7, #24]
        break;
 8009e38:	e00c      	b.n	8009e54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e3a:	f7fe f8c9 	bl	8007fd0 <HAL_RCC_GetSysClockFreq>
 8009e3e:	61b8      	str	r0, [r7, #24]
        break;
 8009e40:	e008      	b.n	8009e54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e46:	61bb      	str	r3, [r7, #24]
        break;
 8009e48:	e004      	b.n	8009e54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	77bb      	strb	r3, [r7, #30]
        break;
 8009e52:	bf00      	nop
    }

    if (pclk != 0U)
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d018      	beq.n	8009e8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	085a      	lsrs	r2, r3, #1
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	441a      	add	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	2b0f      	cmp	r3, #15
 8009e74:	d908      	bls.n	8009e88 <UART_SetConfig+0x4a0>
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e7c:	d204      	bcs.n	8009e88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	60da      	str	r2, [r3, #12]
 8009e86:	e001      	b.n	8009e8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009e98:	7fbb      	ldrb	r3, [r7, #30]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3720      	adds	r7, #32
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	40007c00 	.word	0x40007c00
 8009ea8:	40023800 	.word	0x40023800
 8009eac:	00f42400 	.word	0x00f42400

08009eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00a      	beq.n	8009eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00a      	beq.n	8009efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	430a      	orrs	r2, r1
 8009efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00a      	beq.n	8009f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	f003 0308 	and.w	r3, r3, #8
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00a      	beq.n	8009f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	f003 0310 	and.w	r3, r3, #16
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00a      	beq.n	8009f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	f003 0320 	and.w	r3, r3, #32
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00a      	beq.n	8009f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	430a      	orrs	r2, r1
 8009f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01a      	beq.n	8009fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fae:	d10a      	bne.n	8009fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	605a      	str	r2, [r3, #4]
  }
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af02      	add	r7, sp, #8
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a004:	f7fa fd30 	bl	8004a68 <HAL_GetTick>
 800a008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b08      	cmp	r3, #8
 800a016:	d10e      	bne.n	800a036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f817 	bl	800a05a <UART_WaitOnFlagUntilTimeout>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e00d      	b.n	800a052 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2220      	movs	r2, #32
 800a03a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2220      	movs	r2, #32
 800a040:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	603b      	str	r3, [r7, #0]
 800a066:	4613      	mov	r3, r2
 800a068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a06a:	e05e      	b.n	800a12a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a072:	d05a      	beq.n	800a12a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a074:	f7fa fcf8 	bl	8004a68 <HAL_GetTick>
 800a078:	4602      	mov	r2, r0
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	429a      	cmp	r2, r3
 800a082:	d302      	bcc.n	800a08a <UART_WaitOnFlagUntilTimeout+0x30>
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d11b      	bne.n	800a0c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a098:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	689a      	ldr	r2, [r3, #8]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 0201 	bic.w	r2, r2, #1
 800a0a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e043      	b.n	800a14a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d02c      	beq.n	800a12a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0de:	d124      	bne.n	800a12a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689a      	ldr	r2, [r3, #8]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f022 0201 	bic.w	r2, r2, #1
 800a108:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2220      	movs	r2, #32
 800a10e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2220      	movs	r2, #32
 800a11a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e00f      	b.n	800a14a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	69da      	ldr	r2, [r3, #28]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	4013      	ands	r3, r2
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	429a      	cmp	r2, r3
 800a138:	bf0c      	ite	eq
 800a13a:	2301      	moveq	r3, #1
 800a13c:	2300      	movne	r3, #0
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	461a      	mov	r2, r3
 800a142:	79fb      	ldrb	r3, [r7, #7]
 800a144:	429a      	cmp	r2, r3
 800a146:	d091      	beq.n	800a06c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	4613      	mov	r3, r2
 800a160:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	88fa      	ldrh	r2, [r7, #6]
 800a16c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	88fa      	ldrh	r2, [r7, #6]
 800a174:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a186:	d10e      	bne.n	800a1a6 <UART_Start_Receive_IT+0x52>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d105      	bne.n	800a19c <UART_Start_Receive_IT+0x48>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a196:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a19a:	e02d      	b.n	800a1f8 <UART_Start_Receive_IT+0xa4>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	22ff      	movs	r2, #255	; 0xff
 800a1a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1a4:	e028      	b.n	800a1f8 <UART_Start_Receive_IT+0xa4>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10d      	bne.n	800a1ca <UART_Start_Receive_IT+0x76>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d104      	bne.n	800a1c0 <UART_Start_Receive_IT+0x6c>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	22ff      	movs	r2, #255	; 0xff
 800a1ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1be:	e01b      	b.n	800a1f8 <UART_Start_Receive_IT+0xa4>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	227f      	movs	r2, #127	; 0x7f
 800a1c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1c8:	e016      	b.n	800a1f8 <UART_Start_Receive_IT+0xa4>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1d2:	d10d      	bne.n	800a1f0 <UART_Start_Receive_IT+0x9c>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d104      	bne.n	800a1e6 <UART_Start_Receive_IT+0x92>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	227f      	movs	r2, #127	; 0x7f
 800a1e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1e4:	e008      	b.n	800a1f8 <UART_Start_Receive_IT+0xa4>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	223f      	movs	r2, #63	; 0x3f
 800a1ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1ee:	e003      	b.n	800a1f8 <UART_Start_Receive_IT+0xa4>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2222      	movs	r2, #34	; 0x22
 800a204:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f042 0201 	orr.w	r2, r2, #1
 800a214:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21e:	d107      	bne.n	800a230 <UART_Start_Receive_IT+0xdc>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d103      	bne.n	800a230 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4a0c      	ldr	r2, [pc, #48]	; (800a25c <UART_Start_Receive_IT+0x108>)
 800a22c:	665a      	str	r2, [r3, #100]	; 0x64
 800a22e:	e002      	b.n	800a236 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4a0b      	ldr	r2, [pc, #44]	; (800a260 <UART_Start_Receive_IT+0x10c>)
 800a234:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a24c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3714      	adds	r7, #20
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	0800a4e3 	.word	0x0800a4e3
 800a260:	0800a40f 	.word	0x0800a40f

0800a264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a27a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f022 0201 	bic.w	r2, r2, #1
 800a28a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a290:	2b01      	cmp	r3, #1
 800a292:	d107      	bne.n	800a2a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 0210 	bic.w	r2, r2, #16
 800a2a2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a2b6:	bf00      	nop
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7ff fb57 	bl	8009994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2e6:	bf00      	nop
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2fa:	2b21      	cmp	r3, #33	; 0x21
 800a2fc:	d12a      	bne.n	800a354 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a304:	b29b      	uxth	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d110      	bne.n	800a32c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a318:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a328:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a32a:	e013      	b.n	800a354 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a330:	781a      	ldrb	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a348:	b29b      	uxth	r3, r3
 800a34a:	3b01      	subs	r3, #1
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a36c:	2b21      	cmp	r3, #33	; 0x21
 800a36e:	d12f      	bne.n	800a3d0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a376:	b29b      	uxth	r3, r3
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d110      	bne.n	800a39e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a38a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a39a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a39c:	e018      	b.n	800a3d0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	881b      	ldrh	r3, [r3, #0]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3b2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b8:	1c9a      	adds	r2, r3, #2
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a3d0:	bf00      	nop
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7f6 fffd 	bl	8001400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a41c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a422:	2b22      	cmp	r3, #34	; 0x22
 800a424:	d151      	bne.n	800a4ca <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a42e:	89bb      	ldrh	r3, [r7, #12]
 800a430:	b2d9      	uxtb	r1, r3
 800a432:	89fb      	ldrh	r3, [r7, #14]
 800a434:	b2da      	uxtb	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43a:	400a      	ands	r2, r1
 800a43c:	b2d2      	uxtb	r2, r2
 800a43e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a450:	b29b      	uxth	r3, r3
 800a452:	3b01      	subs	r3, #1
 800a454:	b29a      	uxth	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a462:	b29b      	uxth	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	d138      	bne.n	800a4da <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a476:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689a      	ldr	r2, [r3, #8]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0201 	bic.w	r2, r2, #1
 800a486:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2220      	movs	r2, #32
 800a48c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d10f      	bne.n	800a4bc <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f022 0210 	bic.w	r2, r2, #16
 800a4aa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff fa77 	bl	80099a8 <HAL_UARTEx_RxEventCallback>
 800a4ba:	e002      	b.n	800a4c2 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7f6 ff83 	bl	80013c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4c8:	e007      	b.n	800a4da <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	699a      	ldr	r2, [r3, #24]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 0208 	orr.w	r2, r2, #8
 800a4d8:	619a      	str	r2, [r3, #24]
}
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4f0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4f6:	2b22      	cmp	r3, #34	; 0x22
 800a4f8:	d151      	bne.n	800a59e <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a506:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a508:	89ba      	ldrh	r2, [r7, #12]
 800a50a:	89fb      	ldrh	r3, [r7, #14]
 800a50c:	4013      	ands	r3, r2
 800a50e:	b29a      	uxth	r2, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a518:	1c9a      	adds	r2, r3, #2
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a524:	b29b      	uxth	r3, r3
 800a526:	3b01      	subs	r3, #1
 800a528:	b29a      	uxth	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a536:	b29b      	uxth	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d138      	bne.n	800a5ae <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a54a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 0201 	bic.w	r2, r2, #1
 800a55a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2220      	movs	r2, #32
 800a560:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d10f      	bne.n	800a590 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 0210 	bic.w	r2, r2, #16
 800a57e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff fa0d 	bl	80099a8 <HAL_UARTEx_RxEventCallback>
 800a58e:	e002      	b.n	800a596 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7f6 ff19 	bl	80013c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a59c:	e007      	b.n	800a5ae <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	699a      	ldr	r2, [r3, #24]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f042 0208 	orr.w	r2, r2, #8
 800a5ac:	619a      	str	r2, [r3, #24]
}
 800a5ae:	bf00      	nop
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d027      	beq.n	800a622 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	4b2f      	ldr	r3, [pc, #188]	; (800a698 <FMC_SDRAM_Init+0xe0>)
 800a5dc:	4013      	ands	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a5e8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a5ee:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a5f4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a5fa:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a600:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a606:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a60c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a612:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4313      	orrs	r3, r2
 800a618:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	e032      	b.n	800a688 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a62e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a638:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a63e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4313      	orrs	r3, r2
 800a644:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	4b12      	ldr	r3, [pc, #72]	; (800a698 <FMC_SDRAM_Init+0xe0>)
 800a650:	4013      	ands	r3, r2
 800a652:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a65c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a662:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a668:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a66e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a674:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	4313      	orrs	r3, r2
 800a67a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	ffff8000 	.word	0xffff8000

0800a69c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d02e      	beq.n	800a714 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a6c2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a6d2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a6dc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a6e6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a6f0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a6fa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	3b01      	subs	r3, #1
 800a702:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a704:	4313      	orrs	r3, r2
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	4313      	orrs	r3, r2
 800a70a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	609a      	str	r2, [r3, #8]
 800a712:	e039      	b.n	800a788 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	4b1e      	ldr	r3, [pc, #120]	; (800a798 <FMC_SDRAM_Timing_Init+0xfc>)
 800a71e:	4013      	ands	r3, r2
 800a720:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	3b01      	subs	r3, #1
 800a728:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	3b01      	subs	r3, #1
 800a730:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a732:	4313      	orrs	r3, r2
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	4313      	orrs	r3, r2
 800a738:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a746:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	3b01      	subs	r3, #1
 800a754:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a756:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a760:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	3b01      	subs	r3, #1
 800a768:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a76a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	3b01      	subs	r3, #1
 800a772:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a774:	4313      	orrs	r3, r2
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	4313      	orrs	r3, r2
 800a77a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	371c      	adds	r7, #28
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	ff0f0fff 	.word	0xff0f0fff

0800a79c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	691a      	ldr	r2, [r3, #16]
 800a7ac:	4b0c      	ldr	r3, [pc, #48]	; (800a7e0 <FMC_SDRAM_SendCommand+0x44>)
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	6811      	ldr	r1, [r2, #0]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	6852      	ldr	r2, [r2, #4]
 800a7b8:	4311      	orrs	r1, r2
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	6892      	ldr	r2, [r2, #8]
 800a7be:	3a01      	subs	r2, #1
 800a7c0:	0152      	lsls	r2, r2, #5
 800a7c2:	4311      	orrs	r1, r2
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	68d2      	ldr	r2, [r2, #12]
 800a7c8:	0252      	lsls	r2, r2, #9
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	431a      	orrs	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	ffc00000 	.word	0xffc00000

0800a7e4 <CRC16>:
    0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
    0x41, 0x81, 0x80, 0x40
};

uint16_t CRC16( uint8_t * pucFrame, uint16_t usLen ){
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	807b      	strh	r3, [r7, #2]
    uint8_t           ucCRCHi = 0xFF;
 800a7f0:	23ff      	movs	r3, #255	; 0xff
 800a7f2:	73fb      	strb	r3, [r7, #15]
    uint8_t           ucCRCLo = 0xFF;
 800a7f4:	23ff      	movs	r3, #255	; 0xff
 800a7f6:	73bb      	strb	r3, [r7, #14]
    uint8_t           iIndex;

    while( usLen-- ){
 800a7f8:	e010      	b.n	800a81c <CRC16+0x38>
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	607a      	str	r2, [r7, #4]
 800a800:	781a      	ldrb	r2, [r3, #0]
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	4053      	eors	r3, r2
 800a806:	737b      	strb	r3, [r7, #13]
        ucCRCLo = ( uint8_t )( ucCRCHi ^ aucCRCHi[iIndex] );
 800a808:	7b7b      	ldrb	r3, [r7, #13]
 800a80a:	4a0e      	ldr	r2, [pc, #56]	; (800a844 <CRC16+0x60>)
 800a80c:	5cd2      	ldrb	r2, [r2, r3]
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
 800a810:	4053      	eors	r3, r2
 800a812:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800a814:	7b7b      	ldrb	r3, [r7, #13]
 800a816:	4a0c      	ldr	r2, [pc, #48]	; (800a848 <CRC16+0x64>)
 800a818:	5cd3      	ldrb	r3, [r2, r3]
 800a81a:	73fb      	strb	r3, [r7, #15]
    while( usLen-- ){
 800a81c:	887b      	ldrh	r3, [r7, #2]
 800a81e:	1e5a      	subs	r2, r3, #1
 800a820:	807a      	strh	r2, [r7, #2]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e9      	bne.n	800a7fa <CRC16+0x16>
    }
    return ( uint16_t )( ucCRCHi << 8 | ucCRCLo );
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	b21a      	sxth	r2, r3
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	b21b      	sxth	r3, r3
 800a830:	4313      	orrs	r3, r2
 800a832:	b21b      	sxth	r3, r3
 800a834:	b29b      	uxth	r3, r3
}
 800a836:	4618      	mov	r0, r3
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	08010710 	.word	0x08010710
 800a848:	08010810 	.word	0x08010810

0800a84c <Timer50usTick>:

__IO uint16_t modbus_slave_address = 0;

static MB_STATE state = STATE_START;

void Timer50usTick(void){
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
	++_50us_ticks;
 800a850:	4b12      	ldr	r3, [pc, #72]	; (800a89c <Timer50usTick+0x50>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3301      	adds	r3, #1
 800a856:	4a11      	ldr	r2, [pc, #68]	; (800a89c <Timer50usTick+0x50>)
 800a858:	6013      	str	r3, [r2, #0]
	if(_50us_ticks >= t15_nominal_ticks) t15_expired = true;
 800a85a:	4b10      	ldr	r3, [pc, #64]	; (800a89c <Timer50usTick+0x50>)
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <Timer50usTick+0x54>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d302      	bcc.n	800a86c <Timer50usTick+0x20>
 800a866:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <Timer50usTick+0x58>)
 800a868:	2201      	movs	r2, #1
 800a86a:	701a      	strb	r2, [r3, #0]
	if(_50us_ticks >= t35_nominal_ticks) t35_expired = true;
 800a86c:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <Timer50usTick+0x50>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b0d      	ldr	r3, [pc, #52]	; (800a8a8 <Timer50usTick+0x5c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d302      	bcc.n	800a87e <Timer50usTick+0x32>
 800a878:	4b0c      	ldr	r3, [pc, #48]	; (800a8ac <Timer50usTick+0x60>)
 800a87a:	2201      	movs	r2, #1
 800a87c:	701a      	strb	r2, [r3, #0]
	if(t15_expired && t35_expired){
 800a87e:	4b09      	ldr	r3, [pc, #36]	; (800a8a4 <Timer50usTick+0x58>)
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d006      	beq.n	800a896 <Timer50usTick+0x4a>
 800a888:	4b08      	ldr	r3, [pc, #32]	; (800a8ac <Timer50usTick+0x60>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <Timer50usTick+0x4a>
		Stop50usTimer();
 800a892:	f000 f87f 	bl	800a994 <Stop50usTimer>
	}
}
 800a896:	bf00      	nop
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	200110c8 	.word	0x200110c8
 800a8a0:	200110c0 	.word	0x200110c0
 800a8a4:	200110cc 	.word	0x200110cc
 800a8a8:	200110c4 	.word	0x200110c4
 800a8ac:	200110cd 	.word	0x200110cd

0800a8b0 <SetTimeout>:

void SetTimeout(__IO uint32_t msec){
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
	timeout_time = msec*MB_MSEC_MUL;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2264      	movs	r2, #100	; 0x64
 800a8bc:	fb02 f303 	mul.w	r3, r2, r3
 800a8c0:	4a03      	ldr	r2, [pc, #12]	; (800a8d0 <SetTimeout+0x20>)
 800a8c2:	6013      	str	r3, [r2, #0]
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	200110bc 	.word	0x200110bc

0800a8d4 <TimeoutTick>:

void TimeoutTick(void){
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0
	if(timeout_time > 0) 
 800a8d8:	4b06      	ldr	r3, [pc, #24]	; (800a8f4 <TimeoutTick+0x20>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d004      	beq.n	800a8ea <TimeoutTick+0x16>
		--timeout_time;
 800a8e0:	4b04      	ldr	r3, [pc, #16]	; (800a8f4 <TimeoutTick+0x20>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	4a03      	ldr	r2, [pc, #12]	; (800a8f4 <TimeoutTick+0x20>)
 800a8e8:	6013      	str	r3, [r2, #0]
}
 800a8ea:	bf00      	nop
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	200110bc 	.word	0x200110bc

0800a8f8 <TimeoutPassed>:

bool TimeoutPassed(void){
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
	if(timeout_time <= 0)
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <TimeoutPassed+0x1c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <TimeoutPassed+0x10>
		return true;
 800a904:	2301      	movs	r3, #1
 800a906:	e000      	b.n	800a90a <TimeoutPassed+0x12>
	return false;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	200110bc 	.word	0x200110bc

0800a918 <Set50usTimer>:

void Set50usTimer(uint32_t ticks35, uint32_t ticks15){
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
	Stop50usTimer();
 800a922:	f000 f837 	bl	800a994 <Stop50usTimer>
	t15_expired = false;
 800a926:	4b09      	ldr	r3, [pc, #36]	; (800a94c <Set50usTimer+0x34>)
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
	t35_expired = false;
 800a92c:	4b08      	ldr	r3, [pc, #32]	; (800a950 <Set50usTimer+0x38>)
 800a92e:	2200      	movs	r2, #0
 800a930:	701a      	strb	r2, [r3, #0]
	_50us_timer_started = false;
 800a932:	4b08      	ldr	r3, [pc, #32]	; (800a954 <Set50usTimer+0x3c>)
 800a934:	2200      	movs	r2, #0
 800a936:	701a      	strb	r2, [r3, #0]
	t15_nominal_ticks = ticks15;
 800a938:	4a07      	ldr	r2, [pc, #28]	; (800a958 <Set50usTimer+0x40>)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	6013      	str	r3, [r2, #0]
	t35_nominal_ticks = ticks35;
 800a93e:	4a07      	ldr	r2, [pc, #28]	; (800a95c <Set50usTimer+0x44>)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6013      	str	r3, [r2, #0]
}
 800a944:	bf00      	nop
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	200110cc 	.word	0x200110cc
 800a950:	200110cd 	.word	0x200110cd
 800a954:	200110ce 	.word	0x200110ce
 800a958:	200110c0 	.word	0x200110c0
 800a95c:	200110c4 	.word	0x200110c4

0800a960 <Start50usTimer>:

void Start50usTimer(void){
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
	_50us_ticks = 0;
 800a964:	4b07      	ldr	r3, [pc, #28]	; (800a984 <Start50usTimer+0x24>)
 800a966:	2200      	movs	r2, #0
 800a968:	601a      	str	r2, [r3, #0]
	t15_expired = false;
 800a96a:	4b07      	ldr	r3, [pc, #28]	; (800a988 <Start50usTimer+0x28>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	701a      	strb	r2, [r3, #0]
	t35_expired = false;
 800a970:	4b06      	ldr	r3, [pc, #24]	; (800a98c <Start50usTimer+0x2c>)
 800a972:	2200      	movs	r2, #0
 800a974:	701a      	strb	r2, [r3, #0]
	_50us_timer_started = true;
 800a976:	4b06      	ldr	r3, [pc, #24]	; (800a990 <Start50usTimer+0x30>)
 800a978:	2201      	movs	r2, #1
 800a97a:	701a      	strb	r2, [r3, #0]
	Enable50usTimer();
 800a97c:	f7f6 fbc2 	bl	8001104 <Enable50usTimer>
}
 800a980:	bf00      	nop
 800a982:	bd80      	pop	{r7, pc}
 800a984:	200110c8 	.word	0x200110c8
 800a988:	200110cc 	.word	0x200110cc
 800a98c:	200110cd 	.word	0x200110cd
 800a990:	200110ce 	.word	0x200110ce

0800a994 <Stop50usTimer>:

void Stop50usTimer(void){
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
	_50us_timer_started = false;
 800a998:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <Stop50usTimer+0x14>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
	Disable50usTimer();
 800a99e:	f7f6 fbb8 	bl	8001112 <Disable50usTimer>
}
 800a9a2:	bf00      	nop
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	200110ce 	.word	0x200110ce

0800a9ac <Reset50usTimer>:

void Reset50usTimer(void){
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
	t15_expired = false;
 800a9b0:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <Reset50usTimer+0x20>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
	t35_expired = false;
 800a9b6:	4b06      	ldr	r3, [pc, #24]	; (800a9d0 <Reset50usTimer+0x24>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
	_50us_timer_started = false;
 800a9bc:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <Reset50usTimer+0x28>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	701a      	strb	r2, [r3, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	200110cc 	.word	0x200110cc
 800a9d0:	200110cd 	.word	0x200110cd
 800a9d4:	200110ce 	.word	0x200110ce

0800a9d8 <Ist15Expired>:

bool Ist15Expired(void){
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
	return t15_expired;
 800a9dc:	4b03      	ldr	r3, [pc, #12]	; (800a9ec <Ist15Expired+0x14>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	b2db      	uxtb	r3, r3
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	200110cc 	.word	0x200110cc

0800a9f0 <Ist35Expired>:

bool Ist35Expired(void){
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
	return t35_expired;
 800a9f4:	4b03      	ldr	r3, [pc, #12]	; (800aa04 <Ist35Expired+0x14>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	b2db      	uxtb	r3, r3
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	200110cd 	.word	0x200110cd

0800aa08 <Is50usTimerStarted>:
	
bool Is50usTimerStarted(void){
 800aa08:	b480      	push	{r7}
 800aa0a:	af00      	add	r7, sp, #0
	return _50us_timer_started;
 800aa0c:	4b03      	ldr	r3, [pc, #12]	; (800aa1c <Is50usTimerStarted+0x14>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	b2db      	uxtb	r3, r3
	
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	200110ce 	.word	0x200110ce

0800aa20 <SetCharacterReceived>:

void SetCharacterReceived(bool b){ // to call
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	4603      	mov	r3, r0
 800aa28:	71fb      	strb	r3, [r7, #7]
	character_recieved = b;
 800aa2a:	4a04      	ldr	r2, [pc, #16]	; (800aa3c <SetCharacterReceived+0x1c>)
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	7013      	strb	r3, [r2, #0]
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	200110b6 	.word	0x200110b6

0800aa40 <SetCharacterReadyToTransmit>:

void SetCharacterReadyToTransmit(void){ // to call
 800aa40:	b580      	push	{r7, lr}
 800aa42:	af00      	add	r7, sp, #0
	if(MB_Buf_size > 0)
 800aa44:	4b08      	ldr	r3, [pc, #32]	; (800aa68 <SetCharacterReadyToTransmit+0x28>)
 800aa46:	881b      	ldrh	r3, [r3, #0]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d006      	beq.n	800aa5c <SetCharacterReadyToTransmit+0x1c>
		Communication_Put(MB_Buf_pop());
 800aa4e:	f000 fa29 	bl	800aea4 <MB_Buf_pop>
 800aa52:	4603      	mov	r3, r0
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f6 fb2f 	bl	80010b8 <Communication_Put>
	else
		Communication_Mode(true, false);
}
 800aa5a:	e003      	b.n	800aa64 <SetCharacterReadyToTransmit+0x24>
		Communication_Mode(true, false);
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	2001      	movs	r0, #1
 800aa60:	f7f6 fafa 	bl	8001058 <Communication_Mode>
}
 800aa64:	bf00      	nop
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	200110b4 	.word	0x200110b4

0800aa6c <MB_SendRequest>:

void MB_SendRequest(uint8_t addr, MB_FUNCTION f, uint8_t* datain, uint16_t lenin){
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	603a      	str	r2, [r7, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	4603      	mov	r3, r0
 800aa78:	71fb      	strb	r3, [r7, #7]
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	71bb      	strb	r3, [r7, #6]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	80bb      	strh	r3, [r7, #4]
	int i = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]
	uint16_t crc = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	817b      	strh	r3, [r7, #10]
	while(state != STATE_IDLE || demand_of_emmision); // waiting for IDLE state
 800aa8a:	bf00      	nop
 800aa8c:	4b34      	ldr	r3, [pc, #208]	; (800ab60 <MB_SendRequest+0xf4>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d1fb      	bne.n	800aa8c <MB_SendRequest+0x20>
 800aa94:	4b33      	ldr	r3, [pc, #204]	; (800ab64 <MB_SendRequest+0xf8>)
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1f6      	bne.n	800aa8c <MB_SendRequest+0x20>
	MB_Buf_clear();
 800aa9e:	f000 fa85 	bl	800afac <MB_Buf_clear>
	modbus_slave_address = addr;
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	4b30      	ldr	r3, [pc, #192]	; (800ab68 <MB_SendRequest+0xfc>)
 800aaa8:	801a      	strh	r2, [r3, #0]
	MB_Buf[MB_Buf_size++] = addr;
 800aaaa:	4b30      	ldr	r3, [pc, #192]	; (800ab6c <MB_SendRequest+0x100>)
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	b291      	uxth	r1, r2
 800aab4:	4a2d      	ldr	r2, [pc, #180]	; (800ab6c <MB_SendRequest+0x100>)
 800aab6:	8011      	strh	r1, [r2, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	4a2d      	ldr	r2, [pc, #180]	; (800ab70 <MB_SendRequest+0x104>)
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	5453      	strb	r3, [r2, r1]
	MB_Buf[MB_Buf_size++] = f;
 800aac0:	4b2a      	ldr	r3, [pc, #168]	; (800ab6c <MB_SendRequest+0x100>)
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	b291      	uxth	r1, r2
 800aaca:	4a28      	ldr	r2, [pc, #160]	; (800ab6c <MB_SendRequest+0x100>)
 800aacc:	8011      	strh	r1, [r2, #0]
 800aace:	4619      	mov	r1, r3
 800aad0:	4a27      	ldr	r2, [pc, #156]	; (800ab70 <MB_SendRequest+0x104>)
 800aad2:	79bb      	ldrb	r3, [r7, #6]
 800aad4:	5453      	strb	r3, [r2, r1]
	for(i = 0; i < lenin; ++i)
 800aad6:	2300      	movs	r3, #0
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	e010      	b.n	800aafe <MB_SendRequest+0x92>
		MB_Buf[MB_Buf_size++] = datain[i];
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	441a      	add	r2, r3
 800aae2:	4b22      	ldr	r3, [pc, #136]	; (800ab6c <MB_SendRequest+0x100>)
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	1c59      	adds	r1, r3, #1
 800aaea:	b288      	uxth	r0, r1
 800aaec:	491f      	ldr	r1, [pc, #124]	; (800ab6c <MB_SendRequest+0x100>)
 800aaee:	8008      	strh	r0, [r1, #0]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	7812      	ldrb	r2, [r2, #0]
 800aaf4:	4b1e      	ldr	r3, [pc, #120]	; (800ab70 <MB_SendRequest+0x104>)
 800aaf6:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < lenin; ++i)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3301      	adds	r3, #1
 800aafc:	60fb      	str	r3, [r7, #12]
 800aafe:	88bb      	ldrh	r3, [r7, #4]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	dbea      	blt.n	800aadc <MB_SendRequest+0x70>
	crc = CRC16((uint8_t*)MB_Buf, MB_Buf_size);
 800ab06:	4b19      	ldr	r3, [pc, #100]	; (800ab6c <MB_SendRequest+0x100>)
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4818      	ldr	r0, [pc, #96]	; (800ab70 <MB_SendRequest+0x104>)
 800ab10:	f7ff fe68 	bl	800a7e4 <CRC16>
 800ab14:	4603      	mov	r3, r0
 800ab16:	817b      	strh	r3, [r7, #10]
	MB_Buf[MB_Buf_size++] = crc&0xFF;
 800ab18:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <MB_SendRequest+0x100>)
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	1c5a      	adds	r2, r3, #1
 800ab20:	b291      	uxth	r1, r2
 800ab22:	4a12      	ldr	r2, [pc, #72]	; (800ab6c <MB_SendRequest+0x100>)
 800ab24:	8011      	strh	r1, [r2, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	897b      	ldrh	r3, [r7, #10]
 800ab2a:	b2d9      	uxtb	r1, r3
 800ab2c:	4b10      	ldr	r3, [pc, #64]	; (800ab70 <MB_SendRequest+0x104>)
 800ab2e:	5499      	strb	r1, [r3, r2]
	MB_Buf[MB_Buf_size++] = crc>>8;
 800ab30:	897b      	ldrh	r3, [r7, #10]
 800ab32:	0a1b      	lsrs	r3, r3, #8
 800ab34:	b299      	uxth	r1, r3
 800ab36:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <MB_SendRequest+0x100>)
 800ab38:	881b      	ldrh	r3, [r3, #0]
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	b290      	uxth	r0, r2
 800ab40:	4a0a      	ldr	r2, [pc, #40]	; (800ab6c <MB_SendRequest+0x100>)
 800ab42:	8010      	strh	r0, [r2, #0]
 800ab44:	461a      	mov	r2, r3
 800ab46:	b2c9      	uxtb	r1, r1
 800ab48:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <MB_SendRequest+0x104>)
 800ab4a:	5499      	strb	r1, [r3, r2]
	demand_of_emmision = true;
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <MB_SendRequest+0xf8>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	701a      	strb	r2, [r3, #0]
	response_ready = false;
 800ab52:	4b08      	ldr	r3, [pc, #32]	; (800ab74 <MB_SendRequest+0x108>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	701a      	strb	r2, [r3, #0]
}
 800ab58:	bf00      	nop
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	200110d2 	.word	0x200110d2
 800ab64:	200110b7 	.word	0x200110b7
 800ab68:	200110d0 	.word	0x200110d0
 800ab6c:	200110b4 	.word	0x200110b4
 800ab70:	20010cb4 	.word	0x20010cb4
 800ab74:	200110b8 	.word	0x200110b8

0800ab78 <MB_GetResponse>:

MB_RESPONSE_STATE MB_GetResponse(uint8_t addr, MB_FUNCTION f, uint8_t** dataout, uint16_t* lenout, uint32_t timeout){
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60ba      	str	r2, [r7, #8]
 800ab80:	607b      	str	r3, [r7, #4]
 800ab82:	4603      	mov	r3, r0
 800ab84:	73fb      	strb	r3, [r7, #15]
 800ab86:	460b      	mov	r3, r1
 800ab88:	73bb      	strb	r3, [r7, #14]
	SetTimeout(timeout);
 800ab8a:	69b8      	ldr	r0, [r7, #24]
 800ab8c:	f7ff fe90 	bl	800a8b0 <SetTimeout>
	while(!response_ready && !TimeoutPassed());
 800ab90:	bf00      	nop
 800ab92:	4b24      	ldr	r3, [pc, #144]	; (800ac24 <MB_GetResponse+0xac>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	f083 0301 	eor.w	r3, r3, #1
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d007      	beq.n	800abb2 <MB_GetResponse+0x3a>
 800aba2:	f7ff fea9 	bl	800a8f8 <TimeoutPassed>
 800aba6:	4603      	mov	r3, r0
 800aba8:	f083 0301 	eor.w	r3, r3, #1
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1ef      	bne.n	800ab92 <MB_GetResponse+0x1a>
	
	*dataout = (uint8_t*)MB_Buf+2;
 800abb2:	4a1d      	ldr	r2, [pc, #116]	; (800ac28 <MB_GetResponse+0xb0>)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	601a      	str	r2, [r3, #0]
	if((MB_Buf_size - 2 /*ADDR,FUN*/ - 2 /*CRC*/) < 0) *lenout = 0;
 800abb8:	4b1c      	ldr	r3, [pc, #112]	; (800ac2c <MB_GetResponse+0xb4>)
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d803      	bhi.n	800abca <MB_GetResponse+0x52>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	801a      	strh	r2, [r3, #0]
 800abc8:	e006      	b.n	800abd8 <MB_GetResponse+0x60>
	else *lenout = MB_Buf_size - 2 /*ADDR,FUN*/ - 2 /*CRC*/;
 800abca:	4b18      	ldr	r3, [pc, #96]	; (800ac2c <MB_GetResponse+0xb4>)
 800abcc:	881b      	ldrh	r3, [r3, #0]
 800abce:	b29b      	uxth	r3, r3
 800abd0:	3b04      	subs	r3, #4
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	801a      	strh	r2, [r3, #0]
	
	if(TimeoutPassed()) return RESPONSE_TIMEOUT;
 800abd8:	f7ff fe8e 	bl	800a8f8 <TimeoutPassed>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <MB_GetResponse+0x6e>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e019      	b.n	800ac1a <MB_GetResponse+0xa2>
	if(addr != MB_Buf[0]) return RESPONSE_WRONG_ADDRESS;
 800abe6:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <MB_GetResponse+0xb8>)
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	b2db      	uxtb	r3, r3
 800abec:	7bfa      	ldrb	r2, [r7, #15]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d001      	beq.n	800abf6 <MB_GetResponse+0x7e>
 800abf2:	2302      	movs	r3, #2
 800abf4:	e011      	b.n	800ac1a <MB_GetResponse+0xa2>
	if(f != ((MB_FUNCTION) MB_Buf[1])){ 
 800abf6:	4b0e      	ldr	r3, [pc, #56]	; (800ac30 <MB_GetResponse+0xb8>)
 800abf8:	785b      	ldrb	r3, [r3, #1]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	7bba      	ldrb	r2, [r7, #14]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d00a      	beq.n	800ac18 <MB_GetResponse+0xa0>
		if(f+0x80 == ((MB_FUNCTION) MB_Buf[1]))
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
 800ac04:	3380      	adds	r3, #128	; 0x80
 800ac06:	4a0a      	ldr	r2, [pc, #40]	; (800ac30 <MB_GetResponse+0xb8>)
 800ac08:	7852      	ldrb	r2, [r2, #1]
 800ac0a:	b2d2      	uxtb	r2, r2
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d101      	bne.n	800ac14 <MB_GetResponse+0x9c>
			return RESPONSE_ERROR;
 800ac10:	2304      	movs	r3, #4
 800ac12:	e002      	b.n	800ac1a <MB_GetResponse+0xa2>
		else
			return RESPONSE_WRONG_FUNCTION;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e000      	b.n	800ac1a <MB_GetResponse+0xa2>
	}
	
	return RESPONSE_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	200110b8 	.word	0x200110b8
 800ac28:	20010cb6 	.word	0x20010cb6
 800ac2c:	200110b4 	.word	0x200110b4
 800ac30:	20010cb4 	.word	0x20010cb4

0800ac34 <MB_Config>:

void MB_Config(uint32_t baudrate){
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
	if(baudrate > 19200)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800ac42:	d904      	bls.n	800ac4e <MB_Config+0x1a>
		Set50usTimer(35, 15);
 800ac44:	210f      	movs	r1, #15
 800ac46:	2023      	movs	r0, #35	; 0x23
 800ac48:	f7ff fe66 	bl	800a918 <Set50usTimer>
 800ac4c:	e00d      	b.n	800ac6a <MB_Config+0x36>
	else	
		Set50usTimer((7UL*220000UL)/(2UL*baudrate), (3UL*220000UL)/(2UL*baudrate));
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	4a09      	ldr	r2, [pc, #36]	; (800ac78 <MB_Config+0x44>)
 800ac54:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	4907      	ldr	r1, [pc, #28]	; (800ac7c <MB_Config+0x48>)
 800ac5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac62:	4619      	mov	r1, r3
 800ac64:	4610      	mov	r0, r2
 800ac66:	f7ff fe57 	bl	800a918 <Set50usTimer>
	Stop50usTimer();
 800ac6a:	f7ff fe93 	bl	800a994 <Stop50usTimer>
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	00177fa0 	.word	0x00177fa0
 800ac7c:	000a1220 	.word	0x000a1220

0800ac80 <MB>:

void MB(void){
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
	switch(state){
 800ac84:	4b6f      	ldr	r3, [pc, #444]	; (800ae44 <MB+0x1c4>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b05      	cmp	r3, #5
 800ac8a:	f200 80ca 	bhi.w	800ae22 <MB+0x1a2>
 800ac8e:	a201      	add	r2, pc, #4	; (adr r2, 800ac94 <MB+0x14>)
 800ac90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac94:	0800acad 	.word	0x0800acad
 800ac98:	0800acc1 	.word	0x0800acc1
 800ac9c:	0800acf1 	.word	0x0800acf1
 800aca0:	0800ad2f 	.word	0x0800ad2f
 800aca4:	0800ad91 	.word	0x0800ad91
 800aca8:	0800adc5 	.word	0x0800adc5
		case STATE_START: // starting timer
			Start50usTimer();
 800acac:	f7ff fe58 	bl	800a960 <Start50usTimer>
			Communication_Mode(true, false);
 800acb0:	2100      	movs	r1, #0
 800acb2:	2001      	movs	r0, #1
 800acb4:	f7f6 f9d0 	bl	8001058 <Communication_Mode>
			state = STATE_INITIAL;
 800acb8:	4b62      	ldr	r3, [pc, #392]	; (800ae44 <MB+0x1c4>)
 800acba:	2201      	movs	r2, #1
 800acbc:	701a      	strb	r2, [r3, #0]
			break;
 800acbe:	e0be      	b.n	800ae3e <MB+0x1be>
		case STATE_INITIAL: // waiting for t3.5
			if(Ist35Expired()){
 800acc0:	f7ff fe96 	bl	800a9f0 <Ist35Expired>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d007      	beq.n	800acda <MB+0x5a>
				Stop50usTimer();
 800acca:	f7ff fe63 	bl	800a994 <Stop50usTimer>
				Reset50usTimer();
 800acce:	f7ff fe6d 	bl	800a9ac <Reset50usTimer>
				state = STATE_IDLE; // go to the next state
 800acd2:	4b5c      	ldr	r3, [pc, #368]	; (800ae44 <MB+0x1c4>)
 800acd4:	2202      	movs	r2, #2
 800acd6:	701a      	strb	r2, [r3, #0]
				Communication_Get();
				Start50usTimer(); // restart timer
			} else {
				// keep waiting
			}
			break;
 800acd8:	e0a8      	b.n	800ae2c <MB+0x1ac>
			} else if(character_recieved){
 800acda:	4b5b      	ldr	r3, [pc, #364]	; (800ae48 <MB+0x1c8>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 80a3 	beq.w	800ae2c <MB+0x1ac>
				Communication_Get();
 800ace6:	f7f6 f9f9 	bl	80010dc <Communication_Get>
				Start50usTimer(); // restart timer
 800acea:	f7ff fe39 	bl	800a960 <Start50usTimer>
			break;
 800acee:	e09d      	b.n	800ae2c <MB+0x1ac>
		case STATE_IDLE:
			if(demand_of_emmision){ // first we send, ...
 800acf0:	4b56      	ldr	r3, [pc, #344]	; (800ae4c <MB+0x1cc>)
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d007      	beq.n	800ad0a <MB+0x8a>
				Communication_Mode(false, false);
 800acfa:	2100      	movs	r1, #0
 800acfc:	2000      	movs	r0, #0
 800acfe:	f7f6 f9ab 	bl	8001058 <Communication_Mode>
				state = STATE_EMISSION;
 800ad02:	4b50      	ldr	r3, [pc, #320]	; (800ae44 <MB+0x1c4>)
 800ad04:	2203      	movs	r2, #3
 800ad06:	701a      	strb	r2, [r3, #0]
				Start50usTimer();
				state = STATE_RECEPTION;				
			} else {
				// keep waiting
			}
			break;
 800ad08:	e092      	b.n	800ae30 <MB+0x1b0>
			} else if (character_recieved){        // ... then we receive
 800ad0a:	4b4f      	ldr	r3, [pc, #316]	; (800ae48 <MB+0x1c8>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 808d 	beq.w	800ae30 <MB+0x1b0>
				MB_Buf_append(Communication_Get());
 800ad16:	f7f6 f9e1 	bl	80010dc <Communication_Get>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 f89d 	bl	800ae5c <MB_Buf_append>
				Start50usTimer();
 800ad22:	f7ff fe1d 	bl	800a960 <Start50usTimer>
				state = STATE_RECEPTION;				
 800ad26:	4b47      	ldr	r3, [pc, #284]	; (800ae44 <MB+0x1c4>)
 800ad28:	2204      	movs	r2, #4
 800ad2a:	701a      	strb	r2, [r3, #0]
			break;
 800ad2c:	e080      	b.n	800ae30 <MB+0x1b0>
		case STATE_EMISSION:
			demand_of_emmision = false;
 800ad2e:	4b47      	ldr	r3, [pc, #284]	; (800ae4c <MB+0x1cc>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	701a      	strb	r2, [r3, #0]
			if(Ist35Expired()){
 800ad34:	f7ff fe5c 	bl	800a9f0 <Ist35Expired>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00e      	beq.n	800ad5c <MB+0xdc>
				Reset50usTimer();
 800ad3e:	f7ff fe35 	bl	800a9ac <Reset50usTimer>
				state = STATE_IDLE;
 800ad42:	4b40      	ldr	r3, [pc, #256]	; (800ae44 <MB+0x1c4>)
 800ad44:	2202      	movs	r2, #2
 800ad46:	701a      	strb	r2, [r3, #0]
				response_ready = false;
 800ad48:	4b41      	ldr	r3, [pc, #260]	; (800ae50 <MB+0x1d0>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	701a      	strb	r2, [r3, #0]
				MB_Buf_clear();
 800ad4e:	f000 f92d 	bl	800afac <MB_Buf_clear>
				Communication_Mode(true, false);
 800ad52:	2100      	movs	r1, #0
 800ad54:	2001      	movs	r0, #1
 800ad56:	f7f6 f97f 	bl	8001058 <Communication_Mode>
			} else if (MB_Buf_size > 0){
				Communication_Mode(false, true);
			} else {
				// keep waiting
			}
			break;
 800ad5a:	e06b      	b.n	800ae34 <MB+0x1b4>
			} else if (MB_Buf_size == 0 && !Is50usTimerStarted()){
 800ad5c:	4b3d      	ldr	r3, [pc, #244]	; (800ae54 <MB+0x1d4>)
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10a      	bne.n	800ad7c <MB+0xfc>
 800ad66:	f7ff fe4f 	bl	800aa08 <Is50usTimerStarted>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	f083 0301 	eor.w	r3, r3, #1
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <MB+0xfc>
				Start50usTimer();
 800ad76:	f7ff fdf3 	bl	800a960 <Start50usTimer>
			break;
 800ad7a:	e05b      	b.n	800ae34 <MB+0x1b4>
			} else if (MB_Buf_size > 0){
 800ad7c:	4b35      	ldr	r3, [pc, #212]	; (800ae54 <MB+0x1d4>)
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d056      	beq.n	800ae34 <MB+0x1b4>
				Communication_Mode(false, true);
 800ad86:	2101      	movs	r1, #1
 800ad88:	2000      	movs	r0, #0
 800ad8a:	f7f6 f965 	bl	8001058 <Communication_Mode>
			break;
 800ad8e:	e051      	b.n	800ae34 <MB+0x1b4>
		case STATE_RECEPTION:
			if(Ist15Expired()){
 800ad90:	f7ff fe22 	bl	800a9d8 <Ist15Expired>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d006      	beq.n	800ada8 <MB+0x128>
				state = STATE_CONTROL_AND_WAITING; // do not stop timers!
 800ad9a:	4b2a      	ldr	r3, [pc, #168]	; (800ae44 <MB+0x1c4>)
 800ad9c:	2205      	movs	r2, #5
 800ad9e:	701a      	strb	r2, [r3, #0]
				frame_ok = true;
 800ada0:	4b2d      	ldr	r3, [pc, #180]	; (800ae58 <MB+0x1d8>)
 800ada2:	2201      	movs	r2, #1
 800ada4:	701a      	strb	r2, [r3, #0]
				MB_Buf_append(Communication_Get());
				Start50usTimer();
			}	 else {
				// keep waiting
			}
			break;
 800ada6:	e047      	b.n	800ae38 <MB+0x1b8>
			} else if(character_recieved){
 800ada8:	4b27      	ldr	r3, [pc, #156]	; (800ae48 <MB+0x1c8>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d042      	beq.n	800ae38 <MB+0x1b8>
				MB_Buf_append(Communication_Get());
 800adb2:	f7f6 f993 	bl	80010dc <Communication_Get>
 800adb6:	4603      	mov	r3, r0
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f84f 	bl	800ae5c <MB_Buf_append>
				Start50usTimer();
 800adbe:	f7ff fdcf 	bl	800a960 <Start50usTimer>
			break;
 800adc2:	e039      	b.n	800ae38 <MB+0x1b8>
		case STATE_CONTROL_AND_WAITING:
			frame_ok = MB_Buf_control();
 800adc4:	f000 f8c2 	bl	800af4c <MB_Buf_control>
 800adc8:	4603      	mov	r3, r0
 800adca:	461a      	mov	r2, r3
 800adcc:	4b22      	ldr	r3, [pc, #136]	; (800ae58 <MB+0x1d8>)
 800adce:	701a      	strb	r2, [r3, #0]
			if(character_recieved && !Ist35Expired()){
 800add0:	4b1d      	ldr	r3, [pc, #116]	; (800ae48 <MB+0x1c8>)
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00b      	beq.n	800adf2 <MB+0x172>
 800adda:	f7ff fe09 	bl	800a9f0 <Ist35Expired>
 800adde:	4603      	mov	r3, r0
 800ade0:	f083 0301 	eor.w	r3, r3, #1
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <MB+0x172>
				frame_ok = false;
 800adea:	4b1b      	ldr	r3, [pc, #108]	; (800ae58 <MB+0x1d8>)
 800adec:	2200      	movs	r2, #0
 800adee:	701a      	strb	r2, [r3, #0]
				}
				state = STATE_IDLE;
			} else {
				// keep waiting
			}
			break;
 800adf0:	e024      	b.n	800ae3c <MB+0x1bc>
			} else if (Ist35Expired()){
 800adf2:	f7ff fdfd 	bl	800a9f0 <Ist35Expired>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d01f      	beq.n	800ae3c <MB+0x1bc>
				Reset50usTimer();
 800adfc:	f7ff fdd6 	bl	800a9ac <Reset50usTimer>
				if(frame_ok){ // if frame OK  -> processing frame
 800ae00:	4b15      	ldr	r3, [pc, #84]	; (800ae58 <MB+0x1d8>)
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d005      	beq.n	800ae16 <MB+0x196>
						MB_Buf_process_master();
 800ae0a:	f000 f8c7 	bl	800af9c <MB_Buf_process_master>
					response_ready = true;
 800ae0e:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <MB+0x1d0>)
 800ae10:	2201      	movs	r2, #1
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	e001      	b.n	800ae1a <MB+0x19a>
					MB_Buf_clear();
 800ae16:	f000 f8c9 	bl	800afac <MB_Buf_clear>
				state = STATE_IDLE;
 800ae1a:	4b0a      	ldr	r3, [pc, #40]	; (800ae44 <MB+0x1c4>)
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	701a      	strb	r2, [r3, #0]
			break;
 800ae20:	e00c      	b.n	800ae3c <MB+0x1bc>
		default:
			Communication_Mode(false, false);
 800ae22:	2100      	movs	r1, #0
 800ae24:	2000      	movs	r0, #0
 800ae26:	f7f6 f917 	bl	8001058 <Communication_Mode>
			while(1); // something went terribly wrong
 800ae2a:	e7fe      	b.n	800ae2a <MB+0x1aa>
			break;
 800ae2c:	bf00      	nop
 800ae2e:	e006      	b.n	800ae3e <MB+0x1be>
			break;
 800ae30:	bf00      	nop
 800ae32:	e004      	b.n	800ae3e <MB+0x1be>
			break;
 800ae34:	bf00      	nop
 800ae36:	e002      	b.n	800ae3e <MB+0x1be>
			break;
 800ae38:	bf00      	nop
 800ae3a:	e000      	b.n	800ae3e <MB+0x1be>
			break;
 800ae3c:	bf00      	nop
	}
}
 800ae3e:	bf00      	nop
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	200110d2 	.word	0x200110d2
 800ae48:	200110b6 	.word	0x200110b6
 800ae4c:	200110b7 	.word	0x200110b7
 800ae50:	200110b8 	.word	0x200110b8
 800ae54:	200110b4 	.word	0x200110b4
 800ae58:	20000825 	.word	0x20000825

0800ae5c <MB_Buf_append>:

bool MB_Buf_append(uint8_t ch){
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	4603      	mov	r3, r0
 800ae64:	71fb      	strb	r3, [r7, #7]
	if(MB_Buf_size >= MB_BUF_SIZE_MAX)
 800ae66:	4b0d      	ldr	r3, [pc, #52]	; (800ae9c <MB_Buf_append+0x40>)
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae70:	d301      	bcc.n	800ae76 <MB_Buf_append+0x1a>
		return false;
 800ae72:	2300      	movs	r3, #0
 800ae74:	e00b      	b.n	800ae8e <MB_Buf_append+0x32>
	MB_Buf[MB_Buf_size++] = ch;
 800ae76:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <MB_Buf_append+0x40>)
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	b291      	uxth	r1, r2
 800ae80:	4a06      	ldr	r2, [pc, #24]	; (800ae9c <MB_Buf_append+0x40>)
 800ae82:	8011      	strh	r1, [r2, #0]
 800ae84:	4619      	mov	r1, r3
 800ae86:	4a06      	ldr	r2, [pc, #24]	; (800aea0 <MB_Buf_append+0x44>)
 800ae88:	79fb      	ldrb	r3, [r7, #7]
 800ae8a:	5453      	strb	r3, [r2, r1]
	return true;
 800ae8c:	2301      	movs	r3, #1
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	200110b4 	.word	0x200110b4
 800aea0:	20010cb4 	.word	0x20010cb4

0800aea4 <MB_Buf_pop>:

uint8_t MB_Buf_pop(void){
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
	uint8_t tmp;
	int i = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	607b      	str	r3, [r7, #4]
	bool full = false;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	70fb      	strb	r3, [r7, #3]
	if(MB_Buf_size == MB_BUF_SIZE_MAX){
 800aeb2:	4b24      	ldr	r3, [pc, #144]	; (800af44 <MB_Buf_pop+0xa0>)
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aebc:	d108      	bne.n	800aed0 <MB_Buf_pop+0x2c>
		full = true;
 800aebe:	2301      	movs	r3, #1
 800aec0:	70fb      	strb	r3, [r7, #3]
		--MB_Buf_size;
 800aec2:	4b20      	ldr	r3, [pc, #128]	; (800af44 <MB_Buf_pop+0xa0>)
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	3b01      	subs	r3, #1
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	4b1d      	ldr	r3, [pc, #116]	; (800af44 <MB_Buf_pop+0xa0>)
 800aece:	801a      	strh	r2, [r3, #0]
	}
	if(MB_Buf_size == 0){
 800aed0:	4b1c      	ldr	r3, [pc, #112]	; (800af44 <MB_Buf_pop+0xa0>)
 800aed2:	881b      	ldrh	r3, [r3, #0]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <MB_Buf_pop+0x3a>
		return 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	e02c      	b.n	800af38 <MB_Buf_pop+0x94>
	}
	tmp = MB_Buf[0];
 800aede:	4b1a      	ldr	r3, [pc, #104]	; (800af48 <MB_Buf_pop+0xa4>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	70bb      	strb	r3, [r7, #2]
	for(i=0; i<MB_Buf_size;++i) // from 0 to max 1023
 800aee4:	2300      	movs	r3, #0
 800aee6:	607b      	str	r3, [r7, #4]
 800aee8:	e00c      	b.n	800af04 <MB_Buf_pop+0x60>
		MB_Buf[i] = MB_Buf[i+1];
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3301      	adds	r3, #1
 800aeee:	4a16      	ldr	r2, [pc, #88]	; (800af48 <MB_Buf_pop+0xa4>)
 800aef0:	5cd3      	ldrb	r3, [r2, r3]
 800aef2:	b2d9      	uxtb	r1, r3
 800aef4:	4a14      	ldr	r2, [pc, #80]	; (800af48 <MB_Buf_pop+0xa4>)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4413      	add	r3, r2
 800aefa:	460a      	mov	r2, r1
 800aefc:	701a      	strb	r2, [r3, #0]
	for(i=0; i<MB_Buf_size;++i) // from 0 to max 1023
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3301      	adds	r3, #1
 800af02:	607b      	str	r3, [r7, #4]
 800af04:	4b0f      	ldr	r3, [pc, #60]	; (800af44 <MB_Buf_pop+0xa0>)
 800af06:	881b      	ldrh	r3, [r3, #0]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	461a      	mov	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4293      	cmp	r3, r2
 800af10:	dbeb      	blt.n	800aeea <MB_Buf_pop+0x46>
	if(full) MB_Buf[MB_Buf_size] = 0; // if MB_Buf_size == MB_Buf_size_MAX, we have to perform last assignment ourself
 800af12:	78fb      	ldrb	r3, [r7, #3]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d007      	beq.n	800af28 <MB_Buf_pop+0x84>
 800af18:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <MB_Buf_pop+0xa0>)
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	461a      	mov	r2, r3
 800af20:	4b09      	ldr	r3, [pc, #36]	; (800af48 <MB_Buf_pop+0xa4>)
 800af22:	2100      	movs	r1, #0
 800af24:	5499      	strb	r1, [r3, r2]
 800af26:	e006      	b.n	800af36 <MB_Buf_pop+0x92>
	else --MB_Buf_size;               // if full, then MB_Buf_size is already decremented, otherwise decrement now
 800af28:	4b06      	ldr	r3, [pc, #24]	; (800af44 <MB_Buf_pop+0xa0>)
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	3b01      	subs	r3, #1
 800af30:	b29a      	uxth	r2, r3
 800af32:	4b04      	ldr	r3, [pc, #16]	; (800af44 <MB_Buf_pop+0xa0>)
 800af34:	801a      	strh	r2, [r3, #0]
	return tmp;
 800af36:	78bb      	ldrb	r3, [r7, #2]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	200110b4 	.word	0x200110b4
 800af48:	20010cb4 	.word	0x20010cb4

0800af4c <MB_Buf_control>:

bool MB_Buf_control(void){
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
	#if MB_MASTER
		if(MB_Buf[0] != modbus_slave_address && MB_Buf[0] != MB_BROADCAST_ADDRESS) 
 800af50:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <MB_Buf_control+0x44>)
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	b29a      	uxth	r2, r3
 800af58:	4b0e      	ldr	r3, [pc, #56]	; (800af94 <MB_Buf_control+0x48>)
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	429a      	cmp	r2, r3
 800af60:	d006      	beq.n	800af70 <MB_Buf_control+0x24>
 800af62:	4b0b      	ldr	r3, [pc, #44]	; (800af90 <MB_Buf_control+0x44>)
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <MB_Buf_control+0x24>
			return false;
 800af6c:	2300      	movs	r3, #0
 800af6e:	e00c      	b.n	800af8a <MB_Buf_control+0x3e>
	#endif
	if(CRC16((uint8_t*)MB_Buf, MB_Buf_size) != 0)	return false;
 800af70:	4b09      	ldr	r3, [pc, #36]	; (800af98 <MB_Buf_control+0x4c>)
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	b29b      	uxth	r3, r3
 800af76:	4619      	mov	r1, r3
 800af78:	4805      	ldr	r0, [pc, #20]	; (800af90 <MB_Buf_control+0x44>)
 800af7a:	f7ff fc33 	bl	800a7e4 <CRC16>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <MB_Buf_control+0x3c>
 800af84:	2300      	movs	r3, #0
 800af86:	e000      	b.n	800af8a <MB_Buf_control+0x3e>
	return true;
 800af88:	2301      	movs	r3, #1
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	20010cb4 	.word	0x20010cb4
 800af94:	200110d0 	.word	0x200110d0
 800af98:	200110b4 	.word	0x200110b4

0800af9c <MB_Buf_process_master>:

void MB_Buf_process_master(void){
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
}
 800afa0:	bf00      	nop
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
	...

0800afac <MB_Buf_clear>:
			demand_of_emmision = true;
			break;
	}
}

void MB_Buf_clear(void){
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
	int i = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	607b      	str	r3, [r7, #4]
	for(i=0; i<MB_Buf_size; ++i){
 800afb6:	2300      	movs	r3, #0
 800afb8:	607b      	str	r3, [r7, #4]
 800afba:	e007      	b.n	800afcc <MB_Buf_clear+0x20>
		MB_Buf[i] = 0;
 800afbc:	4a0b      	ldr	r2, [pc, #44]	; (800afec <MB_Buf_clear+0x40>)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4413      	add	r3, r2
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
	for(i=0; i<MB_Buf_size; ++i){
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3301      	adds	r3, #1
 800afca:	607b      	str	r3, [r7, #4]
 800afcc:	4b08      	ldr	r3, [pc, #32]	; (800aff0 <MB_Buf_clear+0x44>)
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	461a      	mov	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4293      	cmp	r3, r2
 800afd8:	dbf0      	blt.n	800afbc <MB_Buf_clear+0x10>
	}
	MB_Buf_size = 0;
 800afda:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <MB_Buf_clear+0x44>)
 800afdc:	2200      	movs	r2, #0
 800afde:	801a      	strh	r2, [r3, #0]
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr
 800afec:	20010cb4 	.word	0x20010cb4
 800aff0:	200110b4 	.word	0x200110b4

0800aff4 <__cvt>:
 800aff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aff8:	ec55 4b10 	vmov	r4, r5, d0
 800affc:	2d00      	cmp	r5, #0
 800affe:	460e      	mov	r6, r1
 800b000:	4619      	mov	r1, r3
 800b002:	462b      	mov	r3, r5
 800b004:	bfbb      	ittet	lt
 800b006:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b00a:	461d      	movlt	r5, r3
 800b00c:	2300      	movge	r3, #0
 800b00e:	232d      	movlt	r3, #45	; 0x2d
 800b010:	700b      	strb	r3, [r1, #0]
 800b012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b014:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b018:	4691      	mov	r9, r2
 800b01a:	f023 0820 	bic.w	r8, r3, #32
 800b01e:	bfbc      	itt	lt
 800b020:	4622      	movlt	r2, r4
 800b022:	4614      	movlt	r4, r2
 800b024:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b028:	d005      	beq.n	800b036 <__cvt+0x42>
 800b02a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b02e:	d100      	bne.n	800b032 <__cvt+0x3e>
 800b030:	3601      	adds	r6, #1
 800b032:	2102      	movs	r1, #2
 800b034:	e000      	b.n	800b038 <__cvt+0x44>
 800b036:	2103      	movs	r1, #3
 800b038:	ab03      	add	r3, sp, #12
 800b03a:	9301      	str	r3, [sp, #4]
 800b03c:	ab02      	add	r3, sp, #8
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	ec45 4b10 	vmov	d0, r4, r5
 800b044:	4653      	mov	r3, sl
 800b046:	4632      	mov	r2, r6
 800b048:	f000 fe6a 	bl	800bd20 <_dtoa_r>
 800b04c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b050:	4607      	mov	r7, r0
 800b052:	d102      	bne.n	800b05a <__cvt+0x66>
 800b054:	f019 0f01 	tst.w	r9, #1
 800b058:	d022      	beq.n	800b0a0 <__cvt+0xac>
 800b05a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b05e:	eb07 0906 	add.w	r9, r7, r6
 800b062:	d110      	bne.n	800b086 <__cvt+0x92>
 800b064:	783b      	ldrb	r3, [r7, #0]
 800b066:	2b30      	cmp	r3, #48	; 0x30
 800b068:	d10a      	bne.n	800b080 <__cvt+0x8c>
 800b06a:	2200      	movs	r2, #0
 800b06c:	2300      	movs	r3, #0
 800b06e:	4620      	mov	r0, r4
 800b070:	4629      	mov	r1, r5
 800b072:	f7f5 fd49 	bl	8000b08 <__aeabi_dcmpeq>
 800b076:	b918      	cbnz	r0, 800b080 <__cvt+0x8c>
 800b078:	f1c6 0601 	rsb	r6, r6, #1
 800b07c:	f8ca 6000 	str.w	r6, [sl]
 800b080:	f8da 3000 	ldr.w	r3, [sl]
 800b084:	4499      	add	r9, r3
 800b086:	2200      	movs	r2, #0
 800b088:	2300      	movs	r3, #0
 800b08a:	4620      	mov	r0, r4
 800b08c:	4629      	mov	r1, r5
 800b08e:	f7f5 fd3b 	bl	8000b08 <__aeabi_dcmpeq>
 800b092:	b108      	cbz	r0, 800b098 <__cvt+0xa4>
 800b094:	f8cd 900c 	str.w	r9, [sp, #12]
 800b098:	2230      	movs	r2, #48	; 0x30
 800b09a:	9b03      	ldr	r3, [sp, #12]
 800b09c:	454b      	cmp	r3, r9
 800b09e:	d307      	bcc.n	800b0b0 <__cvt+0xbc>
 800b0a0:	9b03      	ldr	r3, [sp, #12]
 800b0a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0a4:	1bdb      	subs	r3, r3, r7
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	6013      	str	r3, [r2, #0]
 800b0aa:	b004      	add	sp, #16
 800b0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b0:	1c59      	adds	r1, r3, #1
 800b0b2:	9103      	str	r1, [sp, #12]
 800b0b4:	701a      	strb	r2, [r3, #0]
 800b0b6:	e7f0      	b.n	800b09a <__cvt+0xa6>

0800b0b8 <__exponent>:
 800b0b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	bfb8      	it	lt
 800b0c0:	4249      	neglt	r1, r1
 800b0c2:	f803 2b02 	strb.w	r2, [r3], #2
 800b0c6:	bfb4      	ite	lt
 800b0c8:	222d      	movlt	r2, #45	; 0x2d
 800b0ca:	222b      	movge	r2, #43	; 0x2b
 800b0cc:	2909      	cmp	r1, #9
 800b0ce:	7042      	strb	r2, [r0, #1]
 800b0d0:	dd2a      	ble.n	800b128 <__exponent+0x70>
 800b0d2:	f10d 0207 	add.w	r2, sp, #7
 800b0d6:	4617      	mov	r7, r2
 800b0d8:	260a      	movs	r6, #10
 800b0da:	4694      	mov	ip, r2
 800b0dc:	fb91 f5f6 	sdiv	r5, r1, r6
 800b0e0:	fb06 1415 	mls	r4, r6, r5, r1
 800b0e4:	3430      	adds	r4, #48	; 0x30
 800b0e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	2c63      	cmp	r4, #99	; 0x63
 800b0ee:	f102 32ff 	add.w	r2, r2, #4294967295
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	dcf1      	bgt.n	800b0da <__exponent+0x22>
 800b0f6:	3130      	adds	r1, #48	; 0x30
 800b0f8:	f1ac 0402 	sub.w	r4, ip, #2
 800b0fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b100:	1c41      	adds	r1, r0, #1
 800b102:	4622      	mov	r2, r4
 800b104:	42ba      	cmp	r2, r7
 800b106:	d30a      	bcc.n	800b11e <__exponent+0x66>
 800b108:	f10d 0209 	add.w	r2, sp, #9
 800b10c:	eba2 020c 	sub.w	r2, r2, ip
 800b110:	42bc      	cmp	r4, r7
 800b112:	bf88      	it	hi
 800b114:	2200      	movhi	r2, #0
 800b116:	4413      	add	r3, r2
 800b118:	1a18      	subs	r0, r3, r0
 800b11a:	b003      	add	sp, #12
 800b11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b11e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b122:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b126:	e7ed      	b.n	800b104 <__exponent+0x4c>
 800b128:	2330      	movs	r3, #48	; 0x30
 800b12a:	3130      	adds	r1, #48	; 0x30
 800b12c:	7083      	strb	r3, [r0, #2]
 800b12e:	70c1      	strb	r1, [r0, #3]
 800b130:	1d03      	adds	r3, r0, #4
 800b132:	e7f1      	b.n	800b118 <__exponent+0x60>

0800b134 <_printf_float>:
 800b134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	ed2d 8b02 	vpush	{d8}
 800b13c:	b08d      	sub	sp, #52	; 0x34
 800b13e:	460c      	mov	r4, r1
 800b140:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b144:	4616      	mov	r6, r2
 800b146:	461f      	mov	r7, r3
 800b148:	4605      	mov	r5, r0
 800b14a:	f000 fce7 	bl	800bb1c <_localeconv_r>
 800b14e:	f8d0 a000 	ldr.w	sl, [r0]
 800b152:	4650      	mov	r0, sl
 800b154:	f7f5 f8ac 	bl	80002b0 <strlen>
 800b158:	2300      	movs	r3, #0
 800b15a:	930a      	str	r3, [sp, #40]	; 0x28
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	9305      	str	r3, [sp, #20]
 800b160:	f8d8 3000 	ldr.w	r3, [r8]
 800b164:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b168:	3307      	adds	r3, #7
 800b16a:	f023 0307 	bic.w	r3, r3, #7
 800b16e:	f103 0208 	add.w	r2, r3, #8
 800b172:	f8c8 2000 	str.w	r2, [r8]
 800b176:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b17a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b17e:	9307      	str	r3, [sp, #28]
 800b180:	f8cd 8018 	str.w	r8, [sp, #24]
 800b184:	ee08 0a10 	vmov	s16, r0
 800b188:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b18c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b190:	4b9e      	ldr	r3, [pc, #632]	; (800b40c <_printf_float+0x2d8>)
 800b192:	f04f 32ff 	mov.w	r2, #4294967295
 800b196:	f7f5 fce9 	bl	8000b6c <__aeabi_dcmpun>
 800b19a:	bb88      	cbnz	r0, 800b200 <_printf_float+0xcc>
 800b19c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1a0:	4b9a      	ldr	r3, [pc, #616]	; (800b40c <_printf_float+0x2d8>)
 800b1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a6:	f7f5 fcc3 	bl	8000b30 <__aeabi_dcmple>
 800b1aa:	bb48      	cbnz	r0, 800b200 <_printf_float+0xcc>
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	f7f5 fcb2 	bl	8000b1c <__aeabi_dcmplt>
 800b1b8:	b110      	cbz	r0, 800b1c0 <_printf_float+0x8c>
 800b1ba:	232d      	movs	r3, #45	; 0x2d
 800b1bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1c0:	4a93      	ldr	r2, [pc, #588]	; (800b410 <_printf_float+0x2dc>)
 800b1c2:	4b94      	ldr	r3, [pc, #592]	; (800b414 <_printf_float+0x2e0>)
 800b1c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b1c8:	bf94      	ite	ls
 800b1ca:	4690      	movls	r8, r2
 800b1cc:	4698      	movhi	r8, r3
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	6123      	str	r3, [r4, #16]
 800b1d2:	9b05      	ldr	r3, [sp, #20]
 800b1d4:	f023 0304 	bic.w	r3, r3, #4
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	f04f 0900 	mov.w	r9, #0
 800b1de:	9700      	str	r7, [sp, #0]
 800b1e0:	4633      	mov	r3, r6
 800b1e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 f9da 	bl	800b5a0 <_printf_common>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f040 8090 	bne.w	800b312 <_printf_float+0x1de>
 800b1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f6:	b00d      	add	sp, #52	; 0x34
 800b1f8:	ecbd 8b02 	vpop	{d8}
 800b1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b200:	4642      	mov	r2, r8
 800b202:	464b      	mov	r3, r9
 800b204:	4640      	mov	r0, r8
 800b206:	4649      	mov	r1, r9
 800b208:	f7f5 fcb0 	bl	8000b6c <__aeabi_dcmpun>
 800b20c:	b140      	cbz	r0, 800b220 <_printf_float+0xec>
 800b20e:	464b      	mov	r3, r9
 800b210:	2b00      	cmp	r3, #0
 800b212:	bfbc      	itt	lt
 800b214:	232d      	movlt	r3, #45	; 0x2d
 800b216:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b21a:	4a7f      	ldr	r2, [pc, #508]	; (800b418 <_printf_float+0x2e4>)
 800b21c:	4b7f      	ldr	r3, [pc, #508]	; (800b41c <_printf_float+0x2e8>)
 800b21e:	e7d1      	b.n	800b1c4 <_printf_float+0x90>
 800b220:	6863      	ldr	r3, [r4, #4]
 800b222:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b226:	9206      	str	r2, [sp, #24]
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	d13f      	bne.n	800b2ac <_printf_float+0x178>
 800b22c:	2306      	movs	r3, #6
 800b22e:	6063      	str	r3, [r4, #4]
 800b230:	9b05      	ldr	r3, [sp, #20]
 800b232:	6861      	ldr	r1, [r4, #4]
 800b234:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b238:	2300      	movs	r3, #0
 800b23a:	9303      	str	r3, [sp, #12]
 800b23c:	ab0a      	add	r3, sp, #40	; 0x28
 800b23e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b242:	ab09      	add	r3, sp, #36	; 0x24
 800b244:	ec49 8b10 	vmov	d0, r8, r9
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	6022      	str	r2, [r4, #0]
 800b24c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b250:	4628      	mov	r0, r5
 800b252:	f7ff fecf 	bl	800aff4 <__cvt>
 800b256:	9b06      	ldr	r3, [sp, #24]
 800b258:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b25a:	2b47      	cmp	r3, #71	; 0x47
 800b25c:	4680      	mov	r8, r0
 800b25e:	d108      	bne.n	800b272 <_printf_float+0x13e>
 800b260:	1cc8      	adds	r0, r1, #3
 800b262:	db02      	blt.n	800b26a <_printf_float+0x136>
 800b264:	6863      	ldr	r3, [r4, #4]
 800b266:	4299      	cmp	r1, r3
 800b268:	dd41      	ble.n	800b2ee <_printf_float+0x1ba>
 800b26a:	f1ab 0302 	sub.w	r3, fp, #2
 800b26e:	fa5f fb83 	uxtb.w	fp, r3
 800b272:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b276:	d820      	bhi.n	800b2ba <_printf_float+0x186>
 800b278:	3901      	subs	r1, #1
 800b27a:	465a      	mov	r2, fp
 800b27c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b280:	9109      	str	r1, [sp, #36]	; 0x24
 800b282:	f7ff ff19 	bl	800b0b8 <__exponent>
 800b286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b288:	1813      	adds	r3, r2, r0
 800b28a:	2a01      	cmp	r2, #1
 800b28c:	4681      	mov	r9, r0
 800b28e:	6123      	str	r3, [r4, #16]
 800b290:	dc02      	bgt.n	800b298 <_printf_float+0x164>
 800b292:	6822      	ldr	r2, [r4, #0]
 800b294:	07d2      	lsls	r2, r2, #31
 800b296:	d501      	bpl.n	800b29c <_printf_float+0x168>
 800b298:	3301      	adds	r3, #1
 800b29a:	6123      	str	r3, [r4, #16]
 800b29c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d09c      	beq.n	800b1de <_printf_float+0xaa>
 800b2a4:	232d      	movs	r3, #45	; 0x2d
 800b2a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2aa:	e798      	b.n	800b1de <_printf_float+0xaa>
 800b2ac:	9a06      	ldr	r2, [sp, #24]
 800b2ae:	2a47      	cmp	r2, #71	; 0x47
 800b2b0:	d1be      	bne.n	800b230 <_printf_float+0xfc>
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1bc      	bne.n	800b230 <_printf_float+0xfc>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e7b9      	b.n	800b22e <_printf_float+0xfa>
 800b2ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b2be:	d118      	bne.n	800b2f2 <_printf_float+0x1be>
 800b2c0:	2900      	cmp	r1, #0
 800b2c2:	6863      	ldr	r3, [r4, #4]
 800b2c4:	dd0b      	ble.n	800b2de <_printf_float+0x1aa>
 800b2c6:	6121      	str	r1, [r4, #16]
 800b2c8:	b913      	cbnz	r3, 800b2d0 <_printf_float+0x19c>
 800b2ca:	6822      	ldr	r2, [r4, #0]
 800b2cc:	07d0      	lsls	r0, r2, #31
 800b2ce:	d502      	bpl.n	800b2d6 <_printf_float+0x1a2>
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	440b      	add	r3, r1
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b2d8:	f04f 0900 	mov.w	r9, #0
 800b2dc:	e7de      	b.n	800b29c <_printf_float+0x168>
 800b2de:	b913      	cbnz	r3, 800b2e6 <_printf_float+0x1b2>
 800b2e0:	6822      	ldr	r2, [r4, #0]
 800b2e2:	07d2      	lsls	r2, r2, #31
 800b2e4:	d501      	bpl.n	800b2ea <_printf_float+0x1b6>
 800b2e6:	3302      	adds	r3, #2
 800b2e8:	e7f4      	b.n	800b2d4 <_printf_float+0x1a0>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e7f2      	b.n	800b2d4 <_printf_float+0x1a0>
 800b2ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f4:	4299      	cmp	r1, r3
 800b2f6:	db05      	blt.n	800b304 <_printf_float+0x1d0>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	6121      	str	r1, [r4, #16]
 800b2fc:	07d8      	lsls	r0, r3, #31
 800b2fe:	d5ea      	bpl.n	800b2d6 <_printf_float+0x1a2>
 800b300:	1c4b      	adds	r3, r1, #1
 800b302:	e7e7      	b.n	800b2d4 <_printf_float+0x1a0>
 800b304:	2900      	cmp	r1, #0
 800b306:	bfd4      	ite	le
 800b308:	f1c1 0202 	rsble	r2, r1, #2
 800b30c:	2201      	movgt	r2, #1
 800b30e:	4413      	add	r3, r2
 800b310:	e7e0      	b.n	800b2d4 <_printf_float+0x1a0>
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	055a      	lsls	r2, r3, #21
 800b316:	d407      	bmi.n	800b328 <_printf_float+0x1f4>
 800b318:	6923      	ldr	r3, [r4, #16]
 800b31a:	4642      	mov	r2, r8
 800b31c:	4631      	mov	r1, r6
 800b31e:	4628      	mov	r0, r5
 800b320:	47b8      	blx	r7
 800b322:	3001      	adds	r0, #1
 800b324:	d12c      	bne.n	800b380 <_printf_float+0x24c>
 800b326:	e764      	b.n	800b1f2 <_printf_float+0xbe>
 800b328:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b32c:	f240 80e0 	bls.w	800b4f0 <_printf_float+0x3bc>
 800b330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b334:	2200      	movs	r2, #0
 800b336:	2300      	movs	r3, #0
 800b338:	f7f5 fbe6 	bl	8000b08 <__aeabi_dcmpeq>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d034      	beq.n	800b3aa <_printf_float+0x276>
 800b340:	4a37      	ldr	r2, [pc, #220]	; (800b420 <_printf_float+0x2ec>)
 800b342:	2301      	movs	r3, #1
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	47b8      	blx	r7
 800b34a:	3001      	adds	r0, #1
 800b34c:	f43f af51 	beq.w	800b1f2 <_printf_float+0xbe>
 800b350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b354:	429a      	cmp	r2, r3
 800b356:	db02      	blt.n	800b35e <_printf_float+0x22a>
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	07d8      	lsls	r0, r3, #31
 800b35c:	d510      	bpl.n	800b380 <_printf_float+0x24c>
 800b35e:	ee18 3a10 	vmov	r3, s16
 800b362:	4652      	mov	r2, sl
 800b364:	4631      	mov	r1, r6
 800b366:	4628      	mov	r0, r5
 800b368:	47b8      	blx	r7
 800b36a:	3001      	adds	r0, #1
 800b36c:	f43f af41 	beq.w	800b1f2 <_printf_float+0xbe>
 800b370:	f04f 0800 	mov.w	r8, #0
 800b374:	f104 091a 	add.w	r9, r4, #26
 800b378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37a:	3b01      	subs	r3, #1
 800b37c:	4543      	cmp	r3, r8
 800b37e:	dc09      	bgt.n	800b394 <_printf_float+0x260>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	079b      	lsls	r3, r3, #30
 800b384:	f100 8107 	bmi.w	800b596 <_printf_float+0x462>
 800b388:	68e0      	ldr	r0, [r4, #12]
 800b38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b38c:	4298      	cmp	r0, r3
 800b38e:	bfb8      	it	lt
 800b390:	4618      	movlt	r0, r3
 800b392:	e730      	b.n	800b1f6 <_printf_float+0xc2>
 800b394:	2301      	movs	r3, #1
 800b396:	464a      	mov	r2, r9
 800b398:	4631      	mov	r1, r6
 800b39a:	4628      	mov	r0, r5
 800b39c:	47b8      	blx	r7
 800b39e:	3001      	adds	r0, #1
 800b3a0:	f43f af27 	beq.w	800b1f2 <_printf_float+0xbe>
 800b3a4:	f108 0801 	add.w	r8, r8, #1
 800b3a8:	e7e6      	b.n	800b378 <_printf_float+0x244>
 800b3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	dc39      	bgt.n	800b424 <_printf_float+0x2f0>
 800b3b0:	4a1b      	ldr	r2, [pc, #108]	; (800b420 <_printf_float+0x2ec>)
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	f43f af19 	beq.w	800b1f2 <_printf_float+0xbe>
 800b3c0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	d102      	bne.n	800b3ce <_printf_float+0x29a>
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	07d9      	lsls	r1, r3, #31
 800b3cc:	d5d8      	bpl.n	800b380 <_printf_float+0x24c>
 800b3ce:	ee18 3a10 	vmov	r3, s16
 800b3d2:	4652      	mov	r2, sl
 800b3d4:	4631      	mov	r1, r6
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	47b8      	blx	r7
 800b3da:	3001      	adds	r0, #1
 800b3dc:	f43f af09 	beq.w	800b1f2 <_printf_float+0xbe>
 800b3e0:	f04f 0900 	mov.w	r9, #0
 800b3e4:	f104 0a1a 	add.w	sl, r4, #26
 800b3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ea:	425b      	negs	r3, r3
 800b3ec:	454b      	cmp	r3, r9
 800b3ee:	dc01      	bgt.n	800b3f4 <_printf_float+0x2c0>
 800b3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3f2:	e792      	b.n	800b31a <_printf_float+0x1e6>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	f43f aef7 	beq.w	800b1f2 <_printf_float+0xbe>
 800b404:	f109 0901 	add.w	r9, r9, #1
 800b408:	e7ee      	b.n	800b3e8 <_printf_float+0x2b4>
 800b40a:	bf00      	nop
 800b40c:	7fefffff 	.word	0x7fefffff
 800b410:	08010910 	.word	0x08010910
 800b414:	08010914 	.word	0x08010914
 800b418:	08010918 	.word	0x08010918
 800b41c:	0801091c 	.word	0x0801091c
 800b420:	08010920 	.word	0x08010920
 800b424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b426:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b428:	429a      	cmp	r2, r3
 800b42a:	bfa8      	it	ge
 800b42c:	461a      	movge	r2, r3
 800b42e:	2a00      	cmp	r2, #0
 800b430:	4691      	mov	r9, r2
 800b432:	dc37      	bgt.n	800b4a4 <_printf_float+0x370>
 800b434:	f04f 0b00 	mov.w	fp, #0
 800b438:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b43c:	f104 021a 	add.w	r2, r4, #26
 800b440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b442:	9305      	str	r3, [sp, #20]
 800b444:	eba3 0309 	sub.w	r3, r3, r9
 800b448:	455b      	cmp	r3, fp
 800b44a:	dc33      	bgt.n	800b4b4 <_printf_float+0x380>
 800b44c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b450:	429a      	cmp	r2, r3
 800b452:	db3b      	blt.n	800b4cc <_printf_float+0x398>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	07da      	lsls	r2, r3, #31
 800b458:	d438      	bmi.n	800b4cc <_printf_float+0x398>
 800b45a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b45e:	eba2 0903 	sub.w	r9, r2, r3
 800b462:	9b05      	ldr	r3, [sp, #20]
 800b464:	1ad2      	subs	r2, r2, r3
 800b466:	4591      	cmp	r9, r2
 800b468:	bfa8      	it	ge
 800b46a:	4691      	movge	r9, r2
 800b46c:	f1b9 0f00 	cmp.w	r9, #0
 800b470:	dc35      	bgt.n	800b4de <_printf_float+0x3aa>
 800b472:	f04f 0800 	mov.w	r8, #0
 800b476:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b47a:	f104 0a1a 	add.w	sl, r4, #26
 800b47e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	eba3 0309 	sub.w	r3, r3, r9
 800b488:	4543      	cmp	r3, r8
 800b48a:	f77f af79 	ble.w	800b380 <_printf_float+0x24c>
 800b48e:	2301      	movs	r3, #1
 800b490:	4652      	mov	r2, sl
 800b492:	4631      	mov	r1, r6
 800b494:	4628      	mov	r0, r5
 800b496:	47b8      	blx	r7
 800b498:	3001      	adds	r0, #1
 800b49a:	f43f aeaa 	beq.w	800b1f2 <_printf_float+0xbe>
 800b49e:	f108 0801 	add.w	r8, r8, #1
 800b4a2:	e7ec      	b.n	800b47e <_printf_float+0x34a>
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	47b8      	blx	r7
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	d1c0      	bne.n	800b434 <_printf_float+0x300>
 800b4b2:	e69e      	b.n	800b1f2 <_printf_float+0xbe>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	9205      	str	r2, [sp, #20]
 800b4bc:	47b8      	blx	r7
 800b4be:	3001      	adds	r0, #1
 800b4c0:	f43f ae97 	beq.w	800b1f2 <_printf_float+0xbe>
 800b4c4:	9a05      	ldr	r2, [sp, #20]
 800b4c6:	f10b 0b01 	add.w	fp, fp, #1
 800b4ca:	e7b9      	b.n	800b440 <_printf_float+0x30c>
 800b4cc:	ee18 3a10 	vmov	r3, s16
 800b4d0:	4652      	mov	r2, sl
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b8      	blx	r7
 800b4d8:	3001      	adds	r0, #1
 800b4da:	d1be      	bne.n	800b45a <_printf_float+0x326>
 800b4dc:	e689      	b.n	800b1f2 <_printf_float+0xbe>
 800b4de:	9a05      	ldr	r2, [sp, #20]
 800b4e0:	464b      	mov	r3, r9
 800b4e2:	4442      	add	r2, r8
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	47b8      	blx	r7
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	d1c1      	bne.n	800b472 <_printf_float+0x33e>
 800b4ee:	e680      	b.n	800b1f2 <_printf_float+0xbe>
 800b4f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4f2:	2a01      	cmp	r2, #1
 800b4f4:	dc01      	bgt.n	800b4fa <_printf_float+0x3c6>
 800b4f6:	07db      	lsls	r3, r3, #31
 800b4f8:	d53a      	bpl.n	800b570 <_printf_float+0x43c>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	4631      	mov	r1, r6
 800b500:	4628      	mov	r0, r5
 800b502:	47b8      	blx	r7
 800b504:	3001      	adds	r0, #1
 800b506:	f43f ae74 	beq.w	800b1f2 <_printf_float+0xbe>
 800b50a:	ee18 3a10 	vmov	r3, s16
 800b50e:	4652      	mov	r2, sl
 800b510:	4631      	mov	r1, r6
 800b512:	4628      	mov	r0, r5
 800b514:	47b8      	blx	r7
 800b516:	3001      	adds	r0, #1
 800b518:	f43f ae6b 	beq.w	800b1f2 <_printf_float+0xbe>
 800b51c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b520:	2200      	movs	r2, #0
 800b522:	2300      	movs	r3, #0
 800b524:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b528:	f7f5 faee 	bl	8000b08 <__aeabi_dcmpeq>
 800b52c:	b9d8      	cbnz	r0, 800b566 <_printf_float+0x432>
 800b52e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b532:	f108 0201 	add.w	r2, r8, #1
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	d10e      	bne.n	800b55e <_printf_float+0x42a>
 800b540:	e657      	b.n	800b1f2 <_printf_float+0xbe>
 800b542:	2301      	movs	r3, #1
 800b544:	4652      	mov	r2, sl
 800b546:	4631      	mov	r1, r6
 800b548:	4628      	mov	r0, r5
 800b54a:	47b8      	blx	r7
 800b54c:	3001      	adds	r0, #1
 800b54e:	f43f ae50 	beq.w	800b1f2 <_printf_float+0xbe>
 800b552:	f108 0801 	add.w	r8, r8, #1
 800b556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b558:	3b01      	subs	r3, #1
 800b55a:	4543      	cmp	r3, r8
 800b55c:	dcf1      	bgt.n	800b542 <_printf_float+0x40e>
 800b55e:	464b      	mov	r3, r9
 800b560:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b564:	e6da      	b.n	800b31c <_printf_float+0x1e8>
 800b566:	f04f 0800 	mov.w	r8, #0
 800b56a:	f104 0a1a 	add.w	sl, r4, #26
 800b56e:	e7f2      	b.n	800b556 <_printf_float+0x422>
 800b570:	2301      	movs	r3, #1
 800b572:	4642      	mov	r2, r8
 800b574:	e7df      	b.n	800b536 <_printf_float+0x402>
 800b576:	2301      	movs	r3, #1
 800b578:	464a      	mov	r2, r9
 800b57a:	4631      	mov	r1, r6
 800b57c:	4628      	mov	r0, r5
 800b57e:	47b8      	blx	r7
 800b580:	3001      	adds	r0, #1
 800b582:	f43f ae36 	beq.w	800b1f2 <_printf_float+0xbe>
 800b586:	f108 0801 	add.w	r8, r8, #1
 800b58a:	68e3      	ldr	r3, [r4, #12]
 800b58c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b58e:	1a5b      	subs	r3, r3, r1
 800b590:	4543      	cmp	r3, r8
 800b592:	dcf0      	bgt.n	800b576 <_printf_float+0x442>
 800b594:	e6f8      	b.n	800b388 <_printf_float+0x254>
 800b596:	f04f 0800 	mov.w	r8, #0
 800b59a:	f104 0919 	add.w	r9, r4, #25
 800b59e:	e7f4      	b.n	800b58a <_printf_float+0x456>

0800b5a0 <_printf_common>:
 800b5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a4:	4616      	mov	r6, r2
 800b5a6:	4699      	mov	r9, r3
 800b5a8:	688a      	ldr	r2, [r1, #8]
 800b5aa:	690b      	ldr	r3, [r1, #16]
 800b5ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	bfb8      	it	lt
 800b5b4:	4613      	movlt	r3, r2
 800b5b6:	6033      	str	r3, [r6, #0]
 800b5b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5bc:	4607      	mov	r7, r0
 800b5be:	460c      	mov	r4, r1
 800b5c0:	b10a      	cbz	r2, 800b5c6 <_printf_common+0x26>
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	6033      	str	r3, [r6, #0]
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	0699      	lsls	r1, r3, #26
 800b5ca:	bf42      	ittt	mi
 800b5cc:	6833      	ldrmi	r3, [r6, #0]
 800b5ce:	3302      	addmi	r3, #2
 800b5d0:	6033      	strmi	r3, [r6, #0]
 800b5d2:	6825      	ldr	r5, [r4, #0]
 800b5d4:	f015 0506 	ands.w	r5, r5, #6
 800b5d8:	d106      	bne.n	800b5e8 <_printf_common+0x48>
 800b5da:	f104 0a19 	add.w	sl, r4, #25
 800b5de:	68e3      	ldr	r3, [r4, #12]
 800b5e0:	6832      	ldr	r2, [r6, #0]
 800b5e2:	1a9b      	subs	r3, r3, r2
 800b5e4:	42ab      	cmp	r3, r5
 800b5e6:	dc26      	bgt.n	800b636 <_printf_common+0x96>
 800b5e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5ec:	1e13      	subs	r3, r2, #0
 800b5ee:	6822      	ldr	r2, [r4, #0]
 800b5f0:	bf18      	it	ne
 800b5f2:	2301      	movne	r3, #1
 800b5f4:	0692      	lsls	r2, r2, #26
 800b5f6:	d42b      	bmi.n	800b650 <_printf_common+0xb0>
 800b5f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4638      	mov	r0, r7
 800b600:	47c0      	blx	r8
 800b602:	3001      	adds	r0, #1
 800b604:	d01e      	beq.n	800b644 <_printf_common+0xa4>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	6922      	ldr	r2, [r4, #16]
 800b60a:	f003 0306 	and.w	r3, r3, #6
 800b60e:	2b04      	cmp	r3, #4
 800b610:	bf02      	ittt	eq
 800b612:	68e5      	ldreq	r5, [r4, #12]
 800b614:	6833      	ldreq	r3, [r6, #0]
 800b616:	1aed      	subeq	r5, r5, r3
 800b618:	68a3      	ldr	r3, [r4, #8]
 800b61a:	bf0c      	ite	eq
 800b61c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b620:	2500      	movne	r5, #0
 800b622:	4293      	cmp	r3, r2
 800b624:	bfc4      	itt	gt
 800b626:	1a9b      	subgt	r3, r3, r2
 800b628:	18ed      	addgt	r5, r5, r3
 800b62a:	2600      	movs	r6, #0
 800b62c:	341a      	adds	r4, #26
 800b62e:	42b5      	cmp	r5, r6
 800b630:	d11a      	bne.n	800b668 <_printf_common+0xc8>
 800b632:	2000      	movs	r0, #0
 800b634:	e008      	b.n	800b648 <_printf_common+0xa8>
 800b636:	2301      	movs	r3, #1
 800b638:	4652      	mov	r2, sl
 800b63a:	4649      	mov	r1, r9
 800b63c:	4638      	mov	r0, r7
 800b63e:	47c0      	blx	r8
 800b640:	3001      	adds	r0, #1
 800b642:	d103      	bne.n	800b64c <_printf_common+0xac>
 800b644:	f04f 30ff 	mov.w	r0, #4294967295
 800b648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b64c:	3501      	adds	r5, #1
 800b64e:	e7c6      	b.n	800b5de <_printf_common+0x3e>
 800b650:	18e1      	adds	r1, r4, r3
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	2030      	movs	r0, #48	; 0x30
 800b656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b65a:	4422      	add	r2, r4
 800b65c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b664:	3302      	adds	r3, #2
 800b666:	e7c7      	b.n	800b5f8 <_printf_common+0x58>
 800b668:	2301      	movs	r3, #1
 800b66a:	4622      	mov	r2, r4
 800b66c:	4649      	mov	r1, r9
 800b66e:	4638      	mov	r0, r7
 800b670:	47c0      	blx	r8
 800b672:	3001      	adds	r0, #1
 800b674:	d0e6      	beq.n	800b644 <_printf_common+0xa4>
 800b676:	3601      	adds	r6, #1
 800b678:	e7d9      	b.n	800b62e <_printf_common+0x8e>
	...

0800b67c <_printf_i>:
 800b67c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	7e0f      	ldrb	r7, [r1, #24]
 800b682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b684:	2f78      	cmp	r7, #120	; 0x78
 800b686:	4691      	mov	r9, r2
 800b688:	4680      	mov	r8, r0
 800b68a:	460c      	mov	r4, r1
 800b68c:	469a      	mov	sl, r3
 800b68e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b692:	d807      	bhi.n	800b6a4 <_printf_i+0x28>
 800b694:	2f62      	cmp	r7, #98	; 0x62
 800b696:	d80a      	bhi.n	800b6ae <_printf_i+0x32>
 800b698:	2f00      	cmp	r7, #0
 800b69a:	f000 80d4 	beq.w	800b846 <_printf_i+0x1ca>
 800b69e:	2f58      	cmp	r7, #88	; 0x58
 800b6a0:	f000 80c0 	beq.w	800b824 <_printf_i+0x1a8>
 800b6a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6ac:	e03a      	b.n	800b724 <_printf_i+0xa8>
 800b6ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6b2:	2b15      	cmp	r3, #21
 800b6b4:	d8f6      	bhi.n	800b6a4 <_printf_i+0x28>
 800b6b6:	a101      	add	r1, pc, #4	; (adr r1, 800b6bc <_printf_i+0x40>)
 800b6b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6bc:	0800b715 	.word	0x0800b715
 800b6c0:	0800b729 	.word	0x0800b729
 800b6c4:	0800b6a5 	.word	0x0800b6a5
 800b6c8:	0800b6a5 	.word	0x0800b6a5
 800b6cc:	0800b6a5 	.word	0x0800b6a5
 800b6d0:	0800b6a5 	.word	0x0800b6a5
 800b6d4:	0800b729 	.word	0x0800b729
 800b6d8:	0800b6a5 	.word	0x0800b6a5
 800b6dc:	0800b6a5 	.word	0x0800b6a5
 800b6e0:	0800b6a5 	.word	0x0800b6a5
 800b6e4:	0800b6a5 	.word	0x0800b6a5
 800b6e8:	0800b82d 	.word	0x0800b82d
 800b6ec:	0800b755 	.word	0x0800b755
 800b6f0:	0800b7e7 	.word	0x0800b7e7
 800b6f4:	0800b6a5 	.word	0x0800b6a5
 800b6f8:	0800b6a5 	.word	0x0800b6a5
 800b6fc:	0800b84f 	.word	0x0800b84f
 800b700:	0800b6a5 	.word	0x0800b6a5
 800b704:	0800b755 	.word	0x0800b755
 800b708:	0800b6a5 	.word	0x0800b6a5
 800b70c:	0800b6a5 	.word	0x0800b6a5
 800b710:	0800b7ef 	.word	0x0800b7ef
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	1d1a      	adds	r2, r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	602a      	str	r2, [r5, #0]
 800b71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b724:	2301      	movs	r3, #1
 800b726:	e09f      	b.n	800b868 <_printf_i+0x1ec>
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	682b      	ldr	r3, [r5, #0]
 800b72c:	0607      	lsls	r7, r0, #24
 800b72e:	f103 0104 	add.w	r1, r3, #4
 800b732:	6029      	str	r1, [r5, #0]
 800b734:	d501      	bpl.n	800b73a <_printf_i+0xbe>
 800b736:	681e      	ldr	r6, [r3, #0]
 800b738:	e003      	b.n	800b742 <_printf_i+0xc6>
 800b73a:	0646      	lsls	r6, r0, #25
 800b73c:	d5fb      	bpl.n	800b736 <_printf_i+0xba>
 800b73e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b742:	2e00      	cmp	r6, #0
 800b744:	da03      	bge.n	800b74e <_printf_i+0xd2>
 800b746:	232d      	movs	r3, #45	; 0x2d
 800b748:	4276      	negs	r6, r6
 800b74a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b74e:	485a      	ldr	r0, [pc, #360]	; (800b8b8 <_printf_i+0x23c>)
 800b750:	230a      	movs	r3, #10
 800b752:	e012      	b.n	800b77a <_printf_i+0xfe>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	6820      	ldr	r0, [r4, #0]
 800b758:	1d19      	adds	r1, r3, #4
 800b75a:	6029      	str	r1, [r5, #0]
 800b75c:	0605      	lsls	r5, r0, #24
 800b75e:	d501      	bpl.n	800b764 <_printf_i+0xe8>
 800b760:	681e      	ldr	r6, [r3, #0]
 800b762:	e002      	b.n	800b76a <_printf_i+0xee>
 800b764:	0641      	lsls	r1, r0, #25
 800b766:	d5fb      	bpl.n	800b760 <_printf_i+0xe4>
 800b768:	881e      	ldrh	r6, [r3, #0]
 800b76a:	4853      	ldr	r0, [pc, #332]	; (800b8b8 <_printf_i+0x23c>)
 800b76c:	2f6f      	cmp	r7, #111	; 0x6f
 800b76e:	bf0c      	ite	eq
 800b770:	2308      	moveq	r3, #8
 800b772:	230a      	movne	r3, #10
 800b774:	2100      	movs	r1, #0
 800b776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b77a:	6865      	ldr	r5, [r4, #4]
 800b77c:	60a5      	str	r5, [r4, #8]
 800b77e:	2d00      	cmp	r5, #0
 800b780:	bfa2      	ittt	ge
 800b782:	6821      	ldrge	r1, [r4, #0]
 800b784:	f021 0104 	bicge.w	r1, r1, #4
 800b788:	6021      	strge	r1, [r4, #0]
 800b78a:	b90e      	cbnz	r6, 800b790 <_printf_i+0x114>
 800b78c:	2d00      	cmp	r5, #0
 800b78e:	d04b      	beq.n	800b828 <_printf_i+0x1ac>
 800b790:	4615      	mov	r5, r2
 800b792:	fbb6 f1f3 	udiv	r1, r6, r3
 800b796:	fb03 6711 	mls	r7, r3, r1, r6
 800b79a:	5dc7      	ldrb	r7, [r0, r7]
 800b79c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7a0:	4637      	mov	r7, r6
 800b7a2:	42bb      	cmp	r3, r7
 800b7a4:	460e      	mov	r6, r1
 800b7a6:	d9f4      	bls.n	800b792 <_printf_i+0x116>
 800b7a8:	2b08      	cmp	r3, #8
 800b7aa:	d10b      	bne.n	800b7c4 <_printf_i+0x148>
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	07de      	lsls	r6, r3, #31
 800b7b0:	d508      	bpl.n	800b7c4 <_printf_i+0x148>
 800b7b2:	6923      	ldr	r3, [r4, #16]
 800b7b4:	6861      	ldr	r1, [r4, #4]
 800b7b6:	4299      	cmp	r1, r3
 800b7b8:	bfde      	ittt	le
 800b7ba:	2330      	movle	r3, #48	; 0x30
 800b7bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7c4:	1b52      	subs	r2, r2, r5
 800b7c6:	6122      	str	r2, [r4, #16]
 800b7c8:	f8cd a000 	str.w	sl, [sp]
 800b7cc:	464b      	mov	r3, r9
 800b7ce:	aa03      	add	r2, sp, #12
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	f7ff fee4 	bl	800b5a0 <_printf_common>
 800b7d8:	3001      	adds	r0, #1
 800b7da:	d14a      	bne.n	800b872 <_printf_i+0x1f6>
 800b7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e0:	b004      	add	sp, #16
 800b7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	f043 0320 	orr.w	r3, r3, #32
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	4833      	ldr	r0, [pc, #204]	; (800b8bc <_printf_i+0x240>)
 800b7f0:	2778      	movs	r7, #120	; 0x78
 800b7f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	6829      	ldr	r1, [r5, #0]
 800b7fa:	061f      	lsls	r7, r3, #24
 800b7fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b800:	d402      	bmi.n	800b808 <_printf_i+0x18c>
 800b802:	065f      	lsls	r7, r3, #25
 800b804:	bf48      	it	mi
 800b806:	b2b6      	uxthmi	r6, r6
 800b808:	07df      	lsls	r7, r3, #31
 800b80a:	bf48      	it	mi
 800b80c:	f043 0320 	orrmi.w	r3, r3, #32
 800b810:	6029      	str	r1, [r5, #0]
 800b812:	bf48      	it	mi
 800b814:	6023      	strmi	r3, [r4, #0]
 800b816:	b91e      	cbnz	r6, 800b820 <_printf_i+0x1a4>
 800b818:	6823      	ldr	r3, [r4, #0]
 800b81a:	f023 0320 	bic.w	r3, r3, #32
 800b81e:	6023      	str	r3, [r4, #0]
 800b820:	2310      	movs	r3, #16
 800b822:	e7a7      	b.n	800b774 <_printf_i+0xf8>
 800b824:	4824      	ldr	r0, [pc, #144]	; (800b8b8 <_printf_i+0x23c>)
 800b826:	e7e4      	b.n	800b7f2 <_printf_i+0x176>
 800b828:	4615      	mov	r5, r2
 800b82a:	e7bd      	b.n	800b7a8 <_printf_i+0x12c>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	6826      	ldr	r6, [r4, #0]
 800b830:	6961      	ldr	r1, [r4, #20]
 800b832:	1d18      	adds	r0, r3, #4
 800b834:	6028      	str	r0, [r5, #0]
 800b836:	0635      	lsls	r5, r6, #24
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	d501      	bpl.n	800b840 <_printf_i+0x1c4>
 800b83c:	6019      	str	r1, [r3, #0]
 800b83e:	e002      	b.n	800b846 <_printf_i+0x1ca>
 800b840:	0670      	lsls	r0, r6, #25
 800b842:	d5fb      	bpl.n	800b83c <_printf_i+0x1c0>
 800b844:	8019      	strh	r1, [r3, #0]
 800b846:	2300      	movs	r3, #0
 800b848:	6123      	str	r3, [r4, #16]
 800b84a:	4615      	mov	r5, r2
 800b84c:	e7bc      	b.n	800b7c8 <_printf_i+0x14c>
 800b84e:	682b      	ldr	r3, [r5, #0]
 800b850:	1d1a      	adds	r2, r3, #4
 800b852:	602a      	str	r2, [r5, #0]
 800b854:	681d      	ldr	r5, [r3, #0]
 800b856:	6862      	ldr	r2, [r4, #4]
 800b858:	2100      	movs	r1, #0
 800b85a:	4628      	mov	r0, r5
 800b85c:	f7f4 fcd8 	bl	8000210 <memchr>
 800b860:	b108      	cbz	r0, 800b866 <_printf_i+0x1ea>
 800b862:	1b40      	subs	r0, r0, r5
 800b864:	6060      	str	r0, [r4, #4]
 800b866:	6863      	ldr	r3, [r4, #4]
 800b868:	6123      	str	r3, [r4, #16]
 800b86a:	2300      	movs	r3, #0
 800b86c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b870:	e7aa      	b.n	800b7c8 <_printf_i+0x14c>
 800b872:	6923      	ldr	r3, [r4, #16]
 800b874:	462a      	mov	r2, r5
 800b876:	4649      	mov	r1, r9
 800b878:	4640      	mov	r0, r8
 800b87a:	47d0      	blx	sl
 800b87c:	3001      	adds	r0, #1
 800b87e:	d0ad      	beq.n	800b7dc <_printf_i+0x160>
 800b880:	6823      	ldr	r3, [r4, #0]
 800b882:	079b      	lsls	r3, r3, #30
 800b884:	d413      	bmi.n	800b8ae <_printf_i+0x232>
 800b886:	68e0      	ldr	r0, [r4, #12]
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	4298      	cmp	r0, r3
 800b88c:	bfb8      	it	lt
 800b88e:	4618      	movlt	r0, r3
 800b890:	e7a6      	b.n	800b7e0 <_printf_i+0x164>
 800b892:	2301      	movs	r3, #1
 800b894:	4632      	mov	r2, r6
 800b896:	4649      	mov	r1, r9
 800b898:	4640      	mov	r0, r8
 800b89a:	47d0      	blx	sl
 800b89c:	3001      	adds	r0, #1
 800b89e:	d09d      	beq.n	800b7dc <_printf_i+0x160>
 800b8a0:	3501      	adds	r5, #1
 800b8a2:	68e3      	ldr	r3, [r4, #12]
 800b8a4:	9903      	ldr	r1, [sp, #12]
 800b8a6:	1a5b      	subs	r3, r3, r1
 800b8a8:	42ab      	cmp	r3, r5
 800b8aa:	dcf2      	bgt.n	800b892 <_printf_i+0x216>
 800b8ac:	e7eb      	b.n	800b886 <_printf_i+0x20a>
 800b8ae:	2500      	movs	r5, #0
 800b8b0:	f104 0619 	add.w	r6, r4, #25
 800b8b4:	e7f5      	b.n	800b8a2 <_printf_i+0x226>
 800b8b6:	bf00      	nop
 800b8b8:	08010922 	.word	0x08010922
 800b8bc:	08010933 	.word	0x08010933

0800b8c0 <std>:
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b8ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8ce:	6083      	str	r3, [r0, #8]
 800b8d0:	8181      	strh	r1, [r0, #12]
 800b8d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b8d4:	81c2      	strh	r2, [r0, #14]
 800b8d6:	6183      	str	r3, [r0, #24]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	2208      	movs	r2, #8
 800b8dc:	305c      	adds	r0, #92	; 0x5c
 800b8de:	f000 f914 	bl	800bb0a <memset>
 800b8e2:	4b0d      	ldr	r3, [pc, #52]	; (800b918 <std+0x58>)
 800b8e4:	6263      	str	r3, [r4, #36]	; 0x24
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <std+0x5c>)
 800b8e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8ea:	4b0d      	ldr	r3, [pc, #52]	; (800b920 <std+0x60>)
 800b8ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8ee:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <std+0x64>)
 800b8f0:	6323      	str	r3, [r4, #48]	; 0x30
 800b8f2:	4b0d      	ldr	r3, [pc, #52]	; (800b928 <std+0x68>)
 800b8f4:	6224      	str	r4, [r4, #32]
 800b8f6:	429c      	cmp	r4, r3
 800b8f8:	d006      	beq.n	800b908 <std+0x48>
 800b8fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b8fe:	4294      	cmp	r4, r2
 800b900:	d002      	beq.n	800b908 <std+0x48>
 800b902:	33d0      	adds	r3, #208	; 0xd0
 800b904:	429c      	cmp	r4, r3
 800b906:	d105      	bne.n	800b914 <std+0x54>
 800b908:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b910:	f000 b978 	b.w	800bc04 <__retarget_lock_init_recursive>
 800b914:	bd10      	pop	{r4, pc}
 800b916:	bf00      	nop
 800b918:	0800ba85 	.word	0x0800ba85
 800b91c:	0800baa7 	.word	0x0800baa7
 800b920:	0800badf 	.word	0x0800badf
 800b924:	0800bb03 	.word	0x0800bb03
 800b928:	200110d4 	.word	0x200110d4

0800b92c <stdio_exit_handler>:
 800b92c:	4a02      	ldr	r2, [pc, #8]	; (800b938 <stdio_exit_handler+0xc>)
 800b92e:	4903      	ldr	r1, [pc, #12]	; (800b93c <stdio_exit_handler+0x10>)
 800b930:	4803      	ldr	r0, [pc, #12]	; (800b940 <stdio_exit_handler+0x14>)
 800b932:	f000 b869 	b.w	800ba08 <_fwalk_sglue>
 800b936:	bf00      	nop
 800b938:	20000828 	.word	0x20000828
 800b93c:	0800d5b9 	.word	0x0800d5b9
 800b940:	20000834 	.word	0x20000834

0800b944 <cleanup_stdio>:
 800b944:	6841      	ldr	r1, [r0, #4]
 800b946:	4b0c      	ldr	r3, [pc, #48]	; (800b978 <cleanup_stdio+0x34>)
 800b948:	4299      	cmp	r1, r3
 800b94a:	b510      	push	{r4, lr}
 800b94c:	4604      	mov	r4, r0
 800b94e:	d001      	beq.n	800b954 <cleanup_stdio+0x10>
 800b950:	f001 fe32 	bl	800d5b8 <_fflush_r>
 800b954:	68a1      	ldr	r1, [r4, #8]
 800b956:	4b09      	ldr	r3, [pc, #36]	; (800b97c <cleanup_stdio+0x38>)
 800b958:	4299      	cmp	r1, r3
 800b95a:	d002      	beq.n	800b962 <cleanup_stdio+0x1e>
 800b95c:	4620      	mov	r0, r4
 800b95e:	f001 fe2b 	bl	800d5b8 <_fflush_r>
 800b962:	68e1      	ldr	r1, [r4, #12]
 800b964:	4b06      	ldr	r3, [pc, #24]	; (800b980 <cleanup_stdio+0x3c>)
 800b966:	4299      	cmp	r1, r3
 800b968:	d004      	beq.n	800b974 <cleanup_stdio+0x30>
 800b96a:	4620      	mov	r0, r4
 800b96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b970:	f001 be22 	b.w	800d5b8 <_fflush_r>
 800b974:	bd10      	pop	{r4, pc}
 800b976:	bf00      	nop
 800b978:	200110d4 	.word	0x200110d4
 800b97c:	2001113c 	.word	0x2001113c
 800b980:	200111a4 	.word	0x200111a4

0800b984 <global_stdio_init.part.0>:
 800b984:	b510      	push	{r4, lr}
 800b986:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <global_stdio_init.part.0+0x30>)
 800b988:	4c0b      	ldr	r4, [pc, #44]	; (800b9b8 <global_stdio_init.part.0+0x34>)
 800b98a:	4a0c      	ldr	r2, [pc, #48]	; (800b9bc <global_stdio_init.part.0+0x38>)
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	4620      	mov	r0, r4
 800b990:	2200      	movs	r2, #0
 800b992:	2104      	movs	r1, #4
 800b994:	f7ff ff94 	bl	800b8c0 <std>
 800b998:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b99c:	2201      	movs	r2, #1
 800b99e:	2109      	movs	r1, #9
 800b9a0:	f7ff ff8e 	bl	800b8c0 <std>
 800b9a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b9a8:	2202      	movs	r2, #2
 800b9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9ae:	2112      	movs	r1, #18
 800b9b0:	f7ff bf86 	b.w	800b8c0 <std>
 800b9b4:	2001120c 	.word	0x2001120c
 800b9b8:	200110d4 	.word	0x200110d4
 800b9bc:	0800b92d 	.word	0x0800b92d

0800b9c0 <__sfp_lock_acquire>:
 800b9c0:	4801      	ldr	r0, [pc, #4]	; (800b9c8 <__sfp_lock_acquire+0x8>)
 800b9c2:	f000 b920 	b.w	800bc06 <__retarget_lock_acquire_recursive>
 800b9c6:	bf00      	nop
 800b9c8:	20011215 	.word	0x20011215

0800b9cc <__sfp_lock_release>:
 800b9cc:	4801      	ldr	r0, [pc, #4]	; (800b9d4 <__sfp_lock_release+0x8>)
 800b9ce:	f000 b91b 	b.w	800bc08 <__retarget_lock_release_recursive>
 800b9d2:	bf00      	nop
 800b9d4:	20011215 	.word	0x20011215

0800b9d8 <__sinit>:
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	4604      	mov	r4, r0
 800b9dc:	f7ff fff0 	bl	800b9c0 <__sfp_lock_acquire>
 800b9e0:	6a23      	ldr	r3, [r4, #32]
 800b9e2:	b11b      	cbz	r3, 800b9ec <__sinit+0x14>
 800b9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9e8:	f7ff bff0 	b.w	800b9cc <__sfp_lock_release>
 800b9ec:	4b04      	ldr	r3, [pc, #16]	; (800ba00 <__sinit+0x28>)
 800b9ee:	6223      	str	r3, [r4, #32]
 800b9f0:	4b04      	ldr	r3, [pc, #16]	; (800ba04 <__sinit+0x2c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1f5      	bne.n	800b9e4 <__sinit+0xc>
 800b9f8:	f7ff ffc4 	bl	800b984 <global_stdio_init.part.0>
 800b9fc:	e7f2      	b.n	800b9e4 <__sinit+0xc>
 800b9fe:	bf00      	nop
 800ba00:	0800b945 	.word	0x0800b945
 800ba04:	2001120c 	.word	0x2001120c

0800ba08 <_fwalk_sglue>:
 800ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	4607      	mov	r7, r0
 800ba0e:	4688      	mov	r8, r1
 800ba10:	4614      	mov	r4, r2
 800ba12:	2600      	movs	r6, #0
 800ba14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba18:	f1b9 0901 	subs.w	r9, r9, #1
 800ba1c:	d505      	bpl.n	800ba2a <_fwalk_sglue+0x22>
 800ba1e:	6824      	ldr	r4, [r4, #0]
 800ba20:	2c00      	cmp	r4, #0
 800ba22:	d1f7      	bne.n	800ba14 <_fwalk_sglue+0xc>
 800ba24:	4630      	mov	r0, r6
 800ba26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2a:	89ab      	ldrh	r3, [r5, #12]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d907      	bls.n	800ba40 <_fwalk_sglue+0x38>
 800ba30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba34:	3301      	adds	r3, #1
 800ba36:	d003      	beq.n	800ba40 <_fwalk_sglue+0x38>
 800ba38:	4629      	mov	r1, r5
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	47c0      	blx	r8
 800ba3e:	4306      	orrs	r6, r0
 800ba40:	3568      	adds	r5, #104	; 0x68
 800ba42:	e7e9      	b.n	800ba18 <_fwalk_sglue+0x10>

0800ba44 <siprintf>:
 800ba44:	b40e      	push	{r1, r2, r3}
 800ba46:	b500      	push	{lr}
 800ba48:	b09c      	sub	sp, #112	; 0x70
 800ba4a:	ab1d      	add	r3, sp, #116	; 0x74
 800ba4c:	9002      	str	r0, [sp, #8]
 800ba4e:	9006      	str	r0, [sp, #24]
 800ba50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba54:	4809      	ldr	r0, [pc, #36]	; (800ba7c <siprintf+0x38>)
 800ba56:	9107      	str	r1, [sp, #28]
 800ba58:	9104      	str	r1, [sp, #16]
 800ba5a:	4909      	ldr	r1, [pc, #36]	; (800ba80 <siprintf+0x3c>)
 800ba5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba60:	9105      	str	r1, [sp, #20]
 800ba62:	6800      	ldr	r0, [r0, #0]
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	a902      	add	r1, sp, #8
 800ba68:	f001 fc22 	bl	800d2b0 <_svfiprintf_r>
 800ba6c:	9b02      	ldr	r3, [sp, #8]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	b01c      	add	sp, #112	; 0x70
 800ba74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba78:	b003      	add	sp, #12
 800ba7a:	4770      	bx	lr
 800ba7c:	20000880 	.word	0x20000880
 800ba80:	ffff0208 	.word	0xffff0208

0800ba84 <__sread>:
 800ba84:	b510      	push	{r4, lr}
 800ba86:	460c      	mov	r4, r1
 800ba88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba8c:	f000 f86c 	bl	800bb68 <_read_r>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	bfab      	itete	ge
 800ba94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba96:	89a3      	ldrhlt	r3, [r4, #12]
 800ba98:	181b      	addge	r3, r3, r0
 800ba9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba9e:	bfac      	ite	ge
 800baa0:	6563      	strge	r3, [r4, #84]	; 0x54
 800baa2:	81a3      	strhlt	r3, [r4, #12]
 800baa4:	bd10      	pop	{r4, pc}

0800baa6 <__swrite>:
 800baa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baaa:	461f      	mov	r7, r3
 800baac:	898b      	ldrh	r3, [r1, #12]
 800baae:	05db      	lsls	r3, r3, #23
 800bab0:	4605      	mov	r5, r0
 800bab2:	460c      	mov	r4, r1
 800bab4:	4616      	mov	r6, r2
 800bab6:	d505      	bpl.n	800bac4 <__swrite+0x1e>
 800bab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800babc:	2302      	movs	r3, #2
 800babe:	2200      	movs	r2, #0
 800bac0:	f000 f840 	bl	800bb44 <_lseek_r>
 800bac4:	89a3      	ldrh	r3, [r4, #12]
 800bac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bace:	81a3      	strh	r3, [r4, #12]
 800bad0:	4632      	mov	r2, r6
 800bad2:	463b      	mov	r3, r7
 800bad4:	4628      	mov	r0, r5
 800bad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bada:	f000 b857 	b.w	800bb8c <_write_r>

0800bade <__sseek>:
 800bade:	b510      	push	{r4, lr}
 800bae0:	460c      	mov	r4, r1
 800bae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae6:	f000 f82d 	bl	800bb44 <_lseek_r>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	89a3      	ldrh	r3, [r4, #12]
 800baee:	bf15      	itete	ne
 800baf0:	6560      	strne	r0, [r4, #84]	; 0x54
 800baf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800baf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bafa:	81a3      	strheq	r3, [r4, #12]
 800bafc:	bf18      	it	ne
 800bafe:	81a3      	strhne	r3, [r4, #12]
 800bb00:	bd10      	pop	{r4, pc}

0800bb02 <__sclose>:
 800bb02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb06:	f000 b80d 	b.w	800bb24 <_close_r>

0800bb0a <memset>:
 800bb0a:	4402      	add	r2, r0
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d100      	bne.n	800bb14 <memset+0xa>
 800bb12:	4770      	bx	lr
 800bb14:	f803 1b01 	strb.w	r1, [r3], #1
 800bb18:	e7f9      	b.n	800bb0e <memset+0x4>
	...

0800bb1c <_localeconv_r>:
 800bb1c:	4800      	ldr	r0, [pc, #0]	; (800bb20 <_localeconv_r+0x4>)
 800bb1e:	4770      	bx	lr
 800bb20:	20000974 	.word	0x20000974

0800bb24 <_close_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4d06      	ldr	r5, [pc, #24]	; (800bb40 <_close_r+0x1c>)
 800bb28:	2300      	movs	r3, #0
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	602b      	str	r3, [r5, #0]
 800bb30:	f7f7 fa85 	bl	800303e <_close>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_close_r+0x1a>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_close_r+0x1a>
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	20011210 	.word	0x20011210

0800bb44 <_lseek_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4d07      	ldr	r5, [pc, #28]	; (800bb64 <_lseek_r+0x20>)
 800bb48:	4604      	mov	r4, r0
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	2200      	movs	r2, #0
 800bb50:	602a      	str	r2, [r5, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	f7f7 fa9a 	bl	800308c <_lseek>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_lseek_r+0x1e>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_lseek_r+0x1e>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	20011210 	.word	0x20011210

0800bb68 <_read_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d07      	ldr	r5, [pc, #28]	; (800bb88 <_read_r+0x20>)
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	4608      	mov	r0, r1
 800bb70:	4611      	mov	r1, r2
 800bb72:	2200      	movs	r2, #0
 800bb74:	602a      	str	r2, [r5, #0]
 800bb76:	461a      	mov	r2, r3
 800bb78:	f7f7 fa28 	bl	8002fcc <_read>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	d102      	bne.n	800bb86 <_read_r+0x1e>
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	b103      	cbz	r3, 800bb86 <_read_r+0x1e>
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	bd38      	pop	{r3, r4, r5, pc}
 800bb88:	20011210 	.word	0x20011210

0800bb8c <_write_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	; (800bbac <_write_r+0x20>)
 800bb90:	4604      	mov	r4, r0
 800bb92:	4608      	mov	r0, r1
 800bb94:	4611      	mov	r1, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	602a      	str	r2, [r5, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f7f7 fa33 	bl	8003006 <_write>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_write_r+0x1e>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_write_r+0x1e>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	20011210 	.word	0x20011210

0800bbb0 <__errno>:
 800bbb0:	4b01      	ldr	r3, [pc, #4]	; (800bbb8 <__errno+0x8>)
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	20000880 	.word	0x20000880

0800bbbc <__libc_init_array>:
 800bbbc:	b570      	push	{r4, r5, r6, lr}
 800bbbe:	4d0d      	ldr	r5, [pc, #52]	; (800bbf4 <__libc_init_array+0x38>)
 800bbc0:	4c0d      	ldr	r4, [pc, #52]	; (800bbf8 <__libc_init_array+0x3c>)
 800bbc2:	1b64      	subs	r4, r4, r5
 800bbc4:	10a4      	asrs	r4, r4, #2
 800bbc6:	2600      	movs	r6, #0
 800bbc8:	42a6      	cmp	r6, r4
 800bbca:	d109      	bne.n	800bbe0 <__libc_init_array+0x24>
 800bbcc:	4d0b      	ldr	r5, [pc, #44]	; (800bbfc <__libc_init_array+0x40>)
 800bbce:	4c0c      	ldr	r4, [pc, #48]	; (800bc00 <__libc_init_array+0x44>)
 800bbd0:	f002 f896 	bl	800dd00 <_init>
 800bbd4:	1b64      	subs	r4, r4, r5
 800bbd6:	10a4      	asrs	r4, r4, #2
 800bbd8:	2600      	movs	r6, #0
 800bbda:	42a6      	cmp	r6, r4
 800bbdc:	d105      	bne.n	800bbea <__libc_init_array+0x2e>
 800bbde:	bd70      	pop	{r4, r5, r6, pc}
 800bbe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbe4:	4798      	blx	r3
 800bbe6:	3601      	adds	r6, #1
 800bbe8:	e7ee      	b.n	800bbc8 <__libc_init_array+0xc>
 800bbea:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbee:	4798      	blx	r3
 800bbf0:	3601      	adds	r6, #1
 800bbf2:	e7f2      	b.n	800bbda <__libc_init_array+0x1e>
 800bbf4:	08010c8c 	.word	0x08010c8c
 800bbf8:	08010c8c 	.word	0x08010c8c
 800bbfc:	08010c8c 	.word	0x08010c8c
 800bc00:	08010c90 	.word	0x08010c90

0800bc04 <__retarget_lock_init_recursive>:
 800bc04:	4770      	bx	lr

0800bc06 <__retarget_lock_acquire_recursive>:
 800bc06:	4770      	bx	lr

0800bc08 <__retarget_lock_release_recursive>:
 800bc08:	4770      	bx	lr

0800bc0a <quorem>:
 800bc0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0e:	6903      	ldr	r3, [r0, #16]
 800bc10:	690c      	ldr	r4, [r1, #16]
 800bc12:	42a3      	cmp	r3, r4
 800bc14:	4607      	mov	r7, r0
 800bc16:	db7e      	blt.n	800bd16 <quorem+0x10c>
 800bc18:	3c01      	subs	r4, #1
 800bc1a:	f101 0814 	add.w	r8, r1, #20
 800bc1e:	f100 0514 	add.w	r5, r0, #20
 800bc22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc30:	3301      	adds	r3, #1
 800bc32:	429a      	cmp	r2, r3
 800bc34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc40:	d331      	bcc.n	800bca6 <quorem+0x9c>
 800bc42:	f04f 0e00 	mov.w	lr, #0
 800bc46:	4640      	mov	r0, r8
 800bc48:	46ac      	mov	ip, r5
 800bc4a:	46f2      	mov	sl, lr
 800bc4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc50:	b293      	uxth	r3, r2
 800bc52:	fb06 e303 	mla	r3, r6, r3, lr
 800bc56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc5a:	0c1a      	lsrs	r2, r3, #16
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	ebaa 0303 	sub.w	r3, sl, r3
 800bc62:	f8dc a000 	ldr.w	sl, [ip]
 800bc66:	fa13 f38a 	uxtah	r3, r3, sl
 800bc6a:	fb06 220e 	mla	r2, r6, lr, r2
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	9b00      	ldr	r3, [sp, #0]
 800bc72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc76:	b292      	uxth	r2, r2
 800bc78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc80:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc84:	4581      	cmp	r9, r0
 800bc86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc8a:	f84c 3b04 	str.w	r3, [ip], #4
 800bc8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc92:	d2db      	bcs.n	800bc4c <quorem+0x42>
 800bc94:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc98:	b92b      	cbnz	r3, 800bca6 <quorem+0x9c>
 800bc9a:	9b01      	ldr	r3, [sp, #4]
 800bc9c:	3b04      	subs	r3, #4
 800bc9e:	429d      	cmp	r5, r3
 800bca0:	461a      	mov	r2, r3
 800bca2:	d32c      	bcc.n	800bcfe <quorem+0xf4>
 800bca4:	613c      	str	r4, [r7, #16]
 800bca6:	4638      	mov	r0, r7
 800bca8:	f001 f9a8 	bl	800cffc <__mcmp>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	db22      	blt.n	800bcf6 <quorem+0xec>
 800bcb0:	3601      	adds	r6, #1
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcba:	f8d1 c000 	ldr.w	ip, [r1]
 800bcbe:	b293      	uxth	r3, r2
 800bcc0:	1ac3      	subs	r3, r0, r3
 800bcc2:	0c12      	lsrs	r2, r2, #16
 800bcc4:	fa13 f38c 	uxtah	r3, r3, ip
 800bcc8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcd6:	45c1      	cmp	r9, r8
 800bcd8:	f841 3b04 	str.w	r3, [r1], #4
 800bcdc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bce0:	d2e9      	bcs.n	800bcb6 <quorem+0xac>
 800bce2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcea:	b922      	cbnz	r2, 800bcf6 <quorem+0xec>
 800bcec:	3b04      	subs	r3, #4
 800bcee:	429d      	cmp	r5, r3
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	d30a      	bcc.n	800bd0a <quorem+0x100>
 800bcf4:	613c      	str	r4, [r7, #16]
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	b003      	add	sp, #12
 800bcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcfe:	6812      	ldr	r2, [r2, #0]
 800bd00:	3b04      	subs	r3, #4
 800bd02:	2a00      	cmp	r2, #0
 800bd04:	d1ce      	bne.n	800bca4 <quorem+0x9a>
 800bd06:	3c01      	subs	r4, #1
 800bd08:	e7c9      	b.n	800bc9e <quorem+0x94>
 800bd0a:	6812      	ldr	r2, [r2, #0]
 800bd0c:	3b04      	subs	r3, #4
 800bd0e:	2a00      	cmp	r2, #0
 800bd10:	d1f0      	bne.n	800bcf4 <quorem+0xea>
 800bd12:	3c01      	subs	r4, #1
 800bd14:	e7eb      	b.n	800bcee <quorem+0xe4>
 800bd16:	2000      	movs	r0, #0
 800bd18:	e7ee      	b.n	800bcf8 <quorem+0xee>
 800bd1a:	0000      	movs	r0, r0
 800bd1c:	0000      	movs	r0, r0
	...

0800bd20 <_dtoa_r>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	ed2d 8b04 	vpush	{d8-d9}
 800bd28:	69c5      	ldr	r5, [r0, #28]
 800bd2a:	b093      	sub	sp, #76	; 0x4c
 800bd2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd30:	ec57 6b10 	vmov	r6, r7, d0
 800bd34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd38:	9107      	str	r1, [sp, #28]
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	920a      	str	r2, [sp, #40]	; 0x28
 800bd3e:	930d      	str	r3, [sp, #52]	; 0x34
 800bd40:	b975      	cbnz	r5, 800bd60 <_dtoa_r+0x40>
 800bd42:	2010      	movs	r0, #16
 800bd44:	f000 fe2a 	bl	800c99c <malloc>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	61e0      	str	r0, [r4, #28]
 800bd4c:	b920      	cbnz	r0, 800bd58 <_dtoa_r+0x38>
 800bd4e:	4bae      	ldr	r3, [pc, #696]	; (800c008 <_dtoa_r+0x2e8>)
 800bd50:	21ef      	movs	r1, #239	; 0xef
 800bd52:	48ae      	ldr	r0, [pc, #696]	; (800c00c <_dtoa_r+0x2ec>)
 800bd54:	f001 fc90 	bl	800d678 <__assert_func>
 800bd58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd5c:	6005      	str	r5, [r0, #0]
 800bd5e:	60c5      	str	r5, [r0, #12]
 800bd60:	69e3      	ldr	r3, [r4, #28]
 800bd62:	6819      	ldr	r1, [r3, #0]
 800bd64:	b151      	cbz	r1, 800bd7c <_dtoa_r+0x5c>
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	604a      	str	r2, [r1, #4]
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	4093      	lsls	r3, r2
 800bd6e:	608b      	str	r3, [r1, #8]
 800bd70:	4620      	mov	r0, r4
 800bd72:	f000 ff07 	bl	800cb84 <_Bfree>
 800bd76:	69e3      	ldr	r3, [r4, #28]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	1e3b      	subs	r3, r7, #0
 800bd7e:	bfbb      	ittet	lt
 800bd80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd84:	9303      	strlt	r3, [sp, #12]
 800bd86:	2300      	movge	r3, #0
 800bd88:	2201      	movlt	r2, #1
 800bd8a:	bfac      	ite	ge
 800bd8c:	f8c8 3000 	strge.w	r3, [r8]
 800bd90:	f8c8 2000 	strlt.w	r2, [r8]
 800bd94:	4b9e      	ldr	r3, [pc, #632]	; (800c010 <_dtoa_r+0x2f0>)
 800bd96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bd9a:	ea33 0308 	bics.w	r3, r3, r8
 800bd9e:	d11b      	bne.n	800bdd8 <_dtoa_r+0xb8>
 800bda0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bda2:	f242 730f 	movw	r3, #9999	; 0x270f
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bdac:	4333      	orrs	r3, r6
 800bdae:	f000 8593 	beq.w	800c8d8 <_dtoa_r+0xbb8>
 800bdb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdb4:	b963      	cbnz	r3, 800bdd0 <_dtoa_r+0xb0>
 800bdb6:	4b97      	ldr	r3, [pc, #604]	; (800c014 <_dtoa_r+0x2f4>)
 800bdb8:	e027      	b.n	800be0a <_dtoa_r+0xea>
 800bdba:	4b97      	ldr	r3, [pc, #604]	; (800c018 <_dtoa_r+0x2f8>)
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	3308      	adds	r3, #8
 800bdc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bdc2:	6013      	str	r3, [r2, #0]
 800bdc4:	9800      	ldr	r0, [sp, #0]
 800bdc6:	b013      	add	sp, #76	; 0x4c
 800bdc8:	ecbd 8b04 	vpop	{d8-d9}
 800bdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd0:	4b90      	ldr	r3, [pc, #576]	; (800c014 <_dtoa_r+0x2f4>)
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	3303      	adds	r3, #3
 800bdd6:	e7f3      	b.n	800bdc0 <_dtoa_r+0xa0>
 800bdd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bddc:	2200      	movs	r2, #0
 800bdde:	ec51 0b17 	vmov	r0, r1, d7
 800bde2:	eeb0 8a47 	vmov.f32	s16, s14
 800bde6:	eef0 8a67 	vmov.f32	s17, s15
 800bdea:	2300      	movs	r3, #0
 800bdec:	f7f4 fe8c 	bl	8000b08 <__aeabi_dcmpeq>
 800bdf0:	4681      	mov	r9, r0
 800bdf2:	b160      	cbz	r0, 800be0e <_dtoa_r+0xee>
 800bdf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	6013      	str	r3, [r2, #0]
 800bdfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f000 8568 	beq.w	800c8d2 <_dtoa_r+0xbb2>
 800be02:	4b86      	ldr	r3, [pc, #536]	; (800c01c <_dtoa_r+0x2fc>)
 800be04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be06:	6013      	str	r3, [r2, #0]
 800be08:	3b01      	subs	r3, #1
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	e7da      	b.n	800bdc4 <_dtoa_r+0xa4>
 800be0e:	aa10      	add	r2, sp, #64	; 0x40
 800be10:	a911      	add	r1, sp, #68	; 0x44
 800be12:	4620      	mov	r0, r4
 800be14:	eeb0 0a48 	vmov.f32	s0, s16
 800be18:	eef0 0a68 	vmov.f32	s1, s17
 800be1c:	f001 f994 	bl	800d148 <__d2b>
 800be20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800be24:	4682      	mov	sl, r0
 800be26:	2d00      	cmp	r5, #0
 800be28:	d07f      	beq.n	800bf2a <_dtoa_r+0x20a>
 800be2a:	ee18 3a90 	vmov	r3, s17
 800be2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800be36:	ec51 0b18 	vmov	r0, r1, d8
 800be3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800be46:	4619      	mov	r1, r3
 800be48:	2200      	movs	r2, #0
 800be4a:	4b75      	ldr	r3, [pc, #468]	; (800c020 <_dtoa_r+0x300>)
 800be4c:	f7f4 fa3c 	bl	80002c8 <__aeabi_dsub>
 800be50:	a367      	add	r3, pc, #412	; (adr r3, 800bff0 <_dtoa_r+0x2d0>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 fbef 	bl	8000638 <__aeabi_dmul>
 800be5a:	a367      	add	r3, pc, #412	; (adr r3, 800bff8 <_dtoa_r+0x2d8>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	f7f4 fa34 	bl	80002cc <__adddf3>
 800be64:	4606      	mov	r6, r0
 800be66:	4628      	mov	r0, r5
 800be68:	460f      	mov	r7, r1
 800be6a:	f7f4 fb7b 	bl	8000564 <__aeabi_i2d>
 800be6e:	a364      	add	r3, pc, #400	; (adr r3, 800c000 <_dtoa_r+0x2e0>)
 800be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be74:	f7f4 fbe0 	bl	8000638 <__aeabi_dmul>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4630      	mov	r0, r6
 800be7e:	4639      	mov	r1, r7
 800be80:	f7f4 fa24 	bl	80002cc <__adddf3>
 800be84:	4606      	mov	r6, r0
 800be86:	460f      	mov	r7, r1
 800be88:	f7f4 fe86 	bl	8000b98 <__aeabi_d2iz>
 800be8c:	2200      	movs	r2, #0
 800be8e:	4683      	mov	fp, r0
 800be90:	2300      	movs	r3, #0
 800be92:	4630      	mov	r0, r6
 800be94:	4639      	mov	r1, r7
 800be96:	f7f4 fe41 	bl	8000b1c <__aeabi_dcmplt>
 800be9a:	b148      	cbz	r0, 800beb0 <_dtoa_r+0x190>
 800be9c:	4658      	mov	r0, fp
 800be9e:	f7f4 fb61 	bl	8000564 <__aeabi_i2d>
 800bea2:	4632      	mov	r2, r6
 800bea4:	463b      	mov	r3, r7
 800bea6:	f7f4 fe2f 	bl	8000b08 <__aeabi_dcmpeq>
 800beaa:	b908      	cbnz	r0, 800beb0 <_dtoa_r+0x190>
 800beac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800beb0:	f1bb 0f16 	cmp.w	fp, #22
 800beb4:	d857      	bhi.n	800bf66 <_dtoa_r+0x246>
 800beb6:	4b5b      	ldr	r3, [pc, #364]	; (800c024 <_dtoa_r+0x304>)
 800beb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	ec51 0b18 	vmov	r0, r1, d8
 800bec4:	f7f4 fe2a 	bl	8000b1c <__aeabi_dcmplt>
 800bec8:	2800      	cmp	r0, #0
 800beca:	d04e      	beq.n	800bf6a <_dtoa_r+0x24a>
 800becc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bed0:	2300      	movs	r3, #0
 800bed2:	930c      	str	r3, [sp, #48]	; 0x30
 800bed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bed6:	1b5b      	subs	r3, r3, r5
 800bed8:	1e5a      	subs	r2, r3, #1
 800beda:	bf45      	ittet	mi
 800bedc:	f1c3 0301 	rsbmi	r3, r3, #1
 800bee0:	9305      	strmi	r3, [sp, #20]
 800bee2:	2300      	movpl	r3, #0
 800bee4:	2300      	movmi	r3, #0
 800bee6:	9206      	str	r2, [sp, #24]
 800bee8:	bf54      	ite	pl
 800beea:	9305      	strpl	r3, [sp, #20]
 800beec:	9306      	strmi	r3, [sp, #24]
 800beee:	f1bb 0f00 	cmp.w	fp, #0
 800bef2:	db3c      	blt.n	800bf6e <_dtoa_r+0x24e>
 800bef4:	9b06      	ldr	r3, [sp, #24]
 800bef6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800befa:	445b      	add	r3, fp
 800befc:	9306      	str	r3, [sp, #24]
 800befe:	2300      	movs	r3, #0
 800bf00:	9308      	str	r3, [sp, #32]
 800bf02:	9b07      	ldr	r3, [sp, #28]
 800bf04:	2b09      	cmp	r3, #9
 800bf06:	d868      	bhi.n	800bfda <_dtoa_r+0x2ba>
 800bf08:	2b05      	cmp	r3, #5
 800bf0a:	bfc4      	itt	gt
 800bf0c:	3b04      	subgt	r3, #4
 800bf0e:	9307      	strgt	r3, [sp, #28]
 800bf10:	9b07      	ldr	r3, [sp, #28]
 800bf12:	f1a3 0302 	sub.w	r3, r3, #2
 800bf16:	bfcc      	ite	gt
 800bf18:	2500      	movgt	r5, #0
 800bf1a:	2501      	movle	r5, #1
 800bf1c:	2b03      	cmp	r3, #3
 800bf1e:	f200 8085 	bhi.w	800c02c <_dtoa_r+0x30c>
 800bf22:	e8df f003 	tbb	[pc, r3]
 800bf26:	3b2e      	.short	0x3b2e
 800bf28:	5839      	.short	0x5839
 800bf2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf2e:	441d      	add	r5, r3
 800bf30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf34:	2b20      	cmp	r3, #32
 800bf36:	bfc1      	itttt	gt
 800bf38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf3c:	fa08 f803 	lslgt.w	r8, r8, r3
 800bf40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bf44:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bf48:	bfd6      	itet	le
 800bf4a:	f1c3 0320 	rsble	r3, r3, #32
 800bf4e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bf52:	fa06 f003 	lslle.w	r0, r6, r3
 800bf56:	f7f4 faf5 	bl	8000544 <__aeabi_ui2d>
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bf60:	3d01      	subs	r5, #1
 800bf62:	920e      	str	r2, [sp, #56]	; 0x38
 800bf64:	e76f      	b.n	800be46 <_dtoa_r+0x126>
 800bf66:	2301      	movs	r3, #1
 800bf68:	e7b3      	b.n	800bed2 <_dtoa_r+0x1b2>
 800bf6a:	900c      	str	r0, [sp, #48]	; 0x30
 800bf6c:	e7b2      	b.n	800bed4 <_dtoa_r+0x1b4>
 800bf6e:	9b05      	ldr	r3, [sp, #20]
 800bf70:	eba3 030b 	sub.w	r3, r3, fp
 800bf74:	9305      	str	r3, [sp, #20]
 800bf76:	f1cb 0300 	rsb	r3, fp, #0
 800bf7a:	9308      	str	r3, [sp, #32]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf80:	e7bf      	b.n	800bf02 <_dtoa_r+0x1e2>
 800bf82:	2300      	movs	r3, #0
 800bf84:	9309      	str	r3, [sp, #36]	; 0x24
 800bf86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dc52      	bgt.n	800c032 <_dtoa_r+0x312>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	9301      	str	r3, [sp, #4]
 800bf90:	9304      	str	r3, [sp, #16]
 800bf92:	461a      	mov	r2, r3
 800bf94:	920a      	str	r2, [sp, #40]	; 0x28
 800bf96:	e00b      	b.n	800bfb0 <_dtoa_r+0x290>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e7f3      	b.n	800bf84 <_dtoa_r+0x264>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa2:	445b      	add	r3, fp
 800bfa4:	9301      	str	r3, [sp, #4]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	9304      	str	r3, [sp, #16]
 800bfac:	bfb8      	it	lt
 800bfae:	2301      	movlt	r3, #1
 800bfb0:	69e0      	ldr	r0, [r4, #28]
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	2204      	movs	r2, #4
 800bfb6:	f102 0614 	add.w	r6, r2, #20
 800bfba:	429e      	cmp	r6, r3
 800bfbc:	d93d      	bls.n	800c03a <_dtoa_r+0x31a>
 800bfbe:	6041      	str	r1, [r0, #4]
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 fd9f 	bl	800cb04 <_Balloc>
 800bfc6:	9000      	str	r0, [sp, #0]
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d139      	bne.n	800c040 <_dtoa_r+0x320>
 800bfcc:	4b16      	ldr	r3, [pc, #88]	; (800c028 <_dtoa_r+0x308>)
 800bfce:	4602      	mov	r2, r0
 800bfd0:	f240 11af 	movw	r1, #431	; 0x1af
 800bfd4:	e6bd      	b.n	800bd52 <_dtoa_r+0x32>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e7e1      	b.n	800bf9e <_dtoa_r+0x27e>
 800bfda:	2501      	movs	r5, #1
 800bfdc:	2300      	movs	r3, #0
 800bfde:	9307      	str	r3, [sp, #28]
 800bfe0:	9509      	str	r5, [sp, #36]	; 0x24
 800bfe2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	2200      	movs	r2, #0
 800bfec:	2312      	movs	r3, #18
 800bfee:	e7d1      	b.n	800bf94 <_dtoa_r+0x274>
 800bff0:	636f4361 	.word	0x636f4361
 800bff4:	3fd287a7 	.word	0x3fd287a7
 800bff8:	8b60c8b3 	.word	0x8b60c8b3
 800bffc:	3fc68a28 	.word	0x3fc68a28
 800c000:	509f79fb 	.word	0x509f79fb
 800c004:	3fd34413 	.word	0x3fd34413
 800c008:	08010951 	.word	0x08010951
 800c00c:	08010968 	.word	0x08010968
 800c010:	7ff00000 	.word	0x7ff00000
 800c014:	0801094d 	.word	0x0801094d
 800c018:	08010944 	.word	0x08010944
 800c01c:	08010921 	.word	0x08010921
 800c020:	3ff80000 	.word	0x3ff80000
 800c024:	08010a58 	.word	0x08010a58
 800c028:	080109c0 	.word	0x080109c0
 800c02c:	2301      	movs	r3, #1
 800c02e:	9309      	str	r3, [sp, #36]	; 0x24
 800c030:	e7d7      	b.n	800bfe2 <_dtoa_r+0x2c2>
 800c032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	9304      	str	r3, [sp, #16]
 800c038:	e7ba      	b.n	800bfb0 <_dtoa_r+0x290>
 800c03a:	3101      	adds	r1, #1
 800c03c:	0052      	lsls	r2, r2, #1
 800c03e:	e7ba      	b.n	800bfb6 <_dtoa_r+0x296>
 800c040:	69e3      	ldr	r3, [r4, #28]
 800c042:	9a00      	ldr	r2, [sp, #0]
 800c044:	601a      	str	r2, [r3, #0]
 800c046:	9b04      	ldr	r3, [sp, #16]
 800c048:	2b0e      	cmp	r3, #14
 800c04a:	f200 80a8 	bhi.w	800c19e <_dtoa_r+0x47e>
 800c04e:	2d00      	cmp	r5, #0
 800c050:	f000 80a5 	beq.w	800c19e <_dtoa_r+0x47e>
 800c054:	f1bb 0f00 	cmp.w	fp, #0
 800c058:	dd38      	ble.n	800c0cc <_dtoa_r+0x3ac>
 800c05a:	4bc0      	ldr	r3, [pc, #768]	; (800c35c <_dtoa_r+0x63c>)
 800c05c:	f00b 020f 	and.w	r2, fp, #15
 800c060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c064:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c068:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c06c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c070:	d019      	beq.n	800c0a6 <_dtoa_r+0x386>
 800c072:	4bbb      	ldr	r3, [pc, #748]	; (800c360 <_dtoa_r+0x640>)
 800c074:	ec51 0b18 	vmov	r0, r1, d8
 800c078:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c07c:	f7f4 fc06 	bl	800088c <__aeabi_ddiv>
 800c080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c084:	f008 080f 	and.w	r8, r8, #15
 800c088:	2503      	movs	r5, #3
 800c08a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c360 <_dtoa_r+0x640>
 800c08e:	f1b8 0f00 	cmp.w	r8, #0
 800c092:	d10a      	bne.n	800c0aa <_dtoa_r+0x38a>
 800c094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c098:	4632      	mov	r2, r6
 800c09a:	463b      	mov	r3, r7
 800c09c:	f7f4 fbf6 	bl	800088c <__aeabi_ddiv>
 800c0a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0a4:	e02b      	b.n	800c0fe <_dtoa_r+0x3de>
 800c0a6:	2502      	movs	r5, #2
 800c0a8:	e7ef      	b.n	800c08a <_dtoa_r+0x36a>
 800c0aa:	f018 0f01 	tst.w	r8, #1
 800c0ae:	d008      	beq.n	800c0c2 <_dtoa_r+0x3a2>
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	4639      	mov	r1, r7
 800c0b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c0b8:	f7f4 fabe 	bl	8000638 <__aeabi_dmul>
 800c0bc:	3501      	adds	r5, #1
 800c0be:	4606      	mov	r6, r0
 800c0c0:	460f      	mov	r7, r1
 800c0c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c0c6:	f109 0908 	add.w	r9, r9, #8
 800c0ca:	e7e0      	b.n	800c08e <_dtoa_r+0x36e>
 800c0cc:	f000 809f 	beq.w	800c20e <_dtoa_r+0x4ee>
 800c0d0:	f1cb 0600 	rsb	r6, fp, #0
 800c0d4:	4ba1      	ldr	r3, [pc, #644]	; (800c35c <_dtoa_r+0x63c>)
 800c0d6:	4fa2      	ldr	r7, [pc, #648]	; (800c360 <_dtoa_r+0x640>)
 800c0d8:	f006 020f 	and.w	r2, r6, #15
 800c0dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e4:	ec51 0b18 	vmov	r0, r1, d8
 800c0e8:	f7f4 faa6 	bl	8000638 <__aeabi_dmul>
 800c0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0f0:	1136      	asrs	r6, r6, #4
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	2502      	movs	r5, #2
 800c0f6:	2e00      	cmp	r6, #0
 800c0f8:	d17e      	bne.n	800c1f8 <_dtoa_r+0x4d8>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1d0      	bne.n	800c0a0 <_dtoa_r+0x380>
 800c0fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c100:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 8084 	beq.w	800c212 <_dtoa_r+0x4f2>
 800c10a:	4b96      	ldr	r3, [pc, #600]	; (800c364 <_dtoa_r+0x644>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	4640      	mov	r0, r8
 800c110:	4649      	mov	r1, r9
 800c112:	f7f4 fd03 	bl	8000b1c <__aeabi_dcmplt>
 800c116:	2800      	cmp	r0, #0
 800c118:	d07b      	beq.n	800c212 <_dtoa_r+0x4f2>
 800c11a:	9b04      	ldr	r3, [sp, #16]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d078      	beq.n	800c212 <_dtoa_r+0x4f2>
 800c120:	9b01      	ldr	r3, [sp, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	dd39      	ble.n	800c19a <_dtoa_r+0x47a>
 800c126:	4b90      	ldr	r3, [pc, #576]	; (800c368 <_dtoa_r+0x648>)
 800c128:	2200      	movs	r2, #0
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 fa83 	bl	8000638 <__aeabi_dmul>
 800c132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c136:	9e01      	ldr	r6, [sp, #4]
 800c138:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c13c:	3501      	adds	r5, #1
 800c13e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c142:	4628      	mov	r0, r5
 800c144:	f7f4 fa0e 	bl	8000564 <__aeabi_i2d>
 800c148:	4642      	mov	r2, r8
 800c14a:	464b      	mov	r3, r9
 800c14c:	f7f4 fa74 	bl	8000638 <__aeabi_dmul>
 800c150:	4b86      	ldr	r3, [pc, #536]	; (800c36c <_dtoa_r+0x64c>)
 800c152:	2200      	movs	r2, #0
 800c154:	f7f4 f8ba 	bl	80002cc <__adddf3>
 800c158:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c160:	9303      	str	r3, [sp, #12]
 800c162:	2e00      	cmp	r6, #0
 800c164:	d158      	bne.n	800c218 <_dtoa_r+0x4f8>
 800c166:	4b82      	ldr	r3, [pc, #520]	; (800c370 <_dtoa_r+0x650>)
 800c168:	2200      	movs	r2, #0
 800c16a:	4640      	mov	r0, r8
 800c16c:	4649      	mov	r1, r9
 800c16e:	f7f4 f8ab 	bl	80002c8 <__aeabi_dsub>
 800c172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c176:	4680      	mov	r8, r0
 800c178:	4689      	mov	r9, r1
 800c17a:	f7f4 fced 	bl	8000b58 <__aeabi_dcmpgt>
 800c17e:	2800      	cmp	r0, #0
 800c180:	f040 8296 	bne.w	800c6b0 <_dtoa_r+0x990>
 800c184:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c188:	4640      	mov	r0, r8
 800c18a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c18e:	4649      	mov	r1, r9
 800c190:	f7f4 fcc4 	bl	8000b1c <__aeabi_dcmplt>
 800c194:	2800      	cmp	r0, #0
 800c196:	f040 8289 	bne.w	800c6ac <_dtoa_r+0x98c>
 800c19a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c19e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f2c0 814e 	blt.w	800c442 <_dtoa_r+0x722>
 800c1a6:	f1bb 0f0e 	cmp.w	fp, #14
 800c1aa:	f300 814a 	bgt.w	800c442 <_dtoa_r+0x722>
 800c1ae:	4b6b      	ldr	r3, [pc, #428]	; (800c35c <_dtoa_r+0x63c>)
 800c1b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f280 80dc 	bge.w	800c378 <_dtoa_r+0x658>
 800c1c0:	9b04      	ldr	r3, [sp, #16]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f300 80d8 	bgt.w	800c378 <_dtoa_r+0x658>
 800c1c8:	f040 826f 	bne.w	800c6aa <_dtoa_r+0x98a>
 800c1cc:	4b68      	ldr	r3, [pc, #416]	; (800c370 <_dtoa_r+0x650>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	4640      	mov	r0, r8
 800c1d2:	4649      	mov	r1, r9
 800c1d4:	f7f4 fa30 	bl	8000638 <__aeabi_dmul>
 800c1d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1dc:	f7f4 fcb2 	bl	8000b44 <__aeabi_dcmpge>
 800c1e0:	9e04      	ldr	r6, [sp, #16]
 800c1e2:	4637      	mov	r7, r6
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	f040 8245 	bne.w	800c674 <_dtoa_r+0x954>
 800c1ea:	9d00      	ldr	r5, [sp, #0]
 800c1ec:	2331      	movs	r3, #49	; 0x31
 800c1ee:	f805 3b01 	strb.w	r3, [r5], #1
 800c1f2:	f10b 0b01 	add.w	fp, fp, #1
 800c1f6:	e241      	b.n	800c67c <_dtoa_r+0x95c>
 800c1f8:	07f2      	lsls	r2, r6, #31
 800c1fa:	d505      	bpl.n	800c208 <_dtoa_r+0x4e8>
 800c1fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c200:	f7f4 fa1a 	bl	8000638 <__aeabi_dmul>
 800c204:	3501      	adds	r5, #1
 800c206:	2301      	movs	r3, #1
 800c208:	1076      	asrs	r6, r6, #1
 800c20a:	3708      	adds	r7, #8
 800c20c:	e773      	b.n	800c0f6 <_dtoa_r+0x3d6>
 800c20e:	2502      	movs	r5, #2
 800c210:	e775      	b.n	800c0fe <_dtoa_r+0x3de>
 800c212:	9e04      	ldr	r6, [sp, #16]
 800c214:	465f      	mov	r7, fp
 800c216:	e792      	b.n	800c13e <_dtoa_r+0x41e>
 800c218:	9900      	ldr	r1, [sp, #0]
 800c21a:	4b50      	ldr	r3, [pc, #320]	; (800c35c <_dtoa_r+0x63c>)
 800c21c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c220:	4431      	add	r1, r6
 800c222:	9102      	str	r1, [sp, #8]
 800c224:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c226:	eeb0 9a47 	vmov.f32	s18, s14
 800c22a:	eef0 9a67 	vmov.f32	s19, s15
 800c22e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c232:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c236:	2900      	cmp	r1, #0
 800c238:	d044      	beq.n	800c2c4 <_dtoa_r+0x5a4>
 800c23a:	494e      	ldr	r1, [pc, #312]	; (800c374 <_dtoa_r+0x654>)
 800c23c:	2000      	movs	r0, #0
 800c23e:	f7f4 fb25 	bl	800088c <__aeabi_ddiv>
 800c242:	ec53 2b19 	vmov	r2, r3, d9
 800c246:	f7f4 f83f 	bl	80002c8 <__aeabi_dsub>
 800c24a:	9d00      	ldr	r5, [sp, #0]
 800c24c:	ec41 0b19 	vmov	d9, r0, r1
 800c250:	4649      	mov	r1, r9
 800c252:	4640      	mov	r0, r8
 800c254:	f7f4 fca0 	bl	8000b98 <__aeabi_d2iz>
 800c258:	4606      	mov	r6, r0
 800c25a:	f7f4 f983 	bl	8000564 <__aeabi_i2d>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f4 f82f 	bl	80002c8 <__aeabi_dsub>
 800c26a:	3630      	adds	r6, #48	; 0x30
 800c26c:	f805 6b01 	strb.w	r6, [r5], #1
 800c270:	ec53 2b19 	vmov	r2, r3, d9
 800c274:	4680      	mov	r8, r0
 800c276:	4689      	mov	r9, r1
 800c278:	f7f4 fc50 	bl	8000b1c <__aeabi_dcmplt>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d164      	bne.n	800c34a <_dtoa_r+0x62a>
 800c280:	4642      	mov	r2, r8
 800c282:	464b      	mov	r3, r9
 800c284:	4937      	ldr	r1, [pc, #220]	; (800c364 <_dtoa_r+0x644>)
 800c286:	2000      	movs	r0, #0
 800c288:	f7f4 f81e 	bl	80002c8 <__aeabi_dsub>
 800c28c:	ec53 2b19 	vmov	r2, r3, d9
 800c290:	f7f4 fc44 	bl	8000b1c <__aeabi_dcmplt>
 800c294:	2800      	cmp	r0, #0
 800c296:	f040 80b6 	bne.w	800c406 <_dtoa_r+0x6e6>
 800c29a:	9b02      	ldr	r3, [sp, #8]
 800c29c:	429d      	cmp	r5, r3
 800c29e:	f43f af7c 	beq.w	800c19a <_dtoa_r+0x47a>
 800c2a2:	4b31      	ldr	r3, [pc, #196]	; (800c368 <_dtoa_r+0x648>)
 800c2a4:	ec51 0b19 	vmov	r0, r1, d9
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f7f4 f9c5 	bl	8000638 <__aeabi_dmul>
 800c2ae:	4b2e      	ldr	r3, [pc, #184]	; (800c368 <_dtoa_r+0x648>)
 800c2b0:	ec41 0b19 	vmov	d9, r0, r1
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	4649      	mov	r1, r9
 800c2ba:	f7f4 f9bd 	bl	8000638 <__aeabi_dmul>
 800c2be:	4680      	mov	r8, r0
 800c2c0:	4689      	mov	r9, r1
 800c2c2:	e7c5      	b.n	800c250 <_dtoa_r+0x530>
 800c2c4:	ec51 0b17 	vmov	r0, r1, d7
 800c2c8:	f7f4 f9b6 	bl	8000638 <__aeabi_dmul>
 800c2cc:	9b02      	ldr	r3, [sp, #8]
 800c2ce:	9d00      	ldr	r5, [sp, #0]
 800c2d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2d2:	ec41 0b19 	vmov	d9, r0, r1
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	4640      	mov	r0, r8
 800c2da:	f7f4 fc5d 	bl	8000b98 <__aeabi_d2iz>
 800c2de:	4606      	mov	r6, r0
 800c2e0:	f7f4 f940 	bl	8000564 <__aeabi_i2d>
 800c2e4:	3630      	adds	r6, #48	; 0x30
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	4649      	mov	r1, r9
 800c2ee:	f7f3 ffeb 	bl	80002c8 <__aeabi_dsub>
 800c2f2:	f805 6b01 	strb.w	r6, [r5], #1
 800c2f6:	9b02      	ldr	r3, [sp, #8]
 800c2f8:	429d      	cmp	r5, r3
 800c2fa:	4680      	mov	r8, r0
 800c2fc:	4689      	mov	r9, r1
 800c2fe:	f04f 0200 	mov.w	r2, #0
 800c302:	d124      	bne.n	800c34e <_dtoa_r+0x62e>
 800c304:	4b1b      	ldr	r3, [pc, #108]	; (800c374 <_dtoa_r+0x654>)
 800c306:	ec51 0b19 	vmov	r0, r1, d9
 800c30a:	f7f3 ffdf 	bl	80002cc <__adddf3>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4640      	mov	r0, r8
 800c314:	4649      	mov	r1, r9
 800c316:	f7f4 fc1f 	bl	8000b58 <__aeabi_dcmpgt>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d173      	bne.n	800c406 <_dtoa_r+0x6e6>
 800c31e:	ec53 2b19 	vmov	r2, r3, d9
 800c322:	4914      	ldr	r1, [pc, #80]	; (800c374 <_dtoa_r+0x654>)
 800c324:	2000      	movs	r0, #0
 800c326:	f7f3 ffcf 	bl	80002c8 <__aeabi_dsub>
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	4640      	mov	r0, r8
 800c330:	4649      	mov	r1, r9
 800c332:	f7f4 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 800c336:	2800      	cmp	r0, #0
 800c338:	f43f af2f 	beq.w	800c19a <_dtoa_r+0x47a>
 800c33c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c33e:	1e6b      	subs	r3, r5, #1
 800c340:	930f      	str	r3, [sp, #60]	; 0x3c
 800c342:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c346:	2b30      	cmp	r3, #48	; 0x30
 800c348:	d0f8      	beq.n	800c33c <_dtoa_r+0x61c>
 800c34a:	46bb      	mov	fp, r7
 800c34c:	e04a      	b.n	800c3e4 <_dtoa_r+0x6c4>
 800c34e:	4b06      	ldr	r3, [pc, #24]	; (800c368 <_dtoa_r+0x648>)
 800c350:	f7f4 f972 	bl	8000638 <__aeabi_dmul>
 800c354:	4680      	mov	r8, r0
 800c356:	4689      	mov	r9, r1
 800c358:	e7bd      	b.n	800c2d6 <_dtoa_r+0x5b6>
 800c35a:	bf00      	nop
 800c35c:	08010a58 	.word	0x08010a58
 800c360:	08010a30 	.word	0x08010a30
 800c364:	3ff00000 	.word	0x3ff00000
 800c368:	40240000 	.word	0x40240000
 800c36c:	401c0000 	.word	0x401c0000
 800c370:	40140000 	.word	0x40140000
 800c374:	3fe00000 	.word	0x3fe00000
 800c378:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c37c:	9d00      	ldr	r5, [sp, #0]
 800c37e:	4642      	mov	r2, r8
 800c380:	464b      	mov	r3, r9
 800c382:	4630      	mov	r0, r6
 800c384:	4639      	mov	r1, r7
 800c386:	f7f4 fa81 	bl	800088c <__aeabi_ddiv>
 800c38a:	f7f4 fc05 	bl	8000b98 <__aeabi_d2iz>
 800c38e:	9001      	str	r0, [sp, #4]
 800c390:	f7f4 f8e8 	bl	8000564 <__aeabi_i2d>
 800c394:	4642      	mov	r2, r8
 800c396:	464b      	mov	r3, r9
 800c398:	f7f4 f94e 	bl	8000638 <__aeabi_dmul>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	f7f3 ff90 	bl	80002c8 <__aeabi_dsub>
 800c3a8:	9e01      	ldr	r6, [sp, #4]
 800c3aa:	9f04      	ldr	r7, [sp, #16]
 800c3ac:	3630      	adds	r6, #48	; 0x30
 800c3ae:	f805 6b01 	strb.w	r6, [r5], #1
 800c3b2:	9e00      	ldr	r6, [sp, #0]
 800c3b4:	1bae      	subs	r6, r5, r6
 800c3b6:	42b7      	cmp	r7, r6
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	d134      	bne.n	800c428 <_dtoa_r+0x708>
 800c3be:	f7f3 ff85 	bl	80002cc <__adddf3>
 800c3c2:	4642      	mov	r2, r8
 800c3c4:	464b      	mov	r3, r9
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	f7f4 fbc5 	bl	8000b58 <__aeabi_dcmpgt>
 800c3ce:	b9c8      	cbnz	r0, 800c404 <_dtoa_r+0x6e4>
 800c3d0:	4642      	mov	r2, r8
 800c3d2:	464b      	mov	r3, r9
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	4639      	mov	r1, r7
 800c3d8:	f7f4 fb96 	bl	8000b08 <__aeabi_dcmpeq>
 800c3dc:	b110      	cbz	r0, 800c3e4 <_dtoa_r+0x6c4>
 800c3de:	9b01      	ldr	r3, [sp, #4]
 800c3e0:	07db      	lsls	r3, r3, #31
 800c3e2:	d40f      	bmi.n	800c404 <_dtoa_r+0x6e4>
 800c3e4:	4651      	mov	r1, sl
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 fbcc 	bl	800cb84 <_Bfree>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3f0:	702b      	strb	r3, [r5, #0]
 800c3f2:	f10b 0301 	add.w	r3, fp, #1
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f43f ace2 	beq.w	800bdc4 <_dtoa_r+0xa4>
 800c400:	601d      	str	r5, [r3, #0]
 800c402:	e4df      	b.n	800bdc4 <_dtoa_r+0xa4>
 800c404:	465f      	mov	r7, fp
 800c406:	462b      	mov	r3, r5
 800c408:	461d      	mov	r5, r3
 800c40a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c40e:	2a39      	cmp	r2, #57	; 0x39
 800c410:	d106      	bne.n	800c420 <_dtoa_r+0x700>
 800c412:	9a00      	ldr	r2, [sp, #0]
 800c414:	429a      	cmp	r2, r3
 800c416:	d1f7      	bne.n	800c408 <_dtoa_r+0x6e8>
 800c418:	9900      	ldr	r1, [sp, #0]
 800c41a:	2230      	movs	r2, #48	; 0x30
 800c41c:	3701      	adds	r7, #1
 800c41e:	700a      	strb	r2, [r1, #0]
 800c420:	781a      	ldrb	r2, [r3, #0]
 800c422:	3201      	adds	r2, #1
 800c424:	701a      	strb	r2, [r3, #0]
 800c426:	e790      	b.n	800c34a <_dtoa_r+0x62a>
 800c428:	4ba3      	ldr	r3, [pc, #652]	; (800c6b8 <_dtoa_r+0x998>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	f7f4 f904 	bl	8000638 <__aeabi_dmul>
 800c430:	2200      	movs	r2, #0
 800c432:	2300      	movs	r3, #0
 800c434:	4606      	mov	r6, r0
 800c436:	460f      	mov	r7, r1
 800c438:	f7f4 fb66 	bl	8000b08 <__aeabi_dcmpeq>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d09e      	beq.n	800c37e <_dtoa_r+0x65e>
 800c440:	e7d0      	b.n	800c3e4 <_dtoa_r+0x6c4>
 800c442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c444:	2a00      	cmp	r2, #0
 800c446:	f000 80ca 	beq.w	800c5de <_dtoa_r+0x8be>
 800c44a:	9a07      	ldr	r2, [sp, #28]
 800c44c:	2a01      	cmp	r2, #1
 800c44e:	f300 80ad 	bgt.w	800c5ac <_dtoa_r+0x88c>
 800c452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c454:	2a00      	cmp	r2, #0
 800c456:	f000 80a5 	beq.w	800c5a4 <_dtoa_r+0x884>
 800c45a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c45e:	9e08      	ldr	r6, [sp, #32]
 800c460:	9d05      	ldr	r5, [sp, #20]
 800c462:	9a05      	ldr	r2, [sp, #20]
 800c464:	441a      	add	r2, r3
 800c466:	9205      	str	r2, [sp, #20]
 800c468:	9a06      	ldr	r2, [sp, #24]
 800c46a:	2101      	movs	r1, #1
 800c46c:	441a      	add	r2, r3
 800c46e:	4620      	mov	r0, r4
 800c470:	9206      	str	r2, [sp, #24]
 800c472:	f000 fc3d 	bl	800ccf0 <__i2b>
 800c476:	4607      	mov	r7, r0
 800c478:	b165      	cbz	r5, 800c494 <_dtoa_r+0x774>
 800c47a:	9b06      	ldr	r3, [sp, #24]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	dd09      	ble.n	800c494 <_dtoa_r+0x774>
 800c480:	42ab      	cmp	r3, r5
 800c482:	9a05      	ldr	r2, [sp, #20]
 800c484:	bfa8      	it	ge
 800c486:	462b      	movge	r3, r5
 800c488:	1ad2      	subs	r2, r2, r3
 800c48a:	9205      	str	r2, [sp, #20]
 800c48c:	9a06      	ldr	r2, [sp, #24]
 800c48e:	1aed      	subs	r5, r5, r3
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	9306      	str	r3, [sp, #24]
 800c494:	9b08      	ldr	r3, [sp, #32]
 800c496:	b1f3      	cbz	r3, 800c4d6 <_dtoa_r+0x7b6>
 800c498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 80a3 	beq.w	800c5e6 <_dtoa_r+0x8c6>
 800c4a0:	2e00      	cmp	r6, #0
 800c4a2:	dd10      	ble.n	800c4c6 <_dtoa_r+0x7a6>
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	4632      	mov	r2, r6
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 fce1 	bl	800ce70 <__pow5mult>
 800c4ae:	4652      	mov	r2, sl
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f000 fc31 	bl	800cd1c <__multiply>
 800c4ba:	4651      	mov	r1, sl
 800c4bc:	4680      	mov	r8, r0
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f000 fb60 	bl	800cb84 <_Bfree>
 800c4c4:	46c2      	mov	sl, r8
 800c4c6:	9b08      	ldr	r3, [sp, #32]
 800c4c8:	1b9a      	subs	r2, r3, r6
 800c4ca:	d004      	beq.n	800c4d6 <_dtoa_r+0x7b6>
 800c4cc:	4651      	mov	r1, sl
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f000 fcce 	bl	800ce70 <__pow5mult>
 800c4d4:	4682      	mov	sl, r0
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 fc09 	bl	800ccf0 <__i2b>
 800c4de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	f340 8081 	ble.w	800c5ea <_dtoa_r+0x8ca>
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	4601      	mov	r1, r0
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f000 fcbf 	bl	800ce70 <__pow5mult>
 800c4f2:	9b07      	ldr	r3, [sp, #28]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	dd7a      	ble.n	800c5f0 <_dtoa_r+0x8d0>
 800c4fa:	f04f 0800 	mov.w	r8, #0
 800c4fe:	6933      	ldr	r3, [r6, #16]
 800c500:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c504:	6918      	ldr	r0, [r3, #16]
 800c506:	f000 fba5 	bl	800cc54 <__hi0bits>
 800c50a:	f1c0 0020 	rsb	r0, r0, #32
 800c50e:	9b06      	ldr	r3, [sp, #24]
 800c510:	4418      	add	r0, r3
 800c512:	f010 001f 	ands.w	r0, r0, #31
 800c516:	f000 8094 	beq.w	800c642 <_dtoa_r+0x922>
 800c51a:	f1c0 0320 	rsb	r3, r0, #32
 800c51e:	2b04      	cmp	r3, #4
 800c520:	f340 8085 	ble.w	800c62e <_dtoa_r+0x90e>
 800c524:	9b05      	ldr	r3, [sp, #20]
 800c526:	f1c0 001c 	rsb	r0, r0, #28
 800c52a:	4403      	add	r3, r0
 800c52c:	9305      	str	r3, [sp, #20]
 800c52e:	9b06      	ldr	r3, [sp, #24]
 800c530:	4403      	add	r3, r0
 800c532:	4405      	add	r5, r0
 800c534:	9306      	str	r3, [sp, #24]
 800c536:	9b05      	ldr	r3, [sp, #20]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dd05      	ble.n	800c548 <_dtoa_r+0x828>
 800c53c:	4651      	mov	r1, sl
 800c53e:	461a      	mov	r2, r3
 800c540:	4620      	mov	r0, r4
 800c542:	f000 fcef 	bl	800cf24 <__lshift>
 800c546:	4682      	mov	sl, r0
 800c548:	9b06      	ldr	r3, [sp, #24]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	dd05      	ble.n	800c55a <_dtoa_r+0x83a>
 800c54e:	4631      	mov	r1, r6
 800c550:	461a      	mov	r2, r3
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fce6 	bl	800cf24 <__lshift>
 800c558:	4606      	mov	r6, r0
 800c55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d072      	beq.n	800c646 <_dtoa_r+0x926>
 800c560:	4631      	mov	r1, r6
 800c562:	4650      	mov	r0, sl
 800c564:	f000 fd4a 	bl	800cffc <__mcmp>
 800c568:	2800      	cmp	r0, #0
 800c56a:	da6c      	bge.n	800c646 <_dtoa_r+0x926>
 800c56c:	2300      	movs	r3, #0
 800c56e:	4651      	mov	r1, sl
 800c570:	220a      	movs	r2, #10
 800c572:	4620      	mov	r0, r4
 800c574:	f000 fb28 	bl	800cbc8 <__multadd>
 800c578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c57a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c57e:	4682      	mov	sl, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 81b0 	beq.w	800c8e6 <_dtoa_r+0xbc6>
 800c586:	2300      	movs	r3, #0
 800c588:	4639      	mov	r1, r7
 800c58a:	220a      	movs	r2, #10
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 fb1b 	bl	800cbc8 <__multadd>
 800c592:	9b01      	ldr	r3, [sp, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	4607      	mov	r7, r0
 800c598:	f300 8096 	bgt.w	800c6c8 <_dtoa_r+0x9a8>
 800c59c:	9b07      	ldr	r3, [sp, #28]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	dc59      	bgt.n	800c656 <_dtoa_r+0x936>
 800c5a2:	e091      	b.n	800c6c8 <_dtoa_r+0x9a8>
 800c5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5aa:	e758      	b.n	800c45e <_dtoa_r+0x73e>
 800c5ac:	9b04      	ldr	r3, [sp, #16]
 800c5ae:	1e5e      	subs	r6, r3, #1
 800c5b0:	9b08      	ldr	r3, [sp, #32]
 800c5b2:	42b3      	cmp	r3, r6
 800c5b4:	bfbf      	itttt	lt
 800c5b6:	9b08      	ldrlt	r3, [sp, #32]
 800c5b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c5ba:	9608      	strlt	r6, [sp, #32]
 800c5bc:	1af3      	sublt	r3, r6, r3
 800c5be:	bfb4      	ite	lt
 800c5c0:	18d2      	addlt	r2, r2, r3
 800c5c2:	1b9e      	subge	r6, r3, r6
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	bfbc      	itt	lt
 800c5c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c5ca:	2600      	movlt	r6, #0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	bfb7      	itett	lt
 800c5d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c5d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c5d8:	1a9d      	sublt	r5, r3, r2
 800c5da:	2300      	movlt	r3, #0
 800c5dc:	e741      	b.n	800c462 <_dtoa_r+0x742>
 800c5de:	9e08      	ldr	r6, [sp, #32]
 800c5e0:	9d05      	ldr	r5, [sp, #20]
 800c5e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c5e4:	e748      	b.n	800c478 <_dtoa_r+0x758>
 800c5e6:	9a08      	ldr	r2, [sp, #32]
 800c5e8:	e770      	b.n	800c4cc <_dtoa_r+0x7ac>
 800c5ea:	9b07      	ldr	r3, [sp, #28]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	dc19      	bgt.n	800c624 <_dtoa_r+0x904>
 800c5f0:	9b02      	ldr	r3, [sp, #8]
 800c5f2:	b9bb      	cbnz	r3, 800c624 <_dtoa_r+0x904>
 800c5f4:	9b03      	ldr	r3, [sp, #12]
 800c5f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5fa:	b99b      	cbnz	r3, 800c624 <_dtoa_r+0x904>
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c602:	0d1b      	lsrs	r3, r3, #20
 800c604:	051b      	lsls	r3, r3, #20
 800c606:	b183      	cbz	r3, 800c62a <_dtoa_r+0x90a>
 800c608:	9b05      	ldr	r3, [sp, #20]
 800c60a:	3301      	adds	r3, #1
 800c60c:	9305      	str	r3, [sp, #20]
 800c60e:	9b06      	ldr	r3, [sp, #24]
 800c610:	3301      	adds	r3, #1
 800c612:	9306      	str	r3, [sp, #24]
 800c614:	f04f 0801 	mov.w	r8, #1
 800c618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f47f af6f 	bne.w	800c4fe <_dtoa_r+0x7de>
 800c620:	2001      	movs	r0, #1
 800c622:	e774      	b.n	800c50e <_dtoa_r+0x7ee>
 800c624:	f04f 0800 	mov.w	r8, #0
 800c628:	e7f6      	b.n	800c618 <_dtoa_r+0x8f8>
 800c62a:	4698      	mov	r8, r3
 800c62c:	e7f4      	b.n	800c618 <_dtoa_r+0x8f8>
 800c62e:	d082      	beq.n	800c536 <_dtoa_r+0x816>
 800c630:	9a05      	ldr	r2, [sp, #20]
 800c632:	331c      	adds	r3, #28
 800c634:	441a      	add	r2, r3
 800c636:	9205      	str	r2, [sp, #20]
 800c638:	9a06      	ldr	r2, [sp, #24]
 800c63a:	441a      	add	r2, r3
 800c63c:	441d      	add	r5, r3
 800c63e:	9206      	str	r2, [sp, #24]
 800c640:	e779      	b.n	800c536 <_dtoa_r+0x816>
 800c642:	4603      	mov	r3, r0
 800c644:	e7f4      	b.n	800c630 <_dtoa_r+0x910>
 800c646:	9b04      	ldr	r3, [sp, #16]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	dc37      	bgt.n	800c6bc <_dtoa_r+0x99c>
 800c64c:	9b07      	ldr	r3, [sp, #28]
 800c64e:	2b02      	cmp	r3, #2
 800c650:	dd34      	ble.n	800c6bc <_dtoa_r+0x99c>
 800c652:	9b04      	ldr	r3, [sp, #16]
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	9b01      	ldr	r3, [sp, #4]
 800c658:	b963      	cbnz	r3, 800c674 <_dtoa_r+0x954>
 800c65a:	4631      	mov	r1, r6
 800c65c:	2205      	movs	r2, #5
 800c65e:	4620      	mov	r0, r4
 800c660:	f000 fab2 	bl	800cbc8 <__multadd>
 800c664:	4601      	mov	r1, r0
 800c666:	4606      	mov	r6, r0
 800c668:	4650      	mov	r0, sl
 800c66a:	f000 fcc7 	bl	800cffc <__mcmp>
 800c66e:	2800      	cmp	r0, #0
 800c670:	f73f adbb 	bgt.w	800c1ea <_dtoa_r+0x4ca>
 800c674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c676:	9d00      	ldr	r5, [sp, #0]
 800c678:	ea6f 0b03 	mvn.w	fp, r3
 800c67c:	f04f 0800 	mov.w	r8, #0
 800c680:	4631      	mov	r1, r6
 800c682:	4620      	mov	r0, r4
 800c684:	f000 fa7e 	bl	800cb84 <_Bfree>
 800c688:	2f00      	cmp	r7, #0
 800c68a:	f43f aeab 	beq.w	800c3e4 <_dtoa_r+0x6c4>
 800c68e:	f1b8 0f00 	cmp.w	r8, #0
 800c692:	d005      	beq.n	800c6a0 <_dtoa_r+0x980>
 800c694:	45b8      	cmp	r8, r7
 800c696:	d003      	beq.n	800c6a0 <_dtoa_r+0x980>
 800c698:	4641      	mov	r1, r8
 800c69a:	4620      	mov	r0, r4
 800c69c:	f000 fa72 	bl	800cb84 <_Bfree>
 800c6a0:	4639      	mov	r1, r7
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f000 fa6e 	bl	800cb84 <_Bfree>
 800c6a8:	e69c      	b.n	800c3e4 <_dtoa_r+0x6c4>
 800c6aa:	2600      	movs	r6, #0
 800c6ac:	4637      	mov	r7, r6
 800c6ae:	e7e1      	b.n	800c674 <_dtoa_r+0x954>
 800c6b0:	46bb      	mov	fp, r7
 800c6b2:	4637      	mov	r7, r6
 800c6b4:	e599      	b.n	800c1ea <_dtoa_r+0x4ca>
 800c6b6:	bf00      	nop
 800c6b8:	40240000 	.word	0x40240000
 800c6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 80c8 	beq.w	800c854 <_dtoa_r+0xb34>
 800c6c4:	9b04      	ldr	r3, [sp, #16]
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	dd05      	ble.n	800c6d8 <_dtoa_r+0x9b8>
 800c6cc:	4639      	mov	r1, r7
 800c6ce:	462a      	mov	r2, r5
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fc27 	bl	800cf24 <__lshift>
 800c6d6:	4607      	mov	r7, r0
 800c6d8:	f1b8 0f00 	cmp.w	r8, #0
 800c6dc:	d05b      	beq.n	800c796 <_dtoa_r+0xa76>
 800c6de:	6879      	ldr	r1, [r7, #4]
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 fa0f 	bl	800cb04 <_Balloc>
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	b928      	cbnz	r0, 800c6f6 <_dtoa_r+0x9d6>
 800c6ea:	4b83      	ldr	r3, [pc, #524]	; (800c8f8 <_dtoa_r+0xbd8>)
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c6f2:	f7ff bb2e 	b.w	800bd52 <_dtoa_r+0x32>
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	3202      	adds	r2, #2
 800c6fa:	0092      	lsls	r2, r2, #2
 800c6fc:	f107 010c 	add.w	r1, r7, #12
 800c700:	300c      	adds	r0, #12
 800c702:	f000 ffab 	bl	800d65c <memcpy>
 800c706:	2201      	movs	r2, #1
 800c708:	4629      	mov	r1, r5
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 fc0a 	bl	800cf24 <__lshift>
 800c710:	9b00      	ldr	r3, [sp, #0]
 800c712:	3301      	adds	r3, #1
 800c714:	9304      	str	r3, [sp, #16]
 800c716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c71a:	4413      	add	r3, r2
 800c71c:	9308      	str	r3, [sp, #32]
 800c71e:	9b02      	ldr	r3, [sp, #8]
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	46b8      	mov	r8, r7
 800c726:	9306      	str	r3, [sp, #24]
 800c728:	4607      	mov	r7, r0
 800c72a:	9b04      	ldr	r3, [sp, #16]
 800c72c:	4631      	mov	r1, r6
 800c72e:	3b01      	subs	r3, #1
 800c730:	4650      	mov	r0, sl
 800c732:	9301      	str	r3, [sp, #4]
 800c734:	f7ff fa69 	bl	800bc0a <quorem>
 800c738:	4641      	mov	r1, r8
 800c73a:	9002      	str	r0, [sp, #8]
 800c73c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c740:	4650      	mov	r0, sl
 800c742:	f000 fc5b 	bl	800cffc <__mcmp>
 800c746:	463a      	mov	r2, r7
 800c748:	9005      	str	r0, [sp, #20]
 800c74a:	4631      	mov	r1, r6
 800c74c:	4620      	mov	r0, r4
 800c74e:	f000 fc71 	bl	800d034 <__mdiff>
 800c752:	68c2      	ldr	r2, [r0, #12]
 800c754:	4605      	mov	r5, r0
 800c756:	bb02      	cbnz	r2, 800c79a <_dtoa_r+0xa7a>
 800c758:	4601      	mov	r1, r0
 800c75a:	4650      	mov	r0, sl
 800c75c:	f000 fc4e 	bl	800cffc <__mcmp>
 800c760:	4602      	mov	r2, r0
 800c762:	4629      	mov	r1, r5
 800c764:	4620      	mov	r0, r4
 800c766:	9209      	str	r2, [sp, #36]	; 0x24
 800c768:	f000 fa0c 	bl	800cb84 <_Bfree>
 800c76c:	9b07      	ldr	r3, [sp, #28]
 800c76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c770:	9d04      	ldr	r5, [sp, #16]
 800c772:	ea43 0102 	orr.w	r1, r3, r2
 800c776:	9b06      	ldr	r3, [sp, #24]
 800c778:	4319      	orrs	r1, r3
 800c77a:	d110      	bne.n	800c79e <_dtoa_r+0xa7e>
 800c77c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c780:	d029      	beq.n	800c7d6 <_dtoa_r+0xab6>
 800c782:	9b05      	ldr	r3, [sp, #20]
 800c784:	2b00      	cmp	r3, #0
 800c786:	dd02      	ble.n	800c78e <_dtoa_r+0xa6e>
 800c788:	9b02      	ldr	r3, [sp, #8]
 800c78a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c78e:	9b01      	ldr	r3, [sp, #4]
 800c790:	f883 9000 	strb.w	r9, [r3]
 800c794:	e774      	b.n	800c680 <_dtoa_r+0x960>
 800c796:	4638      	mov	r0, r7
 800c798:	e7ba      	b.n	800c710 <_dtoa_r+0x9f0>
 800c79a:	2201      	movs	r2, #1
 800c79c:	e7e1      	b.n	800c762 <_dtoa_r+0xa42>
 800c79e:	9b05      	ldr	r3, [sp, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	db04      	blt.n	800c7ae <_dtoa_r+0xa8e>
 800c7a4:	9907      	ldr	r1, [sp, #28]
 800c7a6:	430b      	orrs	r3, r1
 800c7a8:	9906      	ldr	r1, [sp, #24]
 800c7aa:	430b      	orrs	r3, r1
 800c7ac:	d120      	bne.n	800c7f0 <_dtoa_r+0xad0>
 800c7ae:	2a00      	cmp	r2, #0
 800c7b0:	dded      	ble.n	800c78e <_dtoa_r+0xa6e>
 800c7b2:	4651      	mov	r1, sl
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 fbb4 	bl	800cf24 <__lshift>
 800c7bc:	4631      	mov	r1, r6
 800c7be:	4682      	mov	sl, r0
 800c7c0:	f000 fc1c 	bl	800cffc <__mcmp>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	dc03      	bgt.n	800c7d0 <_dtoa_r+0xab0>
 800c7c8:	d1e1      	bne.n	800c78e <_dtoa_r+0xa6e>
 800c7ca:	f019 0f01 	tst.w	r9, #1
 800c7ce:	d0de      	beq.n	800c78e <_dtoa_r+0xa6e>
 800c7d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c7d4:	d1d8      	bne.n	800c788 <_dtoa_r+0xa68>
 800c7d6:	9a01      	ldr	r2, [sp, #4]
 800c7d8:	2339      	movs	r3, #57	; 0x39
 800c7da:	7013      	strb	r3, [r2, #0]
 800c7dc:	462b      	mov	r3, r5
 800c7de:	461d      	mov	r5, r3
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7e6:	2a39      	cmp	r2, #57	; 0x39
 800c7e8:	d06c      	beq.n	800c8c4 <_dtoa_r+0xba4>
 800c7ea:	3201      	adds	r2, #1
 800c7ec:	701a      	strb	r2, [r3, #0]
 800c7ee:	e747      	b.n	800c680 <_dtoa_r+0x960>
 800c7f0:	2a00      	cmp	r2, #0
 800c7f2:	dd07      	ble.n	800c804 <_dtoa_r+0xae4>
 800c7f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c7f8:	d0ed      	beq.n	800c7d6 <_dtoa_r+0xab6>
 800c7fa:	9a01      	ldr	r2, [sp, #4]
 800c7fc:	f109 0301 	add.w	r3, r9, #1
 800c800:	7013      	strb	r3, [r2, #0]
 800c802:	e73d      	b.n	800c680 <_dtoa_r+0x960>
 800c804:	9b04      	ldr	r3, [sp, #16]
 800c806:	9a08      	ldr	r2, [sp, #32]
 800c808:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d043      	beq.n	800c898 <_dtoa_r+0xb78>
 800c810:	4651      	mov	r1, sl
 800c812:	2300      	movs	r3, #0
 800c814:	220a      	movs	r2, #10
 800c816:	4620      	mov	r0, r4
 800c818:	f000 f9d6 	bl	800cbc8 <__multadd>
 800c81c:	45b8      	cmp	r8, r7
 800c81e:	4682      	mov	sl, r0
 800c820:	f04f 0300 	mov.w	r3, #0
 800c824:	f04f 020a 	mov.w	r2, #10
 800c828:	4641      	mov	r1, r8
 800c82a:	4620      	mov	r0, r4
 800c82c:	d107      	bne.n	800c83e <_dtoa_r+0xb1e>
 800c82e:	f000 f9cb 	bl	800cbc8 <__multadd>
 800c832:	4680      	mov	r8, r0
 800c834:	4607      	mov	r7, r0
 800c836:	9b04      	ldr	r3, [sp, #16]
 800c838:	3301      	adds	r3, #1
 800c83a:	9304      	str	r3, [sp, #16]
 800c83c:	e775      	b.n	800c72a <_dtoa_r+0xa0a>
 800c83e:	f000 f9c3 	bl	800cbc8 <__multadd>
 800c842:	4639      	mov	r1, r7
 800c844:	4680      	mov	r8, r0
 800c846:	2300      	movs	r3, #0
 800c848:	220a      	movs	r2, #10
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 f9bc 	bl	800cbc8 <__multadd>
 800c850:	4607      	mov	r7, r0
 800c852:	e7f0      	b.n	800c836 <_dtoa_r+0xb16>
 800c854:	9b04      	ldr	r3, [sp, #16]
 800c856:	9301      	str	r3, [sp, #4]
 800c858:	9d00      	ldr	r5, [sp, #0]
 800c85a:	4631      	mov	r1, r6
 800c85c:	4650      	mov	r0, sl
 800c85e:	f7ff f9d4 	bl	800bc0a <quorem>
 800c862:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c866:	9b00      	ldr	r3, [sp, #0]
 800c868:	f805 9b01 	strb.w	r9, [r5], #1
 800c86c:	1aea      	subs	r2, r5, r3
 800c86e:	9b01      	ldr	r3, [sp, #4]
 800c870:	4293      	cmp	r3, r2
 800c872:	dd07      	ble.n	800c884 <_dtoa_r+0xb64>
 800c874:	4651      	mov	r1, sl
 800c876:	2300      	movs	r3, #0
 800c878:	220a      	movs	r2, #10
 800c87a:	4620      	mov	r0, r4
 800c87c:	f000 f9a4 	bl	800cbc8 <__multadd>
 800c880:	4682      	mov	sl, r0
 800c882:	e7ea      	b.n	800c85a <_dtoa_r+0xb3a>
 800c884:	9b01      	ldr	r3, [sp, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	bfc8      	it	gt
 800c88a:	461d      	movgt	r5, r3
 800c88c:	9b00      	ldr	r3, [sp, #0]
 800c88e:	bfd8      	it	le
 800c890:	2501      	movle	r5, #1
 800c892:	441d      	add	r5, r3
 800c894:	f04f 0800 	mov.w	r8, #0
 800c898:	4651      	mov	r1, sl
 800c89a:	2201      	movs	r2, #1
 800c89c:	4620      	mov	r0, r4
 800c89e:	f000 fb41 	bl	800cf24 <__lshift>
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	4682      	mov	sl, r0
 800c8a6:	f000 fba9 	bl	800cffc <__mcmp>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	dc96      	bgt.n	800c7dc <_dtoa_r+0xabc>
 800c8ae:	d102      	bne.n	800c8b6 <_dtoa_r+0xb96>
 800c8b0:	f019 0f01 	tst.w	r9, #1
 800c8b4:	d192      	bne.n	800c7dc <_dtoa_r+0xabc>
 800c8b6:	462b      	mov	r3, r5
 800c8b8:	461d      	mov	r5, r3
 800c8ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8be:	2a30      	cmp	r2, #48	; 0x30
 800c8c0:	d0fa      	beq.n	800c8b8 <_dtoa_r+0xb98>
 800c8c2:	e6dd      	b.n	800c680 <_dtoa_r+0x960>
 800c8c4:	9a00      	ldr	r2, [sp, #0]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d189      	bne.n	800c7de <_dtoa_r+0xabe>
 800c8ca:	f10b 0b01 	add.w	fp, fp, #1
 800c8ce:	2331      	movs	r3, #49	; 0x31
 800c8d0:	e796      	b.n	800c800 <_dtoa_r+0xae0>
 800c8d2:	4b0a      	ldr	r3, [pc, #40]	; (800c8fc <_dtoa_r+0xbdc>)
 800c8d4:	f7ff ba99 	b.w	800be0a <_dtoa_r+0xea>
 800c8d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f47f aa6d 	bne.w	800bdba <_dtoa_r+0x9a>
 800c8e0:	4b07      	ldr	r3, [pc, #28]	; (800c900 <_dtoa_r+0xbe0>)
 800c8e2:	f7ff ba92 	b.w	800be0a <_dtoa_r+0xea>
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	dcb5      	bgt.n	800c858 <_dtoa_r+0xb38>
 800c8ec:	9b07      	ldr	r3, [sp, #28]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	f73f aeb1 	bgt.w	800c656 <_dtoa_r+0x936>
 800c8f4:	e7b0      	b.n	800c858 <_dtoa_r+0xb38>
 800c8f6:	bf00      	nop
 800c8f8:	080109c0 	.word	0x080109c0
 800c8fc:	08010920 	.word	0x08010920
 800c900:	08010944 	.word	0x08010944

0800c904 <_free_r>:
 800c904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c906:	2900      	cmp	r1, #0
 800c908:	d044      	beq.n	800c994 <_free_r+0x90>
 800c90a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c90e:	9001      	str	r0, [sp, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	f1a1 0404 	sub.w	r4, r1, #4
 800c916:	bfb8      	it	lt
 800c918:	18e4      	addlt	r4, r4, r3
 800c91a:	f000 f8e7 	bl	800caec <__malloc_lock>
 800c91e:	4a1e      	ldr	r2, [pc, #120]	; (800c998 <_free_r+0x94>)
 800c920:	9801      	ldr	r0, [sp, #4]
 800c922:	6813      	ldr	r3, [r2, #0]
 800c924:	b933      	cbnz	r3, 800c934 <_free_r+0x30>
 800c926:	6063      	str	r3, [r4, #4]
 800c928:	6014      	str	r4, [r2, #0]
 800c92a:	b003      	add	sp, #12
 800c92c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c930:	f000 b8e2 	b.w	800caf8 <__malloc_unlock>
 800c934:	42a3      	cmp	r3, r4
 800c936:	d908      	bls.n	800c94a <_free_r+0x46>
 800c938:	6825      	ldr	r5, [r4, #0]
 800c93a:	1961      	adds	r1, r4, r5
 800c93c:	428b      	cmp	r3, r1
 800c93e:	bf01      	itttt	eq
 800c940:	6819      	ldreq	r1, [r3, #0]
 800c942:	685b      	ldreq	r3, [r3, #4]
 800c944:	1949      	addeq	r1, r1, r5
 800c946:	6021      	streq	r1, [r4, #0]
 800c948:	e7ed      	b.n	800c926 <_free_r+0x22>
 800c94a:	461a      	mov	r2, r3
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	b10b      	cbz	r3, 800c954 <_free_r+0x50>
 800c950:	42a3      	cmp	r3, r4
 800c952:	d9fa      	bls.n	800c94a <_free_r+0x46>
 800c954:	6811      	ldr	r1, [r2, #0]
 800c956:	1855      	adds	r5, r2, r1
 800c958:	42a5      	cmp	r5, r4
 800c95a:	d10b      	bne.n	800c974 <_free_r+0x70>
 800c95c:	6824      	ldr	r4, [r4, #0]
 800c95e:	4421      	add	r1, r4
 800c960:	1854      	adds	r4, r2, r1
 800c962:	42a3      	cmp	r3, r4
 800c964:	6011      	str	r1, [r2, #0]
 800c966:	d1e0      	bne.n	800c92a <_free_r+0x26>
 800c968:	681c      	ldr	r4, [r3, #0]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	6053      	str	r3, [r2, #4]
 800c96e:	440c      	add	r4, r1
 800c970:	6014      	str	r4, [r2, #0]
 800c972:	e7da      	b.n	800c92a <_free_r+0x26>
 800c974:	d902      	bls.n	800c97c <_free_r+0x78>
 800c976:	230c      	movs	r3, #12
 800c978:	6003      	str	r3, [r0, #0]
 800c97a:	e7d6      	b.n	800c92a <_free_r+0x26>
 800c97c:	6825      	ldr	r5, [r4, #0]
 800c97e:	1961      	adds	r1, r4, r5
 800c980:	428b      	cmp	r3, r1
 800c982:	bf04      	itt	eq
 800c984:	6819      	ldreq	r1, [r3, #0]
 800c986:	685b      	ldreq	r3, [r3, #4]
 800c988:	6063      	str	r3, [r4, #4]
 800c98a:	bf04      	itt	eq
 800c98c:	1949      	addeq	r1, r1, r5
 800c98e:	6021      	streq	r1, [r4, #0]
 800c990:	6054      	str	r4, [r2, #4]
 800c992:	e7ca      	b.n	800c92a <_free_r+0x26>
 800c994:	b003      	add	sp, #12
 800c996:	bd30      	pop	{r4, r5, pc}
 800c998:	20011218 	.word	0x20011218

0800c99c <malloc>:
 800c99c:	4b02      	ldr	r3, [pc, #8]	; (800c9a8 <malloc+0xc>)
 800c99e:	4601      	mov	r1, r0
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	f000 b823 	b.w	800c9ec <_malloc_r>
 800c9a6:	bf00      	nop
 800c9a8:	20000880 	.word	0x20000880

0800c9ac <sbrk_aligned>:
 800c9ac:	b570      	push	{r4, r5, r6, lr}
 800c9ae:	4e0e      	ldr	r6, [pc, #56]	; (800c9e8 <sbrk_aligned+0x3c>)
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	6831      	ldr	r1, [r6, #0]
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	b911      	cbnz	r1, 800c9be <sbrk_aligned+0x12>
 800c9b8:	f000 fe40 	bl	800d63c <_sbrk_r>
 800c9bc:	6030      	str	r0, [r6, #0]
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	f000 fe3b 	bl	800d63c <_sbrk_r>
 800c9c6:	1c43      	adds	r3, r0, #1
 800c9c8:	d00a      	beq.n	800c9e0 <sbrk_aligned+0x34>
 800c9ca:	1cc4      	adds	r4, r0, #3
 800c9cc:	f024 0403 	bic.w	r4, r4, #3
 800c9d0:	42a0      	cmp	r0, r4
 800c9d2:	d007      	beq.n	800c9e4 <sbrk_aligned+0x38>
 800c9d4:	1a21      	subs	r1, r4, r0
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f000 fe30 	bl	800d63c <_sbrk_r>
 800c9dc:	3001      	adds	r0, #1
 800c9de:	d101      	bne.n	800c9e4 <sbrk_aligned+0x38>
 800c9e0:	f04f 34ff 	mov.w	r4, #4294967295
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	bd70      	pop	{r4, r5, r6, pc}
 800c9e8:	2001121c 	.word	0x2001121c

0800c9ec <_malloc_r>:
 800c9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f0:	1ccd      	adds	r5, r1, #3
 800c9f2:	f025 0503 	bic.w	r5, r5, #3
 800c9f6:	3508      	adds	r5, #8
 800c9f8:	2d0c      	cmp	r5, #12
 800c9fa:	bf38      	it	cc
 800c9fc:	250c      	movcc	r5, #12
 800c9fe:	2d00      	cmp	r5, #0
 800ca00:	4607      	mov	r7, r0
 800ca02:	db01      	blt.n	800ca08 <_malloc_r+0x1c>
 800ca04:	42a9      	cmp	r1, r5
 800ca06:	d905      	bls.n	800ca14 <_malloc_r+0x28>
 800ca08:	230c      	movs	r3, #12
 800ca0a:	603b      	str	r3, [r7, #0]
 800ca0c:	2600      	movs	r6, #0
 800ca0e:	4630      	mov	r0, r6
 800ca10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cae8 <_malloc_r+0xfc>
 800ca18:	f000 f868 	bl	800caec <__malloc_lock>
 800ca1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca20:	461c      	mov	r4, r3
 800ca22:	bb5c      	cbnz	r4, 800ca7c <_malloc_r+0x90>
 800ca24:	4629      	mov	r1, r5
 800ca26:	4638      	mov	r0, r7
 800ca28:	f7ff ffc0 	bl	800c9ac <sbrk_aligned>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	4604      	mov	r4, r0
 800ca30:	d155      	bne.n	800cade <_malloc_r+0xf2>
 800ca32:	f8d8 4000 	ldr.w	r4, [r8]
 800ca36:	4626      	mov	r6, r4
 800ca38:	2e00      	cmp	r6, #0
 800ca3a:	d145      	bne.n	800cac8 <_malloc_r+0xdc>
 800ca3c:	2c00      	cmp	r4, #0
 800ca3e:	d048      	beq.n	800cad2 <_malloc_r+0xe6>
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	4631      	mov	r1, r6
 800ca44:	4638      	mov	r0, r7
 800ca46:	eb04 0903 	add.w	r9, r4, r3
 800ca4a:	f000 fdf7 	bl	800d63c <_sbrk_r>
 800ca4e:	4581      	cmp	r9, r0
 800ca50:	d13f      	bne.n	800cad2 <_malloc_r+0xe6>
 800ca52:	6821      	ldr	r1, [r4, #0]
 800ca54:	1a6d      	subs	r5, r5, r1
 800ca56:	4629      	mov	r1, r5
 800ca58:	4638      	mov	r0, r7
 800ca5a:	f7ff ffa7 	bl	800c9ac <sbrk_aligned>
 800ca5e:	3001      	adds	r0, #1
 800ca60:	d037      	beq.n	800cad2 <_malloc_r+0xe6>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	442b      	add	r3, r5
 800ca66:	6023      	str	r3, [r4, #0]
 800ca68:	f8d8 3000 	ldr.w	r3, [r8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d038      	beq.n	800cae2 <_malloc_r+0xf6>
 800ca70:	685a      	ldr	r2, [r3, #4]
 800ca72:	42a2      	cmp	r2, r4
 800ca74:	d12b      	bne.n	800cace <_malloc_r+0xe2>
 800ca76:	2200      	movs	r2, #0
 800ca78:	605a      	str	r2, [r3, #4]
 800ca7a:	e00f      	b.n	800ca9c <_malloc_r+0xb0>
 800ca7c:	6822      	ldr	r2, [r4, #0]
 800ca7e:	1b52      	subs	r2, r2, r5
 800ca80:	d41f      	bmi.n	800cac2 <_malloc_r+0xd6>
 800ca82:	2a0b      	cmp	r2, #11
 800ca84:	d917      	bls.n	800cab6 <_malloc_r+0xca>
 800ca86:	1961      	adds	r1, r4, r5
 800ca88:	42a3      	cmp	r3, r4
 800ca8a:	6025      	str	r5, [r4, #0]
 800ca8c:	bf18      	it	ne
 800ca8e:	6059      	strne	r1, [r3, #4]
 800ca90:	6863      	ldr	r3, [r4, #4]
 800ca92:	bf08      	it	eq
 800ca94:	f8c8 1000 	streq.w	r1, [r8]
 800ca98:	5162      	str	r2, [r4, r5]
 800ca9a:	604b      	str	r3, [r1, #4]
 800ca9c:	4638      	mov	r0, r7
 800ca9e:	f104 060b 	add.w	r6, r4, #11
 800caa2:	f000 f829 	bl	800caf8 <__malloc_unlock>
 800caa6:	f026 0607 	bic.w	r6, r6, #7
 800caaa:	1d23      	adds	r3, r4, #4
 800caac:	1af2      	subs	r2, r6, r3
 800caae:	d0ae      	beq.n	800ca0e <_malloc_r+0x22>
 800cab0:	1b9b      	subs	r3, r3, r6
 800cab2:	50a3      	str	r3, [r4, r2]
 800cab4:	e7ab      	b.n	800ca0e <_malloc_r+0x22>
 800cab6:	42a3      	cmp	r3, r4
 800cab8:	6862      	ldr	r2, [r4, #4]
 800caba:	d1dd      	bne.n	800ca78 <_malloc_r+0x8c>
 800cabc:	f8c8 2000 	str.w	r2, [r8]
 800cac0:	e7ec      	b.n	800ca9c <_malloc_r+0xb0>
 800cac2:	4623      	mov	r3, r4
 800cac4:	6864      	ldr	r4, [r4, #4]
 800cac6:	e7ac      	b.n	800ca22 <_malloc_r+0x36>
 800cac8:	4634      	mov	r4, r6
 800caca:	6876      	ldr	r6, [r6, #4]
 800cacc:	e7b4      	b.n	800ca38 <_malloc_r+0x4c>
 800cace:	4613      	mov	r3, r2
 800cad0:	e7cc      	b.n	800ca6c <_malloc_r+0x80>
 800cad2:	230c      	movs	r3, #12
 800cad4:	603b      	str	r3, [r7, #0]
 800cad6:	4638      	mov	r0, r7
 800cad8:	f000 f80e 	bl	800caf8 <__malloc_unlock>
 800cadc:	e797      	b.n	800ca0e <_malloc_r+0x22>
 800cade:	6025      	str	r5, [r4, #0]
 800cae0:	e7dc      	b.n	800ca9c <_malloc_r+0xb0>
 800cae2:	605b      	str	r3, [r3, #4]
 800cae4:	deff      	udf	#255	; 0xff
 800cae6:	bf00      	nop
 800cae8:	20011218 	.word	0x20011218

0800caec <__malloc_lock>:
 800caec:	4801      	ldr	r0, [pc, #4]	; (800caf4 <__malloc_lock+0x8>)
 800caee:	f7ff b88a 	b.w	800bc06 <__retarget_lock_acquire_recursive>
 800caf2:	bf00      	nop
 800caf4:	20011214 	.word	0x20011214

0800caf8 <__malloc_unlock>:
 800caf8:	4801      	ldr	r0, [pc, #4]	; (800cb00 <__malloc_unlock+0x8>)
 800cafa:	f7ff b885 	b.w	800bc08 <__retarget_lock_release_recursive>
 800cafe:	bf00      	nop
 800cb00:	20011214 	.word	0x20011214

0800cb04 <_Balloc>:
 800cb04:	b570      	push	{r4, r5, r6, lr}
 800cb06:	69c6      	ldr	r6, [r0, #28]
 800cb08:	4604      	mov	r4, r0
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	b976      	cbnz	r6, 800cb2c <_Balloc+0x28>
 800cb0e:	2010      	movs	r0, #16
 800cb10:	f7ff ff44 	bl	800c99c <malloc>
 800cb14:	4602      	mov	r2, r0
 800cb16:	61e0      	str	r0, [r4, #28]
 800cb18:	b920      	cbnz	r0, 800cb24 <_Balloc+0x20>
 800cb1a:	4b18      	ldr	r3, [pc, #96]	; (800cb7c <_Balloc+0x78>)
 800cb1c:	4818      	ldr	r0, [pc, #96]	; (800cb80 <_Balloc+0x7c>)
 800cb1e:	216b      	movs	r1, #107	; 0x6b
 800cb20:	f000 fdaa 	bl	800d678 <__assert_func>
 800cb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb28:	6006      	str	r6, [r0, #0]
 800cb2a:	60c6      	str	r6, [r0, #12]
 800cb2c:	69e6      	ldr	r6, [r4, #28]
 800cb2e:	68f3      	ldr	r3, [r6, #12]
 800cb30:	b183      	cbz	r3, 800cb54 <_Balloc+0x50>
 800cb32:	69e3      	ldr	r3, [r4, #28]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb3a:	b9b8      	cbnz	r0, 800cb6c <_Balloc+0x68>
 800cb3c:	2101      	movs	r1, #1
 800cb3e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb42:	1d72      	adds	r2, r6, #5
 800cb44:	0092      	lsls	r2, r2, #2
 800cb46:	4620      	mov	r0, r4
 800cb48:	f000 fdb4 	bl	800d6b4 <_calloc_r>
 800cb4c:	b160      	cbz	r0, 800cb68 <_Balloc+0x64>
 800cb4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb52:	e00e      	b.n	800cb72 <_Balloc+0x6e>
 800cb54:	2221      	movs	r2, #33	; 0x21
 800cb56:	2104      	movs	r1, #4
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 fdab 	bl	800d6b4 <_calloc_r>
 800cb5e:	69e3      	ldr	r3, [r4, #28]
 800cb60:	60f0      	str	r0, [r6, #12]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1e4      	bne.n	800cb32 <_Balloc+0x2e>
 800cb68:	2000      	movs	r0, #0
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}
 800cb6c:	6802      	ldr	r2, [r0, #0]
 800cb6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb72:	2300      	movs	r3, #0
 800cb74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb78:	e7f7      	b.n	800cb6a <_Balloc+0x66>
 800cb7a:	bf00      	nop
 800cb7c:	08010951 	.word	0x08010951
 800cb80:	080109d1 	.word	0x080109d1

0800cb84 <_Bfree>:
 800cb84:	b570      	push	{r4, r5, r6, lr}
 800cb86:	69c6      	ldr	r6, [r0, #28]
 800cb88:	4605      	mov	r5, r0
 800cb8a:	460c      	mov	r4, r1
 800cb8c:	b976      	cbnz	r6, 800cbac <_Bfree+0x28>
 800cb8e:	2010      	movs	r0, #16
 800cb90:	f7ff ff04 	bl	800c99c <malloc>
 800cb94:	4602      	mov	r2, r0
 800cb96:	61e8      	str	r0, [r5, #28]
 800cb98:	b920      	cbnz	r0, 800cba4 <_Bfree+0x20>
 800cb9a:	4b09      	ldr	r3, [pc, #36]	; (800cbc0 <_Bfree+0x3c>)
 800cb9c:	4809      	ldr	r0, [pc, #36]	; (800cbc4 <_Bfree+0x40>)
 800cb9e:	218f      	movs	r1, #143	; 0x8f
 800cba0:	f000 fd6a 	bl	800d678 <__assert_func>
 800cba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cba8:	6006      	str	r6, [r0, #0]
 800cbaa:	60c6      	str	r6, [r0, #12]
 800cbac:	b13c      	cbz	r4, 800cbbe <_Bfree+0x3a>
 800cbae:	69eb      	ldr	r3, [r5, #28]
 800cbb0:	6862      	ldr	r2, [r4, #4]
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbb8:	6021      	str	r1, [r4, #0]
 800cbba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}
 800cbc0:	08010951 	.word	0x08010951
 800cbc4:	080109d1 	.word	0x080109d1

0800cbc8 <__multadd>:
 800cbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbcc:	690d      	ldr	r5, [r1, #16]
 800cbce:	4607      	mov	r7, r0
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	461e      	mov	r6, r3
 800cbd4:	f101 0c14 	add.w	ip, r1, #20
 800cbd8:	2000      	movs	r0, #0
 800cbda:	f8dc 3000 	ldr.w	r3, [ip]
 800cbde:	b299      	uxth	r1, r3
 800cbe0:	fb02 6101 	mla	r1, r2, r1, r6
 800cbe4:	0c1e      	lsrs	r6, r3, #16
 800cbe6:	0c0b      	lsrs	r3, r1, #16
 800cbe8:	fb02 3306 	mla	r3, r2, r6, r3
 800cbec:	b289      	uxth	r1, r1
 800cbee:	3001      	adds	r0, #1
 800cbf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbf4:	4285      	cmp	r5, r0
 800cbf6:	f84c 1b04 	str.w	r1, [ip], #4
 800cbfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbfe:	dcec      	bgt.n	800cbda <__multadd+0x12>
 800cc00:	b30e      	cbz	r6, 800cc46 <__multadd+0x7e>
 800cc02:	68a3      	ldr	r3, [r4, #8]
 800cc04:	42ab      	cmp	r3, r5
 800cc06:	dc19      	bgt.n	800cc3c <__multadd+0x74>
 800cc08:	6861      	ldr	r1, [r4, #4]
 800cc0a:	4638      	mov	r0, r7
 800cc0c:	3101      	adds	r1, #1
 800cc0e:	f7ff ff79 	bl	800cb04 <_Balloc>
 800cc12:	4680      	mov	r8, r0
 800cc14:	b928      	cbnz	r0, 800cc22 <__multadd+0x5a>
 800cc16:	4602      	mov	r2, r0
 800cc18:	4b0c      	ldr	r3, [pc, #48]	; (800cc4c <__multadd+0x84>)
 800cc1a:	480d      	ldr	r0, [pc, #52]	; (800cc50 <__multadd+0x88>)
 800cc1c:	21ba      	movs	r1, #186	; 0xba
 800cc1e:	f000 fd2b 	bl	800d678 <__assert_func>
 800cc22:	6922      	ldr	r2, [r4, #16]
 800cc24:	3202      	adds	r2, #2
 800cc26:	f104 010c 	add.w	r1, r4, #12
 800cc2a:	0092      	lsls	r2, r2, #2
 800cc2c:	300c      	adds	r0, #12
 800cc2e:	f000 fd15 	bl	800d65c <memcpy>
 800cc32:	4621      	mov	r1, r4
 800cc34:	4638      	mov	r0, r7
 800cc36:	f7ff ffa5 	bl	800cb84 <_Bfree>
 800cc3a:	4644      	mov	r4, r8
 800cc3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc40:	3501      	adds	r5, #1
 800cc42:	615e      	str	r6, [r3, #20]
 800cc44:	6125      	str	r5, [r4, #16]
 800cc46:	4620      	mov	r0, r4
 800cc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4c:	080109c0 	.word	0x080109c0
 800cc50:	080109d1 	.word	0x080109d1

0800cc54 <__hi0bits>:
 800cc54:	0c03      	lsrs	r3, r0, #16
 800cc56:	041b      	lsls	r3, r3, #16
 800cc58:	b9d3      	cbnz	r3, 800cc90 <__hi0bits+0x3c>
 800cc5a:	0400      	lsls	r0, r0, #16
 800cc5c:	2310      	movs	r3, #16
 800cc5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc62:	bf04      	itt	eq
 800cc64:	0200      	lsleq	r0, r0, #8
 800cc66:	3308      	addeq	r3, #8
 800cc68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc6c:	bf04      	itt	eq
 800cc6e:	0100      	lsleq	r0, r0, #4
 800cc70:	3304      	addeq	r3, #4
 800cc72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc76:	bf04      	itt	eq
 800cc78:	0080      	lsleq	r0, r0, #2
 800cc7a:	3302      	addeq	r3, #2
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	db05      	blt.n	800cc8c <__hi0bits+0x38>
 800cc80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc84:	f103 0301 	add.w	r3, r3, #1
 800cc88:	bf08      	it	eq
 800cc8a:	2320      	moveq	r3, #32
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	4770      	bx	lr
 800cc90:	2300      	movs	r3, #0
 800cc92:	e7e4      	b.n	800cc5e <__hi0bits+0xa>

0800cc94 <__lo0bits>:
 800cc94:	6803      	ldr	r3, [r0, #0]
 800cc96:	f013 0207 	ands.w	r2, r3, #7
 800cc9a:	d00c      	beq.n	800ccb6 <__lo0bits+0x22>
 800cc9c:	07d9      	lsls	r1, r3, #31
 800cc9e:	d422      	bmi.n	800cce6 <__lo0bits+0x52>
 800cca0:	079a      	lsls	r2, r3, #30
 800cca2:	bf49      	itett	mi
 800cca4:	085b      	lsrmi	r3, r3, #1
 800cca6:	089b      	lsrpl	r3, r3, #2
 800cca8:	6003      	strmi	r3, [r0, #0]
 800ccaa:	2201      	movmi	r2, #1
 800ccac:	bf5c      	itt	pl
 800ccae:	6003      	strpl	r3, [r0, #0]
 800ccb0:	2202      	movpl	r2, #2
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	4770      	bx	lr
 800ccb6:	b299      	uxth	r1, r3
 800ccb8:	b909      	cbnz	r1, 800ccbe <__lo0bits+0x2a>
 800ccba:	0c1b      	lsrs	r3, r3, #16
 800ccbc:	2210      	movs	r2, #16
 800ccbe:	b2d9      	uxtb	r1, r3
 800ccc0:	b909      	cbnz	r1, 800ccc6 <__lo0bits+0x32>
 800ccc2:	3208      	adds	r2, #8
 800ccc4:	0a1b      	lsrs	r3, r3, #8
 800ccc6:	0719      	lsls	r1, r3, #28
 800ccc8:	bf04      	itt	eq
 800ccca:	091b      	lsreq	r3, r3, #4
 800cccc:	3204      	addeq	r2, #4
 800ccce:	0799      	lsls	r1, r3, #30
 800ccd0:	bf04      	itt	eq
 800ccd2:	089b      	lsreq	r3, r3, #2
 800ccd4:	3202      	addeq	r2, #2
 800ccd6:	07d9      	lsls	r1, r3, #31
 800ccd8:	d403      	bmi.n	800cce2 <__lo0bits+0x4e>
 800ccda:	085b      	lsrs	r3, r3, #1
 800ccdc:	f102 0201 	add.w	r2, r2, #1
 800cce0:	d003      	beq.n	800ccea <__lo0bits+0x56>
 800cce2:	6003      	str	r3, [r0, #0]
 800cce4:	e7e5      	b.n	800ccb2 <__lo0bits+0x1e>
 800cce6:	2200      	movs	r2, #0
 800cce8:	e7e3      	b.n	800ccb2 <__lo0bits+0x1e>
 800ccea:	2220      	movs	r2, #32
 800ccec:	e7e1      	b.n	800ccb2 <__lo0bits+0x1e>
	...

0800ccf0 <__i2b>:
 800ccf0:	b510      	push	{r4, lr}
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	f7ff ff05 	bl	800cb04 <_Balloc>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	b928      	cbnz	r0, 800cd0a <__i2b+0x1a>
 800ccfe:	4b05      	ldr	r3, [pc, #20]	; (800cd14 <__i2b+0x24>)
 800cd00:	4805      	ldr	r0, [pc, #20]	; (800cd18 <__i2b+0x28>)
 800cd02:	f240 1145 	movw	r1, #325	; 0x145
 800cd06:	f000 fcb7 	bl	800d678 <__assert_func>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	6144      	str	r4, [r0, #20]
 800cd0e:	6103      	str	r3, [r0, #16]
 800cd10:	bd10      	pop	{r4, pc}
 800cd12:	bf00      	nop
 800cd14:	080109c0 	.word	0x080109c0
 800cd18:	080109d1 	.word	0x080109d1

0800cd1c <__multiply>:
 800cd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd20:	4691      	mov	r9, r2
 800cd22:	690a      	ldr	r2, [r1, #16]
 800cd24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	bfb8      	it	lt
 800cd2c:	460b      	movlt	r3, r1
 800cd2e:	460c      	mov	r4, r1
 800cd30:	bfbc      	itt	lt
 800cd32:	464c      	movlt	r4, r9
 800cd34:	4699      	movlt	r9, r3
 800cd36:	6927      	ldr	r7, [r4, #16]
 800cd38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd3c:	68a3      	ldr	r3, [r4, #8]
 800cd3e:	6861      	ldr	r1, [r4, #4]
 800cd40:	eb07 060a 	add.w	r6, r7, sl
 800cd44:	42b3      	cmp	r3, r6
 800cd46:	b085      	sub	sp, #20
 800cd48:	bfb8      	it	lt
 800cd4a:	3101      	addlt	r1, #1
 800cd4c:	f7ff feda 	bl	800cb04 <_Balloc>
 800cd50:	b930      	cbnz	r0, 800cd60 <__multiply+0x44>
 800cd52:	4602      	mov	r2, r0
 800cd54:	4b44      	ldr	r3, [pc, #272]	; (800ce68 <__multiply+0x14c>)
 800cd56:	4845      	ldr	r0, [pc, #276]	; (800ce6c <__multiply+0x150>)
 800cd58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cd5c:	f000 fc8c 	bl	800d678 <__assert_func>
 800cd60:	f100 0514 	add.w	r5, r0, #20
 800cd64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd68:	462b      	mov	r3, r5
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4543      	cmp	r3, r8
 800cd6e:	d321      	bcc.n	800cdb4 <__multiply+0x98>
 800cd70:	f104 0314 	add.w	r3, r4, #20
 800cd74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd78:	f109 0314 	add.w	r3, r9, #20
 800cd7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd80:	9202      	str	r2, [sp, #8]
 800cd82:	1b3a      	subs	r2, r7, r4
 800cd84:	3a15      	subs	r2, #21
 800cd86:	f022 0203 	bic.w	r2, r2, #3
 800cd8a:	3204      	adds	r2, #4
 800cd8c:	f104 0115 	add.w	r1, r4, #21
 800cd90:	428f      	cmp	r7, r1
 800cd92:	bf38      	it	cc
 800cd94:	2204      	movcc	r2, #4
 800cd96:	9201      	str	r2, [sp, #4]
 800cd98:	9a02      	ldr	r2, [sp, #8]
 800cd9a:	9303      	str	r3, [sp, #12]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d80c      	bhi.n	800cdba <__multiply+0x9e>
 800cda0:	2e00      	cmp	r6, #0
 800cda2:	dd03      	ble.n	800cdac <__multiply+0x90>
 800cda4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d05b      	beq.n	800ce64 <__multiply+0x148>
 800cdac:	6106      	str	r6, [r0, #16]
 800cdae:	b005      	add	sp, #20
 800cdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb4:	f843 2b04 	str.w	r2, [r3], #4
 800cdb8:	e7d8      	b.n	800cd6c <__multiply+0x50>
 800cdba:	f8b3 a000 	ldrh.w	sl, [r3]
 800cdbe:	f1ba 0f00 	cmp.w	sl, #0
 800cdc2:	d024      	beq.n	800ce0e <__multiply+0xf2>
 800cdc4:	f104 0e14 	add.w	lr, r4, #20
 800cdc8:	46a9      	mov	r9, r5
 800cdca:	f04f 0c00 	mov.w	ip, #0
 800cdce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cdd2:	f8d9 1000 	ldr.w	r1, [r9]
 800cdd6:	fa1f fb82 	uxth.w	fp, r2
 800cdda:	b289      	uxth	r1, r1
 800cddc:	fb0a 110b 	mla	r1, sl, fp, r1
 800cde0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cde4:	f8d9 2000 	ldr.w	r2, [r9]
 800cde8:	4461      	add	r1, ip
 800cdea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdee:	fb0a c20b 	mla	r2, sl, fp, ip
 800cdf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdf6:	b289      	uxth	r1, r1
 800cdf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cdfc:	4577      	cmp	r7, lr
 800cdfe:	f849 1b04 	str.w	r1, [r9], #4
 800ce02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce06:	d8e2      	bhi.n	800cdce <__multiply+0xb2>
 800ce08:	9a01      	ldr	r2, [sp, #4]
 800ce0a:	f845 c002 	str.w	ip, [r5, r2]
 800ce0e:	9a03      	ldr	r2, [sp, #12]
 800ce10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce14:	3304      	adds	r3, #4
 800ce16:	f1b9 0f00 	cmp.w	r9, #0
 800ce1a:	d021      	beq.n	800ce60 <__multiply+0x144>
 800ce1c:	6829      	ldr	r1, [r5, #0]
 800ce1e:	f104 0c14 	add.w	ip, r4, #20
 800ce22:	46ae      	mov	lr, r5
 800ce24:	f04f 0a00 	mov.w	sl, #0
 800ce28:	f8bc b000 	ldrh.w	fp, [ip]
 800ce2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce30:	fb09 220b 	mla	r2, r9, fp, r2
 800ce34:	4452      	add	r2, sl
 800ce36:	b289      	uxth	r1, r1
 800ce38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce3c:	f84e 1b04 	str.w	r1, [lr], #4
 800ce40:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ce44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce48:	f8be 1000 	ldrh.w	r1, [lr]
 800ce4c:	fb09 110a 	mla	r1, r9, sl, r1
 800ce50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ce54:	4567      	cmp	r7, ip
 800ce56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce5a:	d8e5      	bhi.n	800ce28 <__multiply+0x10c>
 800ce5c:	9a01      	ldr	r2, [sp, #4]
 800ce5e:	50a9      	str	r1, [r5, r2]
 800ce60:	3504      	adds	r5, #4
 800ce62:	e799      	b.n	800cd98 <__multiply+0x7c>
 800ce64:	3e01      	subs	r6, #1
 800ce66:	e79b      	b.n	800cda0 <__multiply+0x84>
 800ce68:	080109c0 	.word	0x080109c0
 800ce6c:	080109d1 	.word	0x080109d1

0800ce70 <__pow5mult>:
 800ce70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce74:	4615      	mov	r5, r2
 800ce76:	f012 0203 	ands.w	r2, r2, #3
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	460f      	mov	r7, r1
 800ce7e:	d007      	beq.n	800ce90 <__pow5mult+0x20>
 800ce80:	4c25      	ldr	r4, [pc, #148]	; (800cf18 <__pow5mult+0xa8>)
 800ce82:	3a01      	subs	r2, #1
 800ce84:	2300      	movs	r3, #0
 800ce86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce8a:	f7ff fe9d 	bl	800cbc8 <__multadd>
 800ce8e:	4607      	mov	r7, r0
 800ce90:	10ad      	asrs	r5, r5, #2
 800ce92:	d03d      	beq.n	800cf10 <__pow5mult+0xa0>
 800ce94:	69f4      	ldr	r4, [r6, #28]
 800ce96:	b97c      	cbnz	r4, 800ceb8 <__pow5mult+0x48>
 800ce98:	2010      	movs	r0, #16
 800ce9a:	f7ff fd7f 	bl	800c99c <malloc>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	61f0      	str	r0, [r6, #28]
 800cea2:	b928      	cbnz	r0, 800ceb0 <__pow5mult+0x40>
 800cea4:	4b1d      	ldr	r3, [pc, #116]	; (800cf1c <__pow5mult+0xac>)
 800cea6:	481e      	ldr	r0, [pc, #120]	; (800cf20 <__pow5mult+0xb0>)
 800cea8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ceac:	f000 fbe4 	bl	800d678 <__assert_func>
 800ceb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ceb4:	6004      	str	r4, [r0, #0]
 800ceb6:	60c4      	str	r4, [r0, #12]
 800ceb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cec0:	b94c      	cbnz	r4, 800ced6 <__pow5mult+0x66>
 800cec2:	f240 2171 	movw	r1, #625	; 0x271
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff ff12 	bl	800ccf0 <__i2b>
 800cecc:	2300      	movs	r3, #0
 800cece:	f8c8 0008 	str.w	r0, [r8, #8]
 800ced2:	4604      	mov	r4, r0
 800ced4:	6003      	str	r3, [r0, #0]
 800ced6:	f04f 0900 	mov.w	r9, #0
 800ceda:	07eb      	lsls	r3, r5, #31
 800cedc:	d50a      	bpl.n	800cef4 <__pow5mult+0x84>
 800cede:	4639      	mov	r1, r7
 800cee0:	4622      	mov	r2, r4
 800cee2:	4630      	mov	r0, r6
 800cee4:	f7ff ff1a 	bl	800cd1c <__multiply>
 800cee8:	4639      	mov	r1, r7
 800ceea:	4680      	mov	r8, r0
 800ceec:	4630      	mov	r0, r6
 800ceee:	f7ff fe49 	bl	800cb84 <_Bfree>
 800cef2:	4647      	mov	r7, r8
 800cef4:	106d      	asrs	r5, r5, #1
 800cef6:	d00b      	beq.n	800cf10 <__pow5mult+0xa0>
 800cef8:	6820      	ldr	r0, [r4, #0]
 800cefa:	b938      	cbnz	r0, 800cf0c <__pow5mult+0x9c>
 800cefc:	4622      	mov	r2, r4
 800cefe:	4621      	mov	r1, r4
 800cf00:	4630      	mov	r0, r6
 800cf02:	f7ff ff0b 	bl	800cd1c <__multiply>
 800cf06:	6020      	str	r0, [r4, #0]
 800cf08:	f8c0 9000 	str.w	r9, [r0]
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	e7e4      	b.n	800ceda <__pow5mult+0x6a>
 800cf10:	4638      	mov	r0, r7
 800cf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf16:	bf00      	nop
 800cf18:	08010b20 	.word	0x08010b20
 800cf1c:	08010951 	.word	0x08010951
 800cf20:	080109d1 	.word	0x080109d1

0800cf24 <__lshift>:
 800cf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf28:	460c      	mov	r4, r1
 800cf2a:	6849      	ldr	r1, [r1, #4]
 800cf2c:	6923      	ldr	r3, [r4, #16]
 800cf2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf32:	68a3      	ldr	r3, [r4, #8]
 800cf34:	4607      	mov	r7, r0
 800cf36:	4691      	mov	r9, r2
 800cf38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf3c:	f108 0601 	add.w	r6, r8, #1
 800cf40:	42b3      	cmp	r3, r6
 800cf42:	db0b      	blt.n	800cf5c <__lshift+0x38>
 800cf44:	4638      	mov	r0, r7
 800cf46:	f7ff fddd 	bl	800cb04 <_Balloc>
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	b948      	cbnz	r0, 800cf62 <__lshift+0x3e>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	4b28      	ldr	r3, [pc, #160]	; (800cff4 <__lshift+0xd0>)
 800cf52:	4829      	ldr	r0, [pc, #164]	; (800cff8 <__lshift+0xd4>)
 800cf54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cf58:	f000 fb8e 	bl	800d678 <__assert_func>
 800cf5c:	3101      	adds	r1, #1
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	e7ee      	b.n	800cf40 <__lshift+0x1c>
 800cf62:	2300      	movs	r3, #0
 800cf64:	f100 0114 	add.w	r1, r0, #20
 800cf68:	f100 0210 	add.w	r2, r0, #16
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	4553      	cmp	r3, sl
 800cf70:	db33      	blt.n	800cfda <__lshift+0xb6>
 800cf72:	6920      	ldr	r0, [r4, #16]
 800cf74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf78:	f104 0314 	add.w	r3, r4, #20
 800cf7c:	f019 091f 	ands.w	r9, r9, #31
 800cf80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf88:	d02b      	beq.n	800cfe2 <__lshift+0xbe>
 800cf8a:	f1c9 0e20 	rsb	lr, r9, #32
 800cf8e:	468a      	mov	sl, r1
 800cf90:	2200      	movs	r2, #0
 800cf92:	6818      	ldr	r0, [r3, #0]
 800cf94:	fa00 f009 	lsl.w	r0, r0, r9
 800cf98:	4310      	orrs	r0, r2
 800cf9a:	f84a 0b04 	str.w	r0, [sl], #4
 800cf9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfa2:	459c      	cmp	ip, r3
 800cfa4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfa8:	d8f3      	bhi.n	800cf92 <__lshift+0x6e>
 800cfaa:	ebac 0304 	sub.w	r3, ip, r4
 800cfae:	3b15      	subs	r3, #21
 800cfb0:	f023 0303 	bic.w	r3, r3, #3
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	f104 0015 	add.w	r0, r4, #21
 800cfba:	4584      	cmp	ip, r0
 800cfbc:	bf38      	it	cc
 800cfbe:	2304      	movcc	r3, #4
 800cfc0:	50ca      	str	r2, [r1, r3]
 800cfc2:	b10a      	cbz	r2, 800cfc8 <__lshift+0xa4>
 800cfc4:	f108 0602 	add.w	r6, r8, #2
 800cfc8:	3e01      	subs	r6, #1
 800cfca:	4638      	mov	r0, r7
 800cfcc:	612e      	str	r6, [r5, #16]
 800cfce:	4621      	mov	r1, r4
 800cfd0:	f7ff fdd8 	bl	800cb84 <_Bfree>
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfda:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfde:	3301      	adds	r3, #1
 800cfe0:	e7c5      	b.n	800cf6e <__lshift+0x4a>
 800cfe2:	3904      	subs	r1, #4
 800cfe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfe8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfec:	459c      	cmp	ip, r3
 800cfee:	d8f9      	bhi.n	800cfe4 <__lshift+0xc0>
 800cff0:	e7ea      	b.n	800cfc8 <__lshift+0xa4>
 800cff2:	bf00      	nop
 800cff4:	080109c0 	.word	0x080109c0
 800cff8:	080109d1 	.word	0x080109d1

0800cffc <__mcmp>:
 800cffc:	b530      	push	{r4, r5, lr}
 800cffe:	6902      	ldr	r2, [r0, #16]
 800d000:	690c      	ldr	r4, [r1, #16]
 800d002:	1b12      	subs	r2, r2, r4
 800d004:	d10e      	bne.n	800d024 <__mcmp+0x28>
 800d006:	f100 0314 	add.w	r3, r0, #20
 800d00a:	3114      	adds	r1, #20
 800d00c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d010:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d014:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d018:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d01c:	42a5      	cmp	r5, r4
 800d01e:	d003      	beq.n	800d028 <__mcmp+0x2c>
 800d020:	d305      	bcc.n	800d02e <__mcmp+0x32>
 800d022:	2201      	movs	r2, #1
 800d024:	4610      	mov	r0, r2
 800d026:	bd30      	pop	{r4, r5, pc}
 800d028:	4283      	cmp	r3, r0
 800d02a:	d3f3      	bcc.n	800d014 <__mcmp+0x18>
 800d02c:	e7fa      	b.n	800d024 <__mcmp+0x28>
 800d02e:	f04f 32ff 	mov.w	r2, #4294967295
 800d032:	e7f7      	b.n	800d024 <__mcmp+0x28>

0800d034 <__mdiff>:
 800d034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d038:	460c      	mov	r4, r1
 800d03a:	4606      	mov	r6, r0
 800d03c:	4611      	mov	r1, r2
 800d03e:	4620      	mov	r0, r4
 800d040:	4690      	mov	r8, r2
 800d042:	f7ff ffdb 	bl	800cffc <__mcmp>
 800d046:	1e05      	subs	r5, r0, #0
 800d048:	d110      	bne.n	800d06c <__mdiff+0x38>
 800d04a:	4629      	mov	r1, r5
 800d04c:	4630      	mov	r0, r6
 800d04e:	f7ff fd59 	bl	800cb04 <_Balloc>
 800d052:	b930      	cbnz	r0, 800d062 <__mdiff+0x2e>
 800d054:	4b3a      	ldr	r3, [pc, #232]	; (800d140 <__mdiff+0x10c>)
 800d056:	4602      	mov	r2, r0
 800d058:	f240 2137 	movw	r1, #567	; 0x237
 800d05c:	4839      	ldr	r0, [pc, #228]	; (800d144 <__mdiff+0x110>)
 800d05e:	f000 fb0b 	bl	800d678 <__assert_func>
 800d062:	2301      	movs	r3, #1
 800d064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06c:	bfa4      	itt	ge
 800d06e:	4643      	movge	r3, r8
 800d070:	46a0      	movge	r8, r4
 800d072:	4630      	mov	r0, r6
 800d074:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d078:	bfa6      	itte	ge
 800d07a:	461c      	movge	r4, r3
 800d07c:	2500      	movge	r5, #0
 800d07e:	2501      	movlt	r5, #1
 800d080:	f7ff fd40 	bl	800cb04 <_Balloc>
 800d084:	b920      	cbnz	r0, 800d090 <__mdiff+0x5c>
 800d086:	4b2e      	ldr	r3, [pc, #184]	; (800d140 <__mdiff+0x10c>)
 800d088:	4602      	mov	r2, r0
 800d08a:	f240 2145 	movw	r1, #581	; 0x245
 800d08e:	e7e5      	b.n	800d05c <__mdiff+0x28>
 800d090:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d094:	6926      	ldr	r6, [r4, #16]
 800d096:	60c5      	str	r5, [r0, #12]
 800d098:	f104 0914 	add.w	r9, r4, #20
 800d09c:	f108 0514 	add.w	r5, r8, #20
 800d0a0:	f100 0e14 	add.w	lr, r0, #20
 800d0a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d0a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0ac:	f108 0210 	add.w	r2, r8, #16
 800d0b0:	46f2      	mov	sl, lr
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d0bc:	fa11 f88b 	uxtah	r8, r1, fp
 800d0c0:	b299      	uxth	r1, r3
 800d0c2:	0c1b      	lsrs	r3, r3, #16
 800d0c4:	eba8 0801 	sub.w	r8, r8, r1
 800d0c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0d0:	fa1f f888 	uxth.w	r8, r8
 800d0d4:	1419      	asrs	r1, r3, #16
 800d0d6:	454e      	cmp	r6, r9
 800d0d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0dc:	f84a 3b04 	str.w	r3, [sl], #4
 800d0e0:	d8e8      	bhi.n	800d0b4 <__mdiff+0x80>
 800d0e2:	1b33      	subs	r3, r6, r4
 800d0e4:	3b15      	subs	r3, #21
 800d0e6:	f023 0303 	bic.w	r3, r3, #3
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	3415      	adds	r4, #21
 800d0ee:	42a6      	cmp	r6, r4
 800d0f0:	bf38      	it	cc
 800d0f2:	2304      	movcc	r3, #4
 800d0f4:	441d      	add	r5, r3
 800d0f6:	4473      	add	r3, lr
 800d0f8:	469e      	mov	lr, r3
 800d0fa:	462e      	mov	r6, r5
 800d0fc:	4566      	cmp	r6, ip
 800d0fe:	d30e      	bcc.n	800d11e <__mdiff+0xea>
 800d100:	f10c 0203 	add.w	r2, ip, #3
 800d104:	1b52      	subs	r2, r2, r5
 800d106:	f022 0203 	bic.w	r2, r2, #3
 800d10a:	3d03      	subs	r5, #3
 800d10c:	45ac      	cmp	ip, r5
 800d10e:	bf38      	it	cc
 800d110:	2200      	movcc	r2, #0
 800d112:	4413      	add	r3, r2
 800d114:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d118:	b17a      	cbz	r2, 800d13a <__mdiff+0x106>
 800d11a:	6107      	str	r7, [r0, #16]
 800d11c:	e7a4      	b.n	800d068 <__mdiff+0x34>
 800d11e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d122:	fa11 f288 	uxtah	r2, r1, r8
 800d126:	1414      	asrs	r4, r2, #16
 800d128:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d12c:	b292      	uxth	r2, r2
 800d12e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d132:	f84e 2b04 	str.w	r2, [lr], #4
 800d136:	1421      	asrs	r1, r4, #16
 800d138:	e7e0      	b.n	800d0fc <__mdiff+0xc8>
 800d13a:	3f01      	subs	r7, #1
 800d13c:	e7ea      	b.n	800d114 <__mdiff+0xe0>
 800d13e:	bf00      	nop
 800d140:	080109c0 	.word	0x080109c0
 800d144:	080109d1 	.word	0x080109d1

0800d148 <__d2b>:
 800d148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d14c:	460f      	mov	r7, r1
 800d14e:	2101      	movs	r1, #1
 800d150:	ec59 8b10 	vmov	r8, r9, d0
 800d154:	4616      	mov	r6, r2
 800d156:	f7ff fcd5 	bl	800cb04 <_Balloc>
 800d15a:	4604      	mov	r4, r0
 800d15c:	b930      	cbnz	r0, 800d16c <__d2b+0x24>
 800d15e:	4602      	mov	r2, r0
 800d160:	4b24      	ldr	r3, [pc, #144]	; (800d1f4 <__d2b+0xac>)
 800d162:	4825      	ldr	r0, [pc, #148]	; (800d1f8 <__d2b+0xb0>)
 800d164:	f240 310f 	movw	r1, #783	; 0x30f
 800d168:	f000 fa86 	bl	800d678 <__assert_func>
 800d16c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d174:	bb2d      	cbnz	r5, 800d1c2 <__d2b+0x7a>
 800d176:	9301      	str	r3, [sp, #4]
 800d178:	f1b8 0300 	subs.w	r3, r8, #0
 800d17c:	d026      	beq.n	800d1cc <__d2b+0x84>
 800d17e:	4668      	mov	r0, sp
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	f7ff fd87 	bl	800cc94 <__lo0bits>
 800d186:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d18a:	b1e8      	cbz	r0, 800d1c8 <__d2b+0x80>
 800d18c:	f1c0 0320 	rsb	r3, r0, #32
 800d190:	fa02 f303 	lsl.w	r3, r2, r3
 800d194:	430b      	orrs	r3, r1
 800d196:	40c2      	lsrs	r2, r0
 800d198:	6163      	str	r3, [r4, #20]
 800d19a:	9201      	str	r2, [sp, #4]
 800d19c:	9b01      	ldr	r3, [sp, #4]
 800d19e:	61a3      	str	r3, [r4, #24]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	bf14      	ite	ne
 800d1a4:	2202      	movne	r2, #2
 800d1a6:	2201      	moveq	r2, #1
 800d1a8:	6122      	str	r2, [r4, #16]
 800d1aa:	b1bd      	cbz	r5, 800d1dc <__d2b+0x94>
 800d1ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d1b0:	4405      	add	r5, r0
 800d1b2:	603d      	str	r5, [r7, #0]
 800d1b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d1b8:	6030      	str	r0, [r6, #0]
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	b003      	add	sp, #12
 800d1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1c6:	e7d6      	b.n	800d176 <__d2b+0x2e>
 800d1c8:	6161      	str	r1, [r4, #20]
 800d1ca:	e7e7      	b.n	800d19c <__d2b+0x54>
 800d1cc:	a801      	add	r0, sp, #4
 800d1ce:	f7ff fd61 	bl	800cc94 <__lo0bits>
 800d1d2:	9b01      	ldr	r3, [sp, #4]
 800d1d4:	6163      	str	r3, [r4, #20]
 800d1d6:	3020      	adds	r0, #32
 800d1d8:	2201      	movs	r2, #1
 800d1da:	e7e5      	b.n	800d1a8 <__d2b+0x60>
 800d1dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d1e4:	6038      	str	r0, [r7, #0]
 800d1e6:	6918      	ldr	r0, [r3, #16]
 800d1e8:	f7ff fd34 	bl	800cc54 <__hi0bits>
 800d1ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1f0:	e7e2      	b.n	800d1b8 <__d2b+0x70>
 800d1f2:	bf00      	nop
 800d1f4:	080109c0 	.word	0x080109c0
 800d1f8:	080109d1 	.word	0x080109d1

0800d1fc <__ssputs_r>:
 800d1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d200:	688e      	ldr	r6, [r1, #8]
 800d202:	461f      	mov	r7, r3
 800d204:	42be      	cmp	r6, r7
 800d206:	680b      	ldr	r3, [r1, #0]
 800d208:	4682      	mov	sl, r0
 800d20a:	460c      	mov	r4, r1
 800d20c:	4690      	mov	r8, r2
 800d20e:	d82c      	bhi.n	800d26a <__ssputs_r+0x6e>
 800d210:	898a      	ldrh	r2, [r1, #12]
 800d212:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d216:	d026      	beq.n	800d266 <__ssputs_r+0x6a>
 800d218:	6965      	ldr	r5, [r4, #20]
 800d21a:	6909      	ldr	r1, [r1, #16]
 800d21c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d220:	eba3 0901 	sub.w	r9, r3, r1
 800d224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d228:	1c7b      	adds	r3, r7, #1
 800d22a:	444b      	add	r3, r9
 800d22c:	106d      	asrs	r5, r5, #1
 800d22e:	429d      	cmp	r5, r3
 800d230:	bf38      	it	cc
 800d232:	461d      	movcc	r5, r3
 800d234:	0553      	lsls	r3, r2, #21
 800d236:	d527      	bpl.n	800d288 <__ssputs_r+0x8c>
 800d238:	4629      	mov	r1, r5
 800d23a:	f7ff fbd7 	bl	800c9ec <_malloc_r>
 800d23e:	4606      	mov	r6, r0
 800d240:	b360      	cbz	r0, 800d29c <__ssputs_r+0xa0>
 800d242:	6921      	ldr	r1, [r4, #16]
 800d244:	464a      	mov	r2, r9
 800d246:	f000 fa09 	bl	800d65c <memcpy>
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d254:	81a3      	strh	r3, [r4, #12]
 800d256:	6126      	str	r6, [r4, #16]
 800d258:	6165      	str	r5, [r4, #20]
 800d25a:	444e      	add	r6, r9
 800d25c:	eba5 0509 	sub.w	r5, r5, r9
 800d260:	6026      	str	r6, [r4, #0]
 800d262:	60a5      	str	r5, [r4, #8]
 800d264:	463e      	mov	r6, r7
 800d266:	42be      	cmp	r6, r7
 800d268:	d900      	bls.n	800d26c <__ssputs_r+0x70>
 800d26a:	463e      	mov	r6, r7
 800d26c:	6820      	ldr	r0, [r4, #0]
 800d26e:	4632      	mov	r2, r6
 800d270:	4641      	mov	r1, r8
 800d272:	f000 f9c9 	bl	800d608 <memmove>
 800d276:	68a3      	ldr	r3, [r4, #8]
 800d278:	1b9b      	subs	r3, r3, r6
 800d27a:	60a3      	str	r3, [r4, #8]
 800d27c:	6823      	ldr	r3, [r4, #0]
 800d27e:	4433      	add	r3, r6
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	2000      	movs	r0, #0
 800d284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d288:	462a      	mov	r2, r5
 800d28a:	f000 fa3b 	bl	800d704 <_realloc_r>
 800d28e:	4606      	mov	r6, r0
 800d290:	2800      	cmp	r0, #0
 800d292:	d1e0      	bne.n	800d256 <__ssputs_r+0x5a>
 800d294:	6921      	ldr	r1, [r4, #16]
 800d296:	4650      	mov	r0, sl
 800d298:	f7ff fb34 	bl	800c904 <_free_r>
 800d29c:	230c      	movs	r3, #12
 800d29e:	f8ca 3000 	str.w	r3, [sl]
 800d2a2:	89a3      	ldrh	r3, [r4, #12]
 800d2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2a8:	81a3      	strh	r3, [r4, #12]
 800d2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ae:	e7e9      	b.n	800d284 <__ssputs_r+0x88>

0800d2b0 <_svfiprintf_r>:
 800d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b4:	4698      	mov	r8, r3
 800d2b6:	898b      	ldrh	r3, [r1, #12]
 800d2b8:	061b      	lsls	r3, r3, #24
 800d2ba:	b09d      	sub	sp, #116	; 0x74
 800d2bc:	4607      	mov	r7, r0
 800d2be:	460d      	mov	r5, r1
 800d2c0:	4614      	mov	r4, r2
 800d2c2:	d50e      	bpl.n	800d2e2 <_svfiprintf_r+0x32>
 800d2c4:	690b      	ldr	r3, [r1, #16]
 800d2c6:	b963      	cbnz	r3, 800d2e2 <_svfiprintf_r+0x32>
 800d2c8:	2140      	movs	r1, #64	; 0x40
 800d2ca:	f7ff fb8f 	bl	800c9ec <_malloc_r>
 800d2ce:	6028      	str	r0, [r5, #0]
 800d2d0:	6128      	str	r0, [r5, #16]
 800d2d2:	b920      	cbnz	r0, 800d2de <_svfiprintf_r+0x2e>
 800d2d4:	230c      	movs	r3, #12
 800d2d6:	603b      	str	r3, [r7, #0]
 800d2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2dc:	e0d0      	b.n	800d480 <_svfiprintf_r+0x1d0>
 800d2de:	2340      	movs	r3, #64	; 0x40
 800d2e0:	616b      	str	r3, [r5, #20]
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e6:	2320      	movs	r3, #32
 800d2e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2f0:	2330      	movs	r3, #48	; 0x30
 800d2f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d498 <_svfiprintf_r+0x1e8>
 800d2f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2fa:	f04f 0901 	mov.w	r9, #1
 800d2fe:	4623      	mov	r3, r4
 800d300:	469a      	mov	sl, r3
 800d302:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d306:	b10a      	cbz	r2, 800d30c <_svfiprintf_r+0x5c>
 800d308:	2a25      	cmp	r2, #37	; 0x25
 800d30a:	d1f9      	bne.n	800d300 <_svfiprintf_r+0x50>
 800d30c:	ebba 0b04 	subs.w	fp, sl, r4
 800d310:	d00b      	beq.n	800d32a <_svfiprintf_r+0x7a>
 800d312:	465b      	mov	r3, fp
 800d314:	4622      	mov	r2, r4
 800d316:	4629      	mov	r1, r5
 800d318:	4638      	mov	r0, r7
 800d31a:	f7ff ff6f 	bl	800d1fc <__ssputs_r>
 800d31e:	3001      	adds	r0, #1
 800d320:	f000 80a9 	beq.w	800d476 <_svfiprintf_r+0x1c6>
 800d324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d326:	445a      	add	r2, fp
 800d328:	9209      	str	r2, [sp, #36]	; 0x24
 800d32a:	f89a 3000 	ldrb.w	r3, [sl]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 80a1 	beq.w	800d476 <_svfiprintf_r+0x1c6>
 800d334:	2300      	movs	r3, #0
 800d336:	f04f 32ff 	mov.w	r2, #4294967295
 800d33a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d33e:	f10a 0a01 	add.w	sl, sl, #1
 800d342:	9304      	str	r3, [sp, #16]
 800d344:	9307      	str	r3, [sp, #28]
 800d346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d34a:	931a      	str	r3, [sp, #104]	; 0x68
 800d34c:	4654      	mov	r4, sl
 800d34e:	2205      	movs	r2, #5
 800d350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d354:	4850      	ldr	r0, [pc, #320]	; (800d498 <_svfiprintf_r+0x1e8>)
 800d356:	f7f2 ff5b 	bl	8000210 <memchr>
 800d35a:	9a04      	ldr	r2, [sp, #16]
 800d35c:	b9d8      	cbnz	r0, 800d396 <_svfiprintf_r+0xe6>
 800d35e:	06d0      	lsls	r0, r2, #27
 800d360:	bf44      	itt	mi
 800d362:	2320      	movmi	r3, #32
 800d364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d368:	0711      	lsls	r1, r2, #28
 800d36a:	bf44      	itt	mi
 800d36c:	232b      	movmi	r3, #43	; 0x2b
 800d36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d372:	f89a 3000 	ldrb.w	r3, [sl]
 800d376:	2b2a      	cmp	r3, #42	; 0x2a
 800d378:	d015      	beq.n	800d3a6 <_svfiprintf_r+0xf6>
 800d37a:	9a07      	ldr	r2, [sp, #28]
 800d37c:	4654      	mov	r4, sl
 800d37e:	2000      	movs	r0, #0
 800d380:	f04f 0c0a 	mov.w	ip, #10
 800d384:	4621      	mov	r1, r4
 800d386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d38a:	3b30      	subs	r3, #48	; 0x30
 800d38c:	2b09      	cmp	r3, #9
 800d38e:	d94d      	bls.n	800d42c <_svfiprintf_r+0x17c>
 800d390:	b1b0      	cbz	r0, 800d3c0 <_svfiprintf_r+0x110>
 800d392:	9207      	str	r2, [sp, #28]
 800d394:	e014      	b.n	800d3c0 <_svfiprintf_r+0x110>
 800d396:	eba0 0308 	sub.w	r3, r0, r8
 800d39a:	fa09 f303 	lsl.w	r3, r9, r3
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	9304      	str	r3, [sp, #16]
 800d3a2:	46a2      	mov	sl, r4
 800d3a4:	e7d2      	b.n	800d34c <_svfiprintf_r+0x9c>
 800d3a6:	9b03      	ldr	r3, [sp, #12]
 800d3a8:	1d19      	adds	r1, r3, #4
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	9103      	str	r1, [sp, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	bfbb      	ittet	lt
 800d3b2:	425b      	neglt	r3, r3
 800d3b4:	f042 0202 	orrlt.w	r2, r2, #2
 800d3b8:	9307      	strge	r3, [sp, #28]
 800d3ba:	9307      	strlt	r3, [sp, #28]
 800d3bc:	bfb8      	it	lt
 800d3be:	9204      	strlt	r2, [sp, #16]
 800d3c0:	7823      	ldrb	r3, [r4, #0]
 800d3c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d3c4:	d10c      	bne.n	800d3e0 <_svfiprintf_r+0x130>
 800d3c6:	7863      	ldrb	r3, [r4, #1]
 800d3c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ca:	d134      	bne.n	800d436 <_svfiprintf_r+0x186>
 800d3cc:	9b03      	ldr	r3, [sp, #12]
 800d3ce:	1d1a      	adds	r2, r3, #4
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	9203      	str	r2, [sp, #12]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	bfb8      	it	lt
 800d3d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3dc:	3402      	adds	r4, #2
 800d3de:	9305      	str	r3, [sp, #20]
 800d3e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d4a8 <_svfiprintf_r+0x1f8>
 800d3e4:	7821      	ldrb	r1, [r4, #0]
 800d3e6:	2203      	movs	r2, #3
 800d3e8:	4650      	mov	r0, sl
 800d3ea:	f7f2 ff11 	bl	8000210 <memchr>
 800d3ee:	b138      	cbz	r0, 800d400 <_svfiprintf_r+0x150>
 800d3f0:	9b04      	ldr	r3, [sp, #16]
 800d3f2:	eba0 000a 	sub.w	r0, r0, sl
 800d3f6:	2240      	movs	r2, #64	; 0x40
 800d3f8:	4082      	lsls	r2, r0
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	3401      	adds	r4, #1
 800d3fe:	9304      	str	r3, [sp, #16]
 800d400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d404:	4825      	ldr	r0, [pc, #148]	; (800d49c <_svfiprintf_r+0x1ec>)
 800d406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d40a:	2206      	movs	r2, #6
 800d40c:	f7f2 ff00 	bl	8000210 <memchr>
 800d410:	2800      	cmp	r0, #0
 800d412:	d038      	beq.n	800d486 <_svfiprintf_r+0x1d6>
 800d414:	4b22      	ldr	r3, [pc, #136]	; (800d4a0 <_svfiprintf_r+0x1f0>)
 800d416:	bb1b      	cbnz	r3, 800d460 <_svfiprintf_r+0x1b0>
 800d418:	9b03      	ldr	r3, [sp, #12]
 800d41a:	3307      	adds	r3, #7
 800d41c:	f023 0307 	bic.w	r3, r3, #7
 800d420:	3308      	adds	r3, #8
 800d422:	9303      	str	r3, [sp, #12]
 800d424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d426:	4433      	add	r3, r6
 800d428:	9309      	str	r3, [sp, #36]	; 0x24
 800d42a:	e768      	b.n	800d2fe <_svfiprintf_r+0x4e>
 800d42c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d430:	460c      	mov	r4, r1
 800d432:	2001      	movs	r0, #1
 800d434:	e7a6      	b.n	800d384 <_svfiprintf_r+0xd4>
 800d436:	2300      	movs	r3, #0
 800d438:	3401      	adds	r4, #1
 800d43a:	9305      	str	r3, [sp, #20]
 800d43c:	4619      	mov	r1, r3
 800d43e:	f04f 0c0a 	mov.w	ip, #10
 800d442:	4620      	mov	r0, r4
 800d444:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d448:	3a30      	subs	r2, #48	; 0x30
 800d44a:	2a09      	cmp	r2, #9
 800d44c:	d903      	bls.n	800d456 <_svfiprintf_r+0x1a6>
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d0c6      	beq.n	800d3e0 <_svfiprintf_r+0x130>
 800d452:	9105      	str	r1, [sp, #20]
 800d454:	e7c4      	b.n	800d3e0 <_svfiprintf_r+0x130>
 800d456:	fb0c 2101 	mla	r1, ip, r1, r2
 800d45a:	4604      	mov	r4, r0
 800d45c:	2301      	movs	r3, #1
 800d45e:	e7f0      	b.n	800d442 <_svfiprintf_r+0x192>
 800d460:	ab03      	add	r3, sp, #12
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	462a      	mov	r2, r5
 800d466:	4b0f      	ldr	r3, [pc, #60]	; (800d4a4 <_svfiprintf_r+0x1f4>)
 800d468:	a904      	add	r1, sp, #16
 800d46a:	4638      	mov	r0, r7
 800d46c:	f7fd fe62 	bl	800b134 <_printf_float>
 800d470:	1c42      	adds	r2, r0, #1
 800d472:	4606      	mov	r6, r0
 800d474:	d1d6      	bne.n	800d424 <_svfiprintf_r+0x174>
 800d476:	89ab      	ldrh	r3, [r5, #12]
 800d478:	065b      	lsls	r3, r3, #25
 800d47a:	f53f af2d 	bmi.w	800d2d8 <_svfiprintf_r+0x28>
 800d47e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d480:	b01d      	add	sp, #116	; 0x74
 800d482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d486:	ab03      	add	r3, sp, #12
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	462a      	mov	r2, r5
 800d48c:	4b05      	ldr	r3, [pc, #20]	; (800d4a4 <_svfiprintf_r+0x1f4>)
 800d48e:	a904      	add	r1, sp, #16
 800d490:	4638      	mov	r0, r7
 800d492:	f7fe f8f3 	bl	800b67c <_printf_i>
 800d496:	e7eb      	b.n	800d470 <_svfiprintf_r+0x1c0>
 800d498:	08010b2c 	.word	0x08010b2c
 800d49c:	08010b36 	.word	0x08010b36
 800d4a0:	0800b135 	.word	0x0800b135
 800d4a4:	0800d1fd 	.word	0x0800d1fd
 800d4a8:	08010b32 	.word	0x08010b32

0800d4ac <__sflush_r>:
 800d4ac:	898a      	ldrh	r2, [r1, #12]
 800d4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b2:	4605      	mov	r5, r0
 800d4b4:	0710      	lsls	r0, r2, #28
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	d458      	bmi.n	800d56c <__sflush_r+0xc0>
 800d4ba:	684b      	ldr	r3, [r1, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	dc05      	bgt.n	800d4cc <__sflush_r+0x20>
 800d4c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	dc02      	bgt.n	800d4cc <__sflush_r+0x20>
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4ce:	2e00      	cmp	r6, #0
 800d4d0:	d0f9      	beq.n	800d4c6 <__sflush_r+0x1a>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4d8:	682f      	ldr	r7, [r5, #0]
 800d4da:	6a21      	ldr	r1, [r4, #32]
 800d4dc:	602b      	str	r3, [r5, #0]
 800d4de:	d032      	beq.n	800d546 <__sflush_r+0x9a>
 800d4e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4e2:	89a3      	ldrh	r3, [r4, #12]
 800d4e4:	075a      	lsls	r2, r3, #29
 800d4e6:	d505      	bpl.n	800d4f4 <__sflush_r+0x48>
 800d4e8:	6863      	ldr	r3, [r4, #4]
 800d4ea:	1ac0      	subs	r0, r0, r3
 800d4ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4ee:	b10b      	cbz	r3, 800d4f4 <__sflush_r+0x48>
 800d4f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4f2:	1ac0      	subs	r0, r0, r3
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4fa:	6a21      	ldr	r1, [r4, #32]
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	47b0      	blx	r6
 800d500:	1c43      	adds	r3, r0, #1
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	d106      	bne.n	800d514 <__sflush_r+0x68>
 800d506:	6829      	ldr	r1, [r5, #0]
 800d508:	291d      	cmp	r1, #29
 800d50a:	d82b      	bhi.n	800d564 <__sflush_r+0xb8>
 800d50c:	4a29      	ldr	r2, [pc, #164]	; (800d5b4 <__sflush_r+0x108>)
 800d50e:	410a      	asrs	r2, r1
 800d510:	07d6      	lsls	r6, r2, #31
 800d512:	d427      	bmi.n	800d564 <__sflush_r+0xb8>
 800d514:	2200      	movs	r2, #0
 800d516:	6062      	str	r2, [r4, #4]
 800d518:	04d9      	lsls	r1, r3, #19
 800d51a:	6922      	ldr	r2, [r4, #16]
 800d51c:	6022      	str	r2, [r4, #0]
 800d51e:	d504      	bpl.n	800d52a <__sflush_r+0x7e>
 800d520:	1c42      	adds	r2, r0, #1
 800d522:	d101      	bne.n	800d528 <__sflush_r+0x7c>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	b903      	cbnz	r3, 800d52a <__sflush_r+0x7e>
 800d528:	6560      	str	r0, [r4, #84]	; 0x54
 800d52a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d52c:	602f      	str	r7, [r5, #0]
 800d52e:	2900      	cmp	r1, #0
 800d530:	d0c9      	beq.n	800d4c6 <__sflush_r+0x1a>
 800d532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d536:	4299      	cmp	r1, r3
 800d538:	d002      	beq.n	800d540 <__sflush_r+0x94>
 800d53a:	4628      	mov	r0, r5
 800d53c:	f7ff f9e2 	bl	800c904 <_free_r>
 800d540:	2000      	movs	r0, #0
 800d542:	6360      	str	r0, [r4, #52]	; 0x34
 800d544:	e7c0      	b.n	800d4c8 <__sflush_r+0x1c>
 800d546:	2301      	movs	r3, #1
 800d548:	4628      	mov	r0, r5
 800d54a:	47b0      	blx	r6
 800d54c:	1c41      	adds	r1, r0, #1
 800d54e:	d1c8      	bne.n	800d4e2 <__sflush_r+0x36>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d0c5      	beq.n	800d4e2 <__sflush_r+0x36>
 800d556:	2b1d      	cmp	r3, #29
 800d558:	d001      	beq.n	800d55e <__sflush_r+0xb2>
 800d55a:	2b16      	cmp	r3, #22
 800d55c:	d101      	bne.n	800d562 <__sflush_r+0xb6>
 800d55e:	602f      	str	r7, [r5, #0]
 800d560:	e7b1      	b.n	800d4c6 <__sflush_r+0x1a>
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d568:	81a3      	strh	r3, [r4, #12]
 800d56a:	e7ad      	b.n	800d4c8 <__sflush_r+0x1c>
 800d56c:	690f      	ldr	r7, [r1, #16]
 800d56e:	2f00      	cmp	r7, #0
 800d570:	d0a9      	beq.n	800d4c6 <__sflush_r+0x1a>
 800d572:	0793      	lsls	r3, r2, #30
 800d574:	680e      	ldr	r6, [r1, #0]
 800d576:	bf08      	it	eq
 800d578:	694b      	ldreq	r3, [r1, #20]
 800d57a:	600f      	str	r7, [r1, #0]
 800d57c:	bf18      	it	ne
 800d57e:	2300      	movne	r3, #0
 800d580:	eba6 0807 	sub.w	r8, r6, r7
 800d584:	608b      	str	r3, [r1, #8]
 800d586:	f1b8 0f00 	cmp.w	r8, #0
 800d58a:	dd9c      	ble.n	800d4c6 <__sflush_r+0x1a>
 800d58c:	6a21      	ldr	r1, [r4, #32]
 800d58e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d590:	4643      	mov	r3, r8
 800d592:	463a      	mov	r2, r7
 800d594:	4628      	mov	r0, r5
 800d596:	47b0      	blx	r6
 800d598:	2800      	cmp	r0, #0
 800d59a:	dc06      	bgt.n	800d5aa <__sflush_r+0xfe>
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5a2:	81a3      	strh	r3, [r4, #12]
 800d5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a8:	e78e      	b.n	800d4c8 <__sflush_r+0x1c>
 800d5aa:	4407      	add	r7, r0
 800d5ac:	eba8 0800 	sub.w	r8, r8, r0
 800d5b0:	e7e9      	b.n	800d586 <__sflush_r+0xda>
 800d5b2:	bf00      	nop
 800d5b4:	dfbffffe 	.word	0xdfbffffe

0800d5b8 <_fflush_r>:
 800d5b8:	b538      	push	{r3, r4, r5, lr}
 800d5ba:	690b      	ldr	r3, [r1, #16]
 800d5bc:	4605      	mov	r5, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	b913      	cbnz	r3, 800d5c8 <_fflush_r+0x10>
 800d5c2:	2500      	movs	r5, #0
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	bd38      	pop	{r3, r4, r5, pc}
 800d5c8:	b118      	cbz	r0, 800d5d2 <_fflush_r+0x1a>
 800d5ca:	6a03      	ldr	r3, [r0, #32]
 800d5cc:	b90b      	cbnz	r3, 800d5d2 <_fflush_r+0x1a>
 800d5ce:	f7fe fa03 	bl	800b9d8 <__sinit>
 800d5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d0f3      	beq.n	800d5c2 <_fflush_r+0xa>
 800d5da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5dc:	07d0      	lsls	r0, r2, #31
 800d5de:	d404      	bmi.n	800d5ea <_fflush_r+0x32>
 800d5e0:	0599      	lsls	r1, r3, #22
 800d5e2:	d402      	bmi.n	800d5ea <_fflush_r+0x32>
 800d5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5e6:	f7fe fb0e 	bl	800bc06 <__retarget_lock_acquire_recursive>
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	4621      	mov	r1, r4
 800d5ee:	f7ff ff5d 	bl	800d4ac <__sflush_r>
 800d5f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5f4:	07da      	lsls	r2, r3, #31
 800d5f6:	4605      	mov	r5, r0
 800d5f8:	d4e4      	bmi.n	800d5c4 <_fflush_r+0xc>
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	059b      	lsls	r3, r3, #22
 800d5fe:	d4e1      	bmi.n	800d5c4 <_fflush_r+0xc>
 800d600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d602:	f7fe fb01 	bl	800bc08 <__retarget_lock_release_recursive>
 800d606:	e7dd      	b.n	800d5c4 <_fflush_r+0xc>

0800d608 <memmove>:
 800d608:	4288      	cmp	r0, r1
 800d60a:	b510      	push	{r4, lr}
 800d60c:	eb01 0402 	add.w	r4, r1, r2
 800d610:	d902      	bls.n	800d618 <memmove+0x10>
 800d612:	4284      	cmp	r4, r0
 800d614:	4623      	mov	r3, r4
 800d616:	d807      	bhi.n	800d628 <memmove+0x20>
 800d618:	1e43      	subs	r3, r0, #1
 800d61a:	42a1      	cmp	r1, r4
 800d61c:	d008      	beq.n	800d630 <memmove+0x28>
 800d61e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d622:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d626:	e7f8      	b.n	800d61a <memmove+0x12>
 800d628:	4402      	add	r2, r0
 800d62a:	4601      	mov	r1, r0
 800d62c:	428a      	cmp	r2, r1
 800d62e:	d100      	bne.n	800d632 <memmove+0x2a>
 800d630:	bd10      	pop	{r4, pc}
 800d632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d63a:	e7f7      	b.n	800d62c <memmove+0x24>

0800d63c <_sbrk_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	4d06      	ldr	r5, [pc, #24]	; (800d658 <_sbrk_r+0x1c>)
 800d640:	2300      	movs	r3, #0
 800d642:	4604      	mov	r4, r0
 800d644:	4608      	mov	r0, r1
 800d646:	602b      	str	r3, [r5, #0]
 800d648:	f7f5 fd2e 	bl	80030a8 <_sbrk>
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	d102      	bne.n	800d656 <_sbrk_r+0x1a>
 800d650:	682b      	ldr	r3, [r5, #0]
 800d652:	b103      	cbz	r3, 800d656 <_sbrk_r+0x1a>
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	bd38      	pop	{r3, r4, r5, pc}
 800d658:	20011210 	.word	0x20011210

0800d65c <memcpy>:
 800d65c:	440a      	add	r2, r1
 800d65e:	4291      	cmp	r1, r2
 800d660:	f100 33ff 	add.w	r3, r0, #4294967295
 800d664:	d100      	bne.n	800d668 <memcpy+0xc>
 800d666:	4770      	bx	lr
 800d668:	b510      	push	{r4, lr}
 800d66a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d66e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d672:	4291      	cmp	r1, r2
 800d674:	d1f9      	bne.n	800d66a <memcpy+0xe>
 800d676:	bd10      	pop	{r4, pc}

0800d678 <__assert_func>:
 800d678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d67a:	4614      	mov	r4, r2
 800d67c:	461a      	mov	r2, r3
 800d67e:	4b09      	ldr	r3, [pc, #36]	; (800d6a4 <__assert_func+0x2c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4605      	mov	r5, r0
 800d684:	68d8      	ldr	r0, [r3, #12]
 800d686:	b14c      	cbz	r4, 800d69c <__assert_func+0x24>
 800d688:	4b07      	ldr	r3, [pc, #28]	; (800d6a8 <__assert_func+0x30>)
 800d68a:	9100      	str	r1, [sp, #0]
 800d68c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d690:	4906      	ldr	r1, [pc, #24]	; (800d6ac <__assert_func+0x34>)
 800d692:	462b      	mov	r3, r5
 800d694:	f000 f872 	bl	800d77c <fiprintf>
 800d698:	f000 f882 	bl	800d7a0 <abort>
 800d69c:	4b04      	ldr	r3, [pc, #16]	; (800d6b0 <__assert_func+0x38>)
 800d69e:	461c      	mov	r4, r3
 800d6a0:	e7f3      	b.n	800d68a <__assert_func+0x12>
 800d6a2:	bf00      	nop
 800d6a4:	20000880 	.word	0x20000880
 800d6a8:	08010b47 	.word	0x08010b47
 800d6ac:	08010b54 	.word	0x08010b54
 800d6b0:	08010b82 	.word	0x08010b82

0800d6b4 <_calloc_r>:
 800d6b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6b6:	fba1 2402 	umull	r2, r4, r1, r2
 800d6ba:	b94c      	cbnz	r4, 800d6d0 <_calloc_r+0x1c>
 800d6bc:	4611      	mov	r1, r2
 800d6be:	9201      	str	r2, [sp, #4]
 800d6c0:	f7ff f994 	bl	800c9ec <_malloc_r>
 800d6c4:	9a01      	ldr	r2, [sp, #4]
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	b930      	cbnz	r0, 800d6d8 <_calloc_r+0x24>
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	b003      	add	sp, #12
 800d6ce:	bd30      	pop	{r4, r5, pc}
 800d6d0:	220c      	movs	r2, #12
 800d6d2:	6002      	str	r2, [r0, #0]
 800d6d4:	2500      	movs	r5, #0
 800d6d6:	e7f8      	b.n	800d6ca <_calloc_r+0x16>
 800d6d8:	4621      	mov	r1, r4
 800d6da:	f7fe fa16 	bl	800bb0a <memset>
 800d6de:	e7f4      	b.n	800d6ca <_calloc_r+0x16>

0800d6e0 <__ascii_mbtowc>:
 800d6e0:	b082      	sub	sp, #8
 800d6e2:	b901      	cbnz	r1, 800d6e6 <__ascii_mbtowc+0x6>
 800d6e4:	a901      	add	r1, sp, #4
 800d6e6:	b142      	cbz	r2, 800d6fa <__ascii_mbtowc+0x1a>
 800d6e8:	b14b      	cbz	r3, 800d6fe <__ascii_mbtowc+0x1e>
 800d6ea:	7813      	ldrb	r3, [r2, #0]
 800d6ec:	600b      	str	r3, [r1, #0]
 800d6ee:	7812      	ldrb	r2, [r2, #0]
 800d6f0:	1e10      	subs	r0, r2, #0
 800d6f2:	bf18      	it	ne
 800d6f4:	2001      	movne	r0, #1
 800d6f6:	b002      	add	sp, #8
 800d6f8:	4770      	bx	lr
 800d6fa:	4610      	mov	r0, r2
 800d6fc:	e7fb      	b.n	800d6f6 <__ascii_mbtowc+0x16>
 800d6fe:	f06f 0001 	mvn.w	r0, #1
 800d702:	e7f8      	b.n	800d6f6 <__ascii_mbtowc+0x16>

0800d704 <_realloc_r>:
 800d704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d708:	4680      	mov	r8, r0
 800d70a:	4614      	mov	r4, r2
 800d70c:	460e      	mov	r6, r1
 800d70e:	b921      	cbnz	r1, 800d71a <_realloc_r+0x16>
 800d710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d714:	4611      	mov	r1, r2
 800d716:	f7ff b969 	b.w	800c9ec <_malloc_r>
 800d71a:	b92a      	cbnz	r2, 800d728 <_realloc_r+0x24>
 800d71c:	f7ff f8f2 	bl	800c904 <_free_r>
 800d720:	4625      	mov	r5, r4
 800d722:	4628      	mov	r0, r5
 800d724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d728:	f000 f841 	bl	800d7ae <_malloc_usable_size_r>
 800d72c:	4284      	cmp	r4, r0
 800d72e:	4607      	mov	r7, r0
 800d730:	d802      	bhi.n	800d738 <_realloc_r+0x34>
 800d732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d736:	d812      	bhi.n	800d75e <_realloc_r+0x5a>
 800d738:	4621      	mov	r1, r4
 800d73a:	4640      	mov	r0, r8
 800d73c:	f7ff f956 	bl	800c9ec <_malloc_r>
 800d740:	4605      	mov	r5, r0
 800d742:	2800      	cmp	r0, #0
 800d744:	d0ed      	beq.n	800d722 <_realloc_r+0x1e>
 800d746:	42bc      	cmp	r4, r7
 800d748:	4622      	mov	r2, r4
 800d74a:	4631      	mov	r1, r6
 800d74c:	bf28      	it	cs
 800d74e:	463a      	movcs	r2, r7
 800d750:	f7ff ff84 	bl	800d65c <memcpy>
 800d754:	4631      	mov	r1, r6
 800d756:	4640      	mov	r0, r8
 800d758:	f7ff f8d4 	bl	800c904 <_free_r>
 800d75c:	e7e1      	b.n	800d722 <_realloc_r+0x1e>
 800d75e:	4635      	mov	r5, r6
 800d760:	e7df      	b.n	800d722 <_realloc_r+0x1e>

0800d762 <__ascii_wctomb>:
 800d762:	b149      	cbz	r1, 800d778 <__ascii_wctomb+0x16>
 800d764:	2aff      	cmp	r2, #255	; 0xff
 800d766:	bf85      	ittet	hi
 800d768:	238a      	movhi	r3, #138	; 0x8a
 800d76a:	6003      	strhi	r3, [r0, #0]
 800d76c:	700a      	strbls	r2, [r1, #0]
 800d76e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d772:	bf98      	it	ls
 800d774:	2001      	movls	r0, #1
 800d776:	4770      	bx	lr
 800d778:	4608      	mov	r0, r1
 800d77a:	4770      	bx	lr

0800d77c <fiprintf>:
 800d77c:	b40e      	push	{r1, r2, r3}
 800d77e:	b503      	push	{r0, r1, lr}
 800d780:	4601      	mov	r1, r0
 800d782:	ab03      	add	r3, sp, #12
 800d784:	4805      	ldr	r0, [pc, #20]	; (800d79c <fiprintf+0x20>)
 800d786:	f853 2b04 	ldr.w	r2, [r3], #4
 800d78a:	6800      	ldr	r0, [r0, #0]
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	f000 f83f 	bl	800d810 <_vfiprintf_r>
 800d792:	b002      	add	sp, #8
 800d794:	f85d eb04 	ldr.w	lr, [sp], #4
 800d798:	b003      	add	sp, #12
 800d79a:	4770      	bx	lr
 800d79c:	20000880 	.word	0x20000880

0800d7a0 <abort>:
 800d7a0:	b508      	push	{r3, lr}
 800d7a2:	2006      	movs	r0, #6
 800d7a4:	f000 fa0c 	bl	800dbc0 <raise>
 800d7a8:	2001      	movs	r0, #1
 800d7aa:	f7f5 fc05 	bl	8002fb8 <_exit>

0800d7ae <_malloc_usable_size_r>:
 800d7ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7b2:	1f18      	subs	r0, r3, #4
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	bfbc      	itt	lt
 800d7b8:	580b      	ldrlt	r3, [r1, r0]
 800d7ba:	18c0      	addlt	r0, r0, r3
 800d7bc:	4770      	bx	lr

0800d7be <__sfputc_r>:
 800d7be:	6893      	ldr	r3, [r2, #8]
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	b410      	push	{r4}
 800d7c6:	6093      	str	r3, [r2, #8]
 800d7c8:	da08      	bge.n	800d7dc <__sfputc_r+0x1e>
 800d7ca:	6994      	ldr	r4, [r2, #24]
 800d7cc:	42a3      	cmp	r3, r4
 800d7ce:	db01      	blt.n	800d7d4 <__sfputc_r+0x16>
 800d7d0:	290a      	cmp	r1, #10
 800d7d2:	d103      	bne.n	800d7dc <__sfputc_r+0x1e>
 800d7d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7d8:	f000 b934 	b.w	800da44 <__swbuf_r>
 800d7dc:	6813      	ldr	r3, [r2, #0]
 800d7de:	1c58      	adds	r0, r3, #1
 800d7e0:	6010      	str	r0, [r2, #0]
 800d7e2:	7019      	strb	r1, [r3, #0]
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <__sfputs_r>:
 800d7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	460f      	mov	r7, r1
 800d7f2:	4614      	mov	r4, r2
 800d7f4:	18d5      	adds	r5, r2, r3
 800d7f6:	42ac      	cmp	r4, r5
 800d7f8:	d101      	bne.n	800d7fe <__sfputs_r+0x12>
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	e007      	b.n	800d80e <__sfputs_r+0x22>
 800d7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d802:	463a      	mov	r2, r7
 800d804:	4630      	mov	r0, r6
 800d806:	f7ff ffda 	bl	800d7be <__sfputc_r>
 800d80a:	1c43      	adds	r3, r0, #1
 800d80c:	d1f3      	bne.n	800d7f6 <__sfputs_r+0xa>
 800d80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d810 <_vfiprintf_r>:
 800d810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d814:	460d      	mov	r5, r1
 800d816:	b09d      	sub	sp, #116	; 0x74
 800d818:	4614      	mov	r4, r2
 800d81a:	4698      	mov	r8, r3
 800d81c:	4606      	mov	r6, r0
 800d81e:	b118      	cbz	r0, 800d828 <_vfiprintf_r+0x18>
 800d820:	6a03      	ldr	r3, [r0, #32]
 800d822:	b90b      	cbnz	r3, 800d828 <_vfiprintf_r+0x18>
 800d824:	f7fe f8d8 	bl	800b9d8 <__sinit>
 800d828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d82a:	07d9      	lsls	r1, r3, #31
 800d82c:	d405      	bmi.n	800d83a <_vfiprintf_r+0x2a>
 800d82e:	89ab      	ldrh	r3, [r5, #12]
 800d830:	059a      	lsls	r2, r3, #22
 800d832:	d402      	bmi.n	800d83a <_vfiprintf_r+0x2a>
 800d834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d836:	f7fe f9e6 	bl	800bc06 <__retarget_lock_acquire_recursive>
 800d83a:	89ab      	ldrh	r3, [r5, #12]
 800d83c:	071b      	lsls	r3, r3, #28
 800d83e:	d501      	bpl.n	800d844 <_vfiprintf_r+0x34>
 800d840:	692b      	ldr	r3, [r5, #16]
 800d842:	b99b      	cbnz	r3, 800d86c <_vfiprintf_r+0x5c>
 800d844:	4629      	mov	r1, r5
 800d846:	4630      	mov	r0, r6
 800d848:	f000 f93a 	bl	800dac0 <__swsetup_r>
 800d84c:	b170      	cbz	r0, 800d86c <_vfiprintf_r+0x5c>
 800d84e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d850:	07dc      	lsls	r4, r3, #31
 800d852:	d504      	bpl.n	800d85e <_vfiprintf_r+0x4e>
 800d854:	f04f 30ff 	mov.w	r0, #4294967295
 800d858:	b01d      	add	sp, #116	; 0x74
 800d85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85e:	89ab      	ldrh	r3, [r5, #12]
 800d860:	0598      	lsls	r0, r3, #22
 800d862:	d4f7      	bmi.n	800d854 <_vfiprintf_r+0x44>
 800d864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d866:	f7fe f9cf 	bl	800bc08 <__retarget_lock_release_recursive>
 800d86a:	e7f3      	b.n	800d854 <_vfiprintf_r+0x44>
 800d86c:	2300      	movs	r3, #0
 800d86e:	9309      	str	r3, [sp, #36]	; 0x24
 800d870:	2320      	movs	r3, #32
 800d872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d876:	f8cd 800c 	str.w	r8, [sp, #12]
 800d87a:	2330      	movs	r3, #48	; 0x30
 800d87c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800da30 <_vfiprintf_r+0x220>
 800d880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d884:	f04f 0901 	mov.w	r9, #1
 800d888:	4623      	mov	r3, r4
 800d88a:	469a      	mov	sl, r3
 800d88c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d890:	b10a      	cbz	r2, 800d896 <_vfiprintf_r+0x86>
 800d892:	2a25      	cmp	r2, #37	; 0x25
 800d894:	d1f9      	bne.n	800d88a <_vfiprintf_r+0x7a>
 800d896:	ebba 0b04 	subs.w	fp, sl, r4
 800d89a:	d00b      	beq.n	800d8b4 <_vfiprintf_r+0xa4>
 800d89c:	465b      	mov	r3, fp
 800d89e:	4622      	mov	r2, r4
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7ff ffa2 	bl	800d7ec <__sfputs_r>
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	f000 80a9 	beq.w	800da00 <_vfiprintf_r+0x1f0>
 800d8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8b0:	445a      	add	r2, fp
 800d8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f000 80a1 	beq.w	800da00 <_vfiprintf_r+0x1f0>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8c8:	f10a 0a01 	add.w	sl, sl, #1
 800d8cc:	9304      	str	r3, [sp, #16]
 800d8ce:	9307      	str	r3, [sp, #28]
 800d8d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8d4:	931a      	str	r3, [sp, #104]	; 0x68
 800d8d6:	4654      	mov	r4, sl
 800d8d8:	2205      	movs	r2, #5
 800d8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8de:	4854      	ldr	r0, [pc, #336]	; (800da30 <_vfiprintf_r+0x220>)
 800d8e0:	f7f2 fc96 	bl	8000210 <memchr>
 800d8e4:	9a04      	ldr	r2, [sp, #16]
 800d8e6:	b9d8      	cbnz	r0, 800d920 <_vfiprintf_r+0x110>
 800d8e8:	06d1      	lsls	r1, r2, #27
 800d8ea:	bf44      	itt	mi
 800d8ec:	2320      	movmi	r3, #32
 800d8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8f2:	0713      	lsls	r3, r2, #28
 800d8f4:	bf44      	itt	mi
 800d8f6:	232b      	movmi	r3, #43	; 0x2b
 800d8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d900:	2b2a      	cmp	r3, #42	; 0x2a
 800d902:	d015      	beq.n	800d930 <_vfiprintf_r+0x120>
 800d904:	9a07      	ldr	r2, [sp, #28]
 800d906:	4654      	mov	r4, sl
 800d908:	2000      	movs	r0, #0
 800d90a:	f04f 0c0a 	mov.w	ip, #10
 800d90e:	4621      	mov	r1, r4
 800d910:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d914:	3b30      	subs	r3, #48	; 0x30
 800d916:	2b09      	cmp	r3, #9
 800d918:	d94d      	bls.n	800d9b6 <_vfiprintf_r+0x1a6>
 800d91a:	b1b0      	cbz	r0, 800d94a <_vfiprintf_r+0x13a>
 800d91c:	9207      	str	r2, [sp, #28]
 800d91e:	e014      	b.n	800d94a <_vfiprintf_r+0x13a>
 800d920:	eba0 0308 	sub.w	r3, r0, r8
 800d924:	fa09 f303 	lsl.w	r3, r9, r3
 800d928:	4313      	orrs	r3, r2
 800d92a:	9304      	str	r3, [sp, #16]
 800d92c:	46a2      	mov	sl, r4
 800d92e:	e7d2      	b.n	800d8d6 <_vfiprintf_r+0xc6>
 800d930:	9b03      	ldr	r3, [sp, #12]
 800d932:	1d19      	adds	r1, r3, #4
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	9103      	str	r1, [sp, #12]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	bfbb      	ittet	lt
 800d93c:	425b      	neglt	r3, r3
 800d93e:	f042 0202 	orrlt.w	r2, r2, #2
 800d942:	9307      	strge	r3, [sp, #28]
 800d944:	9307      	strlt	r3, [sp, #28]
 800d946:	bfb8      	it	lt
 800d948:	9204      	strlt	r2, [sp, #16]
 800d94a:	7823      	ldrb	r3, [r4, #0]
 800d94c:	2b2e      	cmp	r3, #46	; 0x2e
 800d94e:	d10c      	bne.n	800d96a <_vfiprintf_r+0x15a>
 800d950:	7863      	ldrb	r3, [r4, #1]
 800d952:	2b2a      	cmp	r3, #42	; 0x2a
 800d954:	d134      	bne.n	800d9c0 <_vfiprintf_r+0x1b0>
 800d956:	9b03      	ldr	r3, [sp, #12]
 800d958:	1d1a      	adds	r2, r3, #4
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	9203      	str	r2, [sp, #12]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	bfb8      	it	lt
 800d962:	f04f 33ff 	movlt.w	r3, #4294967295
 800d966:	3402      	adds	r4, #2
 800d968:	9305      	str	r3, [sp, #20]
 800d96a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800da40 <_vfiprintf_r+0x230>
 800d96e:	7821      	ldrb	r1, [r4, #0]
 800d970:	2203      	movs	r2, #3
 800d972:	4650      	mov	r0, sl
 800d974:	f7f2 fc4c 	bl	8000210 <memchr>
 800d978:	b138      	cbz	r0, 800d98a <_vfiprintf_r+0x17a>
 800d97a:	9b04      	ldr	r3, [sp, #16]
 800d97c:	eba0 000a 	sub.w	r0, r0, sl
 800d980:	2240      	movs	r2, #64	; 0x40
 800d982:	4082      	lsls	r2, r0
 800d984:	4313      	orrs	r3, r2
 800d986:	3401      	adds	r4, #1
 800d988:	9304      	str	r3, [sp, #16]
 800d98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d98e:	4829      	ldr	r0, [pc, #164]	; (800da34 <_vfiprintf_r+0x224>)
 800d990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d994:	2206      	movs	r2, #6
 800d996:	f7f2 fc3b 	bl	8000210 <memchr>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d03f      	beq.n	800da1e <_vfiprintf_r+0x20e>
 800d99e:	4b26      	ldr	r3, [pc, #152]	; (800da38 <_vfiprintf_r+0x228>)
 800d9a0:	bb1b      	cbnz	r3, 800d9ea <_vfiprintf_r+0x1da>
 800d9a2:	9b03      	ldr	r3, [sp, #12]
 800d9a4:	3307      	adds	r3, #7
 800d9a6:	f023 0307 	bic.w	r3, r3, #7
 800d9aa:	3308      	adds	r3, #8
 800d9ac:	9303      	str	r3, [sp, #12]
 800d9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b0:	443b      	add	r3, r7
 800d9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b4:	e768      	b.n	800d888 <_vfiprintf_r+0x78>
 800d9b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	2001      	movs	r0, #1
 800d9be:	e7a6      	b.n	800d90e <_vfiprintf_r+0xfe>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	3401      	adds	r4, #1
 800d9c4:	9305      	str	r3, [sp, #20]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	f04f 0c0a 	mov.w	ip, #10
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9d2:	3a30      	subs	r2, #48	; 0x30
 800d9d4:	2a09      	cmp	r2, #9
 800d9d6:	d903      	bls.n	800d9e0 <_vfiprintf_r+0x1d0>
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d0c6      	beq.n	800d96a <_vfiprintf_r+0x15a>
 800d9dc:	9105      	str	r1, [sp, #20]
 800d9de:	e7c4      	b.n	800d96a <_vfiprintf_r+0x15a>
 800d9e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e7f0      	b.n	800d9cc <_vfiprintf_r+0x1bc>
 800d9ea:	ab03      	add	r3, sp, #12
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	462a      	mov	r2, r5
 800d9f0:	4b12      	ldr	r3, [pc, #72]	; (800da3c <_vfiprintf_r+0x22c>)
 800d9f2:	a904      	add	r1, sp, #16
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	f7fd fb9d 	bl	800b134 <_printf_float>
 800d9fa:	4607      	mov	r7, r0
 800d9fc:	1c78      	adds	r0, r7, #1
 800d9fe:	d1d6      	bne.n	800d9ae <_vfiprintf_r+0x19e>
 800da00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da02:	07d9      	lsls	r1, r3, #31
 800da04:	d405      	bmi.n	800da12 <_vfiprintf_r+0x202>
 800da06:	89ab      	ldrh	r3, [r5, #12]
 800da08:	059a      	lsls	r2, r3, #22
 800da0a:	d402      	bmi.n	800da12 <_vfiprintf_r+0x202>
 800da0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da0e:	f7fe f8fb 	bl	800bc08 <__retarget_lock_release_recursive>
 800da12:	89ab      	ldrh	r3, [r5, #12]
 800da14:	065b      	lsls	r3, r3, #25
 800da16:	f53f af1d 	bmi.w	800d854 <_vfiprintf_r+0x44>
 800da1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da1c:	e71c      	b.n	800d858 <_vfiprintf_r+0x48>
 800da1e:	ab03      	add	r3, sp, #12
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	462a      	mov	r2, r5
 800da24:	4b05      	ldr	r3, [pc, #20]	; (800da3c <_vfiprintf_r+0x22c>)
 800da26:	a904      	add	r1, sp, #16
 800da28:	4630      	mov	r0, r6
 800da2a:	f7fd fe27 	bl	800b67c <_printf_i>
 800da2e:	e7e4      	b.n	800d9fa <_vfiprintf_r+0x1ea>
 800da30:	08010b2c 	.word	0x08010b2c
 800da34:	08010b36 	.word	0x08010b36
 800da38:	0800b135 	.word	0x0800b135
 800da3c:	0800d7ed 	.word	0x0800d7ed
 800da40:	08010b32 	.word	0x08010b32

0800da44 <__swbuf_r>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	460e      	mov	r6, r1
 800da48:	4614      	mov	r4, r2
 800da4a:	4605      	mov	r5, r0
 800da4c:	b118      	cbz	r0, 800da56 <__swbuf_r+0x12>
 800da4e:	6a03      	ldr	r3, [r0, #32]
 800da50:	b90b      	cbnz	r3, 800da56 <__swbuf_r+0x12>
 800da52:	f7fd ffc1 	bl	800b9d8 <__sinit>
 800da56:	69a3      	ldr	r3, [r4, #24]
 800da58:	60a3      	str	r3, [r4, #8]
 800da5a:	89a3      	ldrh	r3, [r4, #12]
 800da5c:	071a      	lsls	r2, r3, #28
 800da5e:	d525      	bpl.n	800daac <__swbuf_r+0x68>
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	b31b      	cbz	r3, 800daac <__swbuf_r+0x68>
 800da64:	6823      	ldr	r3, [r4, #0]
 800da66:	6922      	ldr	r2, [r4, #16]
 800da68:	1a98      	subs	r0, r3, r2
 800da6a:	6963      	ldr	r3, [r4, #20]
 800da6c:	b2f6      	uxtb	r6, r6
 800da6e:	4283      	cmp	r3, r0
 800da70:	4637      	mov	r7, r6
 800da72:	dc04      	bgt.n	800da7e <__swbuf_r+0x3a>
 800da74:	4621      	mov	r1, r4
 800da76:	4628      	mov	r0, r5
 800da78:	f7ff fd9e 	bl	800d5b8 <_fflush_r>
 800da7c:	b9e0      	cbnz	r0, 800dab8 <__swbuf_r+0x74>
 800da7e:	68a3      	ldr	r3, [r4, #8]
 800da80:	3b01      	subs	r3, #1
 800da82:	60a3      	str	r3, [r4, #8]
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	6022      	str	r2, [r4, #0]
 800da8a:	701e      	strb	r6, [r3, #0]
 800da8c:	6962      	ldr	r2, [r4, #20]
 800da8e:	1c43      	adds	r3, r0, #1
 800da90:	429a      	cmp	r2, r3
 800da92:	d004      	beq.n	800da9e <__swbuf_r+0x5a>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	07db      	lsls	r3, r3, #31
 800da98:	d506      	bpl.n	800daa8 <__swbuf_r+0x64>
 800da9a:	2e0a      	cmp	r6, #10
 800da9c:	d104      	bne.n	800daa8 <__swbuf_r+0x64>
 800da9e:	4621      	mov	r1, r4
 800daa0:	4628      	mov	r0, r5
 800daa2:	f7ff fd89 	bl	800d5b8 <_fflush_r>
 800daa6:	b938      	cbnz	r0, 800dab8 <__swbuf_r+0x74>
 800daa8:	4638      	mov	r0, r7
 800daaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daac:	4621      	mov	r1, r4
 800daae:	4628      	mov	r0, r5
 800dab0:	f000 f806 	bl	800dac0 <__swsetup_r>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d0d5      	beq.n	800da64 <__swbuf_r+0x20>
 800dab8:	f04f 37ff 	mov.w	r7, #4294967295
 800dabc:	e7f4      	b.n	800daa8 <__swbuf_r+0x64>
	...

0800dac0 <__swsetup_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4b2a      	ldr	r3, [pc, #168]	; (800db6c <__swsetup_r+0xac>)
 800dac4:	4605      	mov	r5, r0
 800dac6:	6818      	ldr	r0, [r3, #0]
 800dac8:	460c      	mov	r4, r1
 800daca:	b118      	cbz	r0, 800dad4 <__swsetup_r+0x14>
 800dacc:	6a03      	ldr	r3, [r0, #32]
 800dace:	b90b      	cbnz	r3, 800dad4 <__swsetup_r+0x14>
 800dad0:	f7fd ff82 	bl	800b9d8 <__sinit>
 800dad4:	89a3      	ldrh	r3, [r4, #12]
 800dad6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dada:	0718      	lsls	r0, r3, #28
 800dadc:	d422      	bmi.n	800db24 <__swsetup_r+0x64>
 800dade:	06d9      	lsls	r1, r3, #27
 800dae0:	d407      	bmi.n	800daf2 <__swsetup_r+0x32>
 800dae2:	2309      	movs	r3, #9
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	f04f 30ff 	mov.w	r0, #4294967295
 800daf0:	e034      	b.n	800db5c <__swsetup_r+0x9c>
 800daf2:	0758      	lsls	r0, r3, #29
 800daf4:	d512      	bpl.n	800db1c <__swsetup_r+0x5c>
 800daf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daf8:	b141      	cbz	r1, 800db0c <__swsetup_r+0x4c>
 800dafa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dafe:	4299      	cmp	r1, r3
 800db00:	d002      	beq.n	800db08 <__swsetup_r+0x48>
 800db02:	4628      	mov	r0, r5
 800db04:	f7fe fefe 	bl	800c904 <_free_r>
 800db08:	2300      	movs	r3, #0
 800db0a:	6363      	str	r3, [r4, #52]	; 0x34
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db12:	81a3      	strh	r3, [r4, #12]
 800db14:	2300      	movs	r3, #0
 800db16:	6063      	str	r3, [r4, #4]
 800db18:	6923      	ldr	r3, [r4, #16]
 800db1a:	6023      	str	r3, [r4, #0]
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f043 0308 	orr.w	r3, r3, #8
 800db22:	81a3      	strh	r3, [r4, #12]
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	b94b      	cbnz	r3, 800db3c <__swsetup_r+0x7c>
 800db28:	89a3      	ldrh	r3, [r4, #12]
 800db2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db32:	d003      	beq.n	800db3c <__swsetup_r+0x7c>
 800db34:	4621      	mov	r1, r4
 800db36:	4628      	mov	r0, r5
 800db38:	f000 f884 	bl	800dc44 <__smakebuf_r>
 800db3c:	89a0      	ldrh	r0, [r4, #12]
 800db3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db42:	f010 0301 	ands.w	r3, r0, #1
 800db46:	d00a      	beq.n	800db5e <__swsetup_r+0x9e>
 800db48:	2300      	movs	r3, #0
 800db4a:	60a3      	str	r3, [r4, #8]
 800db4c:	6963      	ldr	r3, [r4, #20]
 800db4e:	425b      	negs	r3, r3
 800db50:	61a3      	str	r3, [r4, #24]
 800db52:	6923      	ldr	r3, [r4, #16]
 800db54:	b943      	cbnz	r3, 800db68 <__swsetup_r+0xa8>
 800db56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db5a:	d1c4      	bne.n	800dae6 <__swsetup_r+0x26>
 800db5c:	bd38      	pop	{r3, r4, r5, pc}
 800db5e:	0781      	lsls	r1, r0, #30
 800db60:	bf58      	it	pl
 800db62:	6963      	ldrpl	r3, [r4, #20]
 800db64:	60a3      	str	r3, [r4, #8]
 800db66:	e7f4      	b.n	800db52 <__swsetup_r+0x92>
 800db68:	2000      	movs	r0, #0
 800db6a:	e7f7      	b.n	800db5c <__swsetup_r+0x9c>
 800db6c:	20000880 	.word	0x20000880

0800db70 <_raise_r>:
 800db70:	291f      	cmp	r1, #31
 800db72:	b538      	push	{r3, r4, r5, lr}
 800db74:	4604      	mov	r4, r0
 800db76:	460d      	mov	r5, r1
 800db78:	d904      	bls.n	800db84 <_raise_r+0x14>
 800db7a:	2316      	movs	r3, #22
 800db7c:	6003      	str	r3, [r0, #0]
 800db7e:	f04f 30ff 	mov.w	r0, #4294967295
 800db82:	bd38      	pop	{r3, r4, r5, pc}
 800db84:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800db86:	b112      	cbz	r2, 800db8e <_raise_r+0x1e>
 800db88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db8c:	b94b      	cbnz	r3, 800dba2 <_raise_r+0x32>
 800db8e:	4620      	mov	r0, r4
 800db90:	f000 f830 	bl	800dbf4 <_getpid_r>
 800db94:	462a      	mov	r2, r5
 800db96:	4601      	mov	r1, r0
 800db98:	4620      	mov	r0, r4
 800db9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db9e:	f000 b817 	b.w	800dbd0 <_kill_r>
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d00a      	beq.n	800dbbc <_raise_r+0x4c>
 800dba6:	1c59      	adds	r1, r3, #1
 800dba8:	d103      	bne.n	800dbb2 <_raise_r+0x42>
 800dbaa:	2316      	movs	r3, #22
 800dbac:	6003      	str	r3, [r0, #0]
 800dbae:	2001      	movs	r0, #1
 800dbb0:	e7e7      	b.n	800db82 <_raise_r+0x12>
 800dbb2:	2400      	movs	r4, #0
 800dbb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbb8:	4628      	mov	r0, r5
 800dbba:	4798      	blx	r3
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	e7e0      	b.n	800db82 <_raise_r+0x12>

0800dbc0 <raise>:
 800dbc0:	4b02      	ldr	r3, [pc, #8]	; (800dbcc <raise+0xc>)
 800dbc2:	4601      	mov	r1, r0
 800dbc4:	6818      	ldr	r0, [r3, #0]
 800dbc6:	f7ff bfd3 	b.w	800db70 <_raise_r>
 800dbca:	bf00      	nop
 800dbcc:	20000880 	.word	0x20000880

0800dbd0 <_kill_r>:
 800dbd0:	b538      	push	{r3, r4, r5, lr}
 800dbd2:	4d07      	ldr	r5, [pc, #28]	; (800dbf0 <_kill_r+0x20>)
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	4608      	mov	r0, r1
 800dbda:	4611      	mov	r1, r2
 800dbdc:	602b      	str	r3, [r5, #0]
 800dbde:	f7f5 f9db 	bl	8002f98 <_kill>
 800dbe2:	1c43      	adds	r3, r0, #1
 800dbe4:	d102      	bne.n	800dbec <_kill_r+0x1c>
 800dbe6:	682b      	ldr	r3, [r5, #0]
 800dbe8:	b103      	cbz	r3, 800dbec <_kill_r+0x1c>
 800dbea:	6023      	str	r3, [r4, #0]
 800dbec:	bd38      	pop	{r3, r4, r5, pc}
 800dbee:	bf00      	nop
 800dbf0:	20011210 	.word	0x20011210

0800dbf4 <_getpid_r>:
 800dbf4:	f7f5 b9c8 	b.w	8002f88 <_getpid>

0800dbf8 <__swhatbuf_r>:
 800dbf8:	b570      	push	{r4, r5, r6, lr}
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc00:	2900      	cmp	r1, #0
 800dc02:	b096      	sub	sp, #88	; 0x58
 800dc04:	4615      	mov	r5, r2
 800dc06:	461e      	mov	r6, r3
 800dc08:	da0d      	bge.n	800dc26 <__swhatbuf_r+0x2e>
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc10:	f04f 0100 	mov.w	r1, #0
 800dc14:	bf0c      	ite	eq
 800dc16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc1a:	2340      	movne	r3, #64	; 0x40
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	6031      	str	r1, [r6, #0]
 800dc20:	602b      	str	r3, [r5, #0]
 800dc22:	b016      	add	sp, #88	; 0x58
 800dc24:	bd70      	pop	{r4, r5, r6, pc}
 800dc26:	466a      	mov	r2, sp
 800dc28:	f000 f848 	bl	800dcbc <_fstat_r>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	dbec      	blt.n	800dc0a <__swhatbuf_r+0x12>
 800dc30:	9901      	ldr	r1, [sp, #4]
 800dc32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc3a:	4259      	negs	r1, r3
 800dc3c:	4159      	adcs	r1, r3
 800dc3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc42:	e7eb      	b.n	800dc1c <__swhatbuf_r+0x24>

0800dc44 <__smakebuf_r>:
 800dc44:	898b      	ldrh	r3, [r1, #12]
 800dc46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc48:	079d      	lsls	r5, r3, #30
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	d507      	bpl.n	800dc60 <__smakebuf_r+0x1c>
 800dc50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	6123      	str	r3, [r4, #16]
 800dc58:	2301      	movs	r3, #1
 800dc5a:	6163      	str	r3, [r4, #20]
 800dc5c:	b002      	add	sp, #8
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}
 800dc60:	ab01      	add	r3, sp, #4
 800dc62:	466a      	mov	r2, sp
 800dc64:	f7ff ffc8 	bl	800dbf8 <__swhatbuf_r>
 800dc68:	9900      	ldr	r1, [sp, #0]
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	f7fe febd 	bl	800c9ec <_malloc_r>
 800dc72:	b948      	cbnz	r0, 800dc88 <__smakebuf_r+0x44>
 800dc74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc78:	059a      	lsls	r2, r3, #22
 800dc7a:	d4ef      	bmi.n	800dc5c <__smakebuf_r+0x18>
 800dc7c:	f023 0303 	bic.w	r3, r3, #3
 800dc80:	f043 0302 	orr.w	r3, r3, #2
 800dc84:	81a3      	strh	r3, [r4, #12]
 800dc86:	e7e3      	b.n	800dc50 <__smakebuf_r+0xc>
 800dc88:	89a3      	ldrh	r3, [r4, #12]
 800dc8a:	6020      	str	r0, [r4, #0]
 800dc8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc90:	81a3      	strh	r3, [r4, #12]
 800dc92:	9b00      	ldr	r3, [sp, #0]
 800dc94:	6163      	str	r3, [r4, #20]
 800dc96:	9b01      	ldr	r3, [sp, #4]
 800dc98:	6120      	str	r0, [r4, #16]
 800dc9a:	b15b      	cbz	r3, 800dcb4 <__smakebuf_r+0x70>
 800dc9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dca0:	4630      	mov	r0, r6
 800dca2:	f000 f81d 	bl	800dce0 <_isatty_r>
 800dca6:	b128      	cbz	r0, 800dcb4 <__smakebuf_r+0x70>
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	f023 0303 	bic.w	r3, r3, #3
 800dcae:	f043 0301 	orr.w	r3, r3, #1
 800dcb2:	81a3      	strh	r3, [r4, #12]
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	431d      	orrs	r5, r3
 800dcb8:	81a5      	strh	r5, [r4, #12]
 800dcba:	e7cf      	b.n	800dc5c <__smakebuf_r+0x18>

0800dcbc <_fstat_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d07      	ldr	r5, [pc, #28]	; (800dcdc <_fstat_r+0x20>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	602b      	str	r3, [r5, #0]
 800dcca:	f7f5 f9c4 	bl	8003056 <_fstat>
 800dcce:	1c43      	adds	r3, r0, #1
 800dcd0:	d102      	bne.n	800dcd8 <_fstat_r+0x1c>
 800dcd2:	682b      	ldr	r3, [r5, #0]
 800dcd4:	b103      	cbz	r3, 800dcd8 <_fstat_r+0x1c>
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	bd38      	pop	{r3, r4, r5, pc}
 800dcda:	bf00      	nop
 800dcdc:	20011210 	.word	0x20011210

0800dce0 <_isatty_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	4d06      	ldr	r5, [pc, #24]	; (800dcfc <_isatty_r+0x1c>)
 800dce4:	2300      	movs	r3, #0
 800dce6:	4604      	mov	r4, r0
 800dce8:	4608      	mov	r0, r1
 800dcea:	602b      	str	r3, [r5, #0]
 800dcec:	f7f5 f9c3 	bl	8003076 <_isatty>
 800dcf0:	1c43      	adds	r3, r0, #1
 800dcf2:	d102      	bne.n	800dcfa <_isatty_r+0x1a>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	b103      	cbz	r3, 800dcfa <_isatty_r+0x1a>
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	bd38      	pop	{r3, r4, r5, pc}
 800dcfc:	20011210 	.word	0x20011210

0800dd00 <_init>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	bf00      	nop
 800dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd06:	bc08      	pop	{r3}
 800dd08:	469e      	mov	lr, r3
 800dd0a:	4770      	bx	lr

0800dd0c <_fini>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr
